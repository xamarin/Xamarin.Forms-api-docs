<Type Name="AbsoluteLayout" FullName="Xamarin.Forms.AbsoluteLayout">
  <TypeSignature Language="C#" Value="public class AbsoluteLayout : Xamarin.Forms.Layout&lt;Xamarin.Forms.View&gt;, Xamarin.Forms.IElementConfiguration&lt;Xamarin.Forms.AbsoluteLayout&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AbsoluteLayout extends Xamarin.Forms.Layout`1&lt;class Xamarin.Forms.View&gt; implements class Xamarin.Forms.IElementConfiguration`1&lt;class Xamarin.Forms.AbsoluteLayout&gt;" />
  <TypeSignature Language="DocId" Value="T:Xamarin.Forms.AbsoluteLayout" />
  <TypeSignature Language="F#" Value="type AbsoluteLayout = class&#xA;    inherit Layout&lt;View&gt;&#xA;    interface IElementConfiguration&lt;AbsoluteLayout&gt;" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Forms.Core</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Xamarin.Forms.Layout&lt;Xamarin.Forms.View&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">Xamarin.Forms.View</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xamarin.Forms.IElementConfiguration&lt;Xamarin.Forms.AbsoluteLayout&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Positions child elements at absolute positions.</summary>
    <remarks>
      <para>Application developers can control the placement of child elements by providing proportional coordinates, device coordinates, or a combination of both, depending on the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> values that are passed to <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(Xamarin.Forms.BindableObject,Xamarin.Forms.AbsoluteLayoutFlags)" /> method. When one of the proportional <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration values is provided, the corresponding X, or Y arguments that range between 0.0 and 1.0 will always cause the child to be displayed completely on screen. That is, you do not need to subtract or add the height or width of a child in order to display it flush with the left, right, top, or bottom of the <see cref="T:Xamarin.Forms.AbsoluteLayout" />. For width, height, X, or Y values that are not specified proportionally, application developers use device-dependent units to locate and size the child element.</para>
      <example>
        <para>The following example shows how to use an <see cref="T:Xamarin.Forms.AbsoluteLayout" /> with proportional position arguments.</para>
        <code lang="csharp lang-csharp"><![CDATA[
    
    Label header = new Label
    {
        Text = "AbsoluteLayout Demo",
        FontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label)),
        HorizontalOptions = LayoutOptions.Center
    };
    
    AbsoluteLayout simpleLayout = new AbsoluteLayout
    {
        BackgroundColor = Color.Blue.WithLuminosity(0.9),
        VerticalOptions = LayoutOptions.FillAndExpand
    };
    
    topLeftLabel = new Label
    {
        Text = "Top Left",
        TextColor = Color.Black
    };
    
    centerLabel = new Label
    {
        Text = "Centered",
        TextColor = Color.Black
    };
    
    bottomRightLabel = new Label
    {
        Text = "Bottom Right",
        TextColor = Color.Black
    };
    
    // PositionProportional flag maps the range (0.0, 1.0) to
    // the range "flush [left|top]" to "flush [right|bottom]"
    AbsoluteLayout.SetLayoutFlags(bottomRightLabel,
        AbsoluteLayoutFlags.PositionProportional);
    
    AbsoluteLayout.SetLayoutBounds(topLeftLabel,
        new Rectangle(0f,
            0f, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
    
    AbsoluteLayout.SetLayoutFlags(centerLabel,
        AbsoluteLayoutFlags.PositionProportional);
    
    AbsoluteLayout.SetLayoutBounds(centerLabel,
        new Rectangle(0.5,
            0.5, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
    
    AbsoluteLayout.SetLayoutFlags(bottomRightLabel,
        AbsoluteLayoutFlags.PositionProportional);
    
    AbsoluteLayout.SetLayoutBounds(bottomRightLabel,
        new Rectangle(1f,
            1f, AbsoluteLayout.AutoSize, AbsoluteLayout.AutoSize));
    
    simpleLayout.Children.Add(topLeftLabel);
    simpleLayout.Children.Add(centerLabel);
    simpleLayout.Children.Add(bottomRightLabel);
    ]]></code>
        <para>The code sample below shows how to place two labels by specifying device-dependent units.</para>
        <code lang="csharp lang-csharp"><![CDATA[
    
    AbsoluteLayout simpleLayout = new AbsoluteLayout
    {
    
        BackgroundColor = Color.Blue.WithLuminosity(0.9),
        VerticalOptions = LayoutOptions.FillAndExpand
    };
    
    Label header = new Label
    {
        Text = "Device Units Demo",
        TextColor = Color.Black,
        FontSize = Device.GetNamedSize(NamedSize.Large, typeof(Label))
    };
    
    topLeftText = new Label
    {
        Text = "Left",
        TextColor = Color.Black
    };
    
    AbsoluteLayout.SetLayoutFlags(topLeftText,
        AbsoluteLayoutFlags.None);
    
    AbsoluteLayout.SetLayoutBounds(topLeftText,
        new Rectangle(0f, 0f, 100f, 50f));
    
    middleText = new Label
    {
        Text = "Device-dependent location",
        TextColor = Color.Black
    };
    
    AbsoluteLayout.SetLayoutFlags(middleText,
        AbsoluteLayoutFlags.None);
    
    AbsoluteLayout.SetLayoutBounds(middleText,
        new Rectangle(100f, 200f, 200f, 50f));
    
    simpleLayout.Children.Add(topLeftText);
    simpleLayout.Children.Add(middleText);
    
    }]]></code>
      </example>
      <para>The following image shows the AbsoluteLayout demo from the <format type="text/html"><a href="https://developer.xamarin.com/samples/tag/Xamarin.Forms/" target="_blank">FormsGallery</a></format> sample.
    </para>
      <para>
        <img href="~/Xamarin.Forms/_images/AbsoluteLayout.TripleScreenShot.png" />
      </para>
      <example>
        <para>XAML for Xamarin.Forms supports the following attached properties for the <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class:</para>
        <list type="table">
          <listheader>
            <term>Attached Property</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>AbsoluteLayout.LayoutBounds</term>
            <description>
              <para>A comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle.</para>
            </description>
          </item>
          <item>
            <term>AbsoluteLayout.LayoutFlags</term>
            <description>
              <para>
                <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names: <c>All</c>, <c>None</c>, <c>HeightProportional</c>, <c>WidthProportional</c>, <c>SizeProportional</c>, <c>XProportional</c>, <c>YProportional</c>, or <c>PositionProportional</c>. Application developers can combine any of these flags together by supplying a comma-separated list. </para>
            </description>
          </item>
        </list>
        <para>Application developers can use XAML to lay out elements with the <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class. The example below places a blue <see cref="T:Xamarin.Forms.BoxView" /> inside an <see cref="T:Xamarin.Forms.AbsoluteLayout" />: </para>
        <code lang="XAML"><![CDATA[<AbsoluteLayout VerticalOptions="FillAndExpand"
                    HorizontalOptions="FillAndExpand">
        <BoxView    AbsoluteLayout.LayoutBounds="0.25, 0.25, 0.5, 0.5"
                    Color="Blue"
                    AbsoluteLayout.LayoutFlags="All" />
    </AbsoluteLayout>
    ]]></code>
      </example>
      <para>The <see cref="T:Xamarin.Forms.AbsoluteLayout" /> class can lay its child elements out in proportional units, device units, or a combination of both. Application developers should remember the following points when specifying a <see cref="T:Xamarin.Forms.Rectangle" /> structure that will define the layout bounds of a child element:
            <list type="bullet"><item><term>For elements whose height and width fit on the screen, proportional position dimensions in the range [0,1] represent elements that are completely on the screen, regardless of whether the height, width, or both are specified in device or proportional units.</term></item><item><term>The above point means that, to specify an element in the lower right hand corner of the screen and that is half as wide and half as all as the screen, with a  <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> value of <c>All</c>, the application developer would specify "1.0, 1.0, 0.5, 0.5".</term></item><item><term>The app developer can inadvertently cause child elements for which one or both size dimensions were specified proportionally to be displayed partially off the screen, or hidden altogether, by specifying device-unit positions that do not leave enough room for the calculated size of the child.</term></item><item><term>Each part of the bounding <see cref="T:Xamarin.Forms.Rectangle" /> structure is interpreted according to the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> value that controls it. A given rectangle might, for example, have an X-coordinate that is in device units, a Y-coordinate that is in proportional units, a height that is in proportional units, and a width that is in device units, or any other combination of device and proportional units. </term></item><item><term>Rectangles that, when interpreted by using the current <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> set on the child, represent bounding boxes that are partially or wholly off-screen—for example, by having a width that is larger than the screen width—may give unexpected results.</term></item></list></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AbsoluteLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the AbsoluteLayout class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public static double AutoSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 AutoSize" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.AbsoluteLayout.AutoSize" />
      <MemberSignature Language="F#" Value="member this.AutoSize : double" Usage="Xamarin.Forms.AbsoluteLayout.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A value that indicates that the width or height of the child should be sized to that child's native size.</summary>
        <value>
        </value>
        <remarks>
          <para>Application developers can set the width or height of the <see cref="P:Xamarin.Forms.VisualElement.Bounds" /> property to <see cref="P:Xamarin.Forms.AbsoluteLayout.AutoSize" /> on a visual element when adding to the layout to cause that element to be measured during the layout pass and sized appropriately.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.AbsoluteLayout.IAbsoluteList&lt;Xamarin.Forms.View&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.AbsoluteLayout/IAbsoluteList`1&lt;class Xamarin.Forms.View&gt; Children" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.AbsoluteLayout.Children" />
      <MemberSignature Language="F#" Value="member this.Children : Xamarin.Forms.AbsoluteLayout.IAbsoluteList&lt;Xamarin.Forms.View&gt;" Usage="Xamarin.Forms.AbsoluteLayout.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.AbsoluteLayout+IAbsoluteList&lt;Xamarin.Forms.View&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of child elements of the AbsoluteLayout.</summary>
        <value>The collection of child elements.</value>
        <remarks>
          <para>Application developers can use implicit collection syntax in XAML to add items to this collection, because this property is the ContentPropertyAttribute for the AbsoluteLayout class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutBounds">
      <MemberSignature Language="C#" Value="public static Xamarin.Forms.Rectangle GetLayoutBounds (Xamarin.Forms.BindableObject bindable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Rectangle GetLayoutBounds(class Xamarin.Forms.BindableObject bindable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.GetLayoutBounds(Xamarin.Forms.BindableObject)" />
      <MemberSignature Language="F#" Value="static member GetLayoutBounds : Xamarin.Forms.BindableObject -&gt; Xamarin.Forms.Rectangle" Usage="Xamarin.Forms.AbsoluteLayout.GetLayoutBounds bindable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Xamarin.Forms.TypeConverter(typeof(Xamarin.Forms.BoundsTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
      </Parameters>
      <Docs>
        <param name="bindable">A visual element.</param>
        <summary>Gets the layout bounds of <paramref name="bindable" />.</summary>
        <returns>The layout bounds of the object.</returns>
        <remarks>
          <para>This method supports the <c>AbsoluteLayout.LayoutBounds</c> XAML attached property. In XAML, Application developers can specify a comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutFlags">
      <MemberSignature Language="C#" Value="public static Xamarin.Forms.AbsoluteLayoutFlags GetLayoutFlags (Xamarin.Forms.BindableObject bindable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.AbsoluteLayoutFlags GetLayoutFlags(class Xamarin.Forms.BindableObject bindable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.GetLayoutFlags(Xamarin.Forms.BindableObject)" />
      <MemberSignature Language="F#" Value="static member GetLayoutFlags : Xamarin.Forms.BindableObject -&gt; Xamarin.Forms.AbsoluteLayoutFlags" Usage="Xamarin.Forms.AbsoluteLayout.GetLayoutFlags bindable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.AbsoluteLayoutFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
      </Parameters>
      <Docs>
        <param name="bindable">A visual element.</param>
        <summary>Gets the layout flags that were specified when <paramref name="bindable" /> was added to an <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
        <returns>The layout flags of the object.</returns>
        <remarks>
          <para>This method supports the <c>AbsoluteLayout.LayoutFlags</c> XAML attached property. In XAML, Application developers can specify the following <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names for the value of this property on the children of a <see cref="T:Xamarin.Forms.AbsoluteLayout" />:</para>
          <list type="bullet">
            <item>
              <term>
                <c>All</c>
              </term>
            </item>
            <item>
              <term>
                <c>None</c>
              </term>
            </item>
            <item>
              <term>
                <c>HeightProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>WidthProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>SizeProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>XProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>YProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>PositionProportional</c>
              </term>
            </item>
          </list>
          <para>Application developers can combine any of the above values by supplying a comma-separated list.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty LayoutBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty LayoutBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.AbsoluteLayout.LayoutBoundsProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutBoundsProperty : Xamarin.Forms.BindableProperty" Usage="Xamarin.Forms.AbsoluteLayout.LayoutBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implements the attached property that represents the layout bounds of child elements. Bindable at run time with the string "LayoutBounds". See Remarks.</summary>
        <remarks>The interface for this property is defined by the <see cref="M:Xamarin.Forms.AbsoluteLayout.GetLayoutBounds(Xamarin.Forms.BindableObject)" /> and <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(Xamarin.Forms.BindableObject,Xamarin.Forms.Rectangle)" /> methods.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChildren">
      <MemberSignature Language="C#" Value="protected override void LayoutChildren (double x, double y, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LayoutChildren(float64 x, float64 y, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="override this.LayoutChildren : double * double * double * double -&gt; unit" Usage="absoluteLayout.LayoutChildren (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The X coordinate of the region that contains the child elements and that is used to calculate proportional values.</param>
        <param name="y">The Y coordinate of the region that contains the child elements and that is used to calculate proportional values.</param>
        <param name="width">The width of the the region that contains the child elements and that is used to calculate proportional values.</param>
        <param name="height">The height of the region that contains the child elements and that is used to calculate proportional values.</param>
        <summary>Positions and sizes the children of an AbsoluteLayout.</summary>
        <remarks>
          <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)" /> to change the default behavior of <see cref="T:Xamarin.Forms.AbsoluteLayout" />. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)" /> method and then modify the dimensions and locations of the children directly.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutFlagsProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty LayoutFlagsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty LayoutFlagsProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.AbsoluteLayout.LayoutFlagsProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutFlagsProperty : Xamarin.Forms.BindableProperty" Usage="Xamarin.Forms.AbsoluteLayout.LayoutFlagsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implements the attached property that contains the <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> values for child elements.</summary>
        <remarks>The interface for this property is defined by the <see cref="M:Xamarin.Forms.AbsoluteLayout.GetLayoutFlags(Xamarin.Forms.BindableObject)" /> and <see cref="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(Xamarin.Forms.BindableObject,Xamarin.Forms.AbsoluteLayoutFlags)" /> methods.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="On&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.IPlatformElementConfiguration&lt;T,Xamarin.Forms.AbsoluteLayout&gt; On&lt;T&gt; () where T : Xamarin.Forms.IConfigPlatform;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Xamarin.Forms.IPlatformElementConfiguration`2&lt;!!T, class Xamarin.Forms.AbsoluteLayout&gt; On&lt;(class Xamarin.Forms.IConfigPlatform) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.On``1" />
      <MemberSignature Language="F#" Value="abstract member On : unit -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;'T, Xamarin.Forms.AbsoluteLayout (requires 'T :&gt; Xamarin.Forms.IConfigPlatform)&gt; (requires 'T :&gt; Xamarin.Forms.IConfigPlatform)&#xA;override this.On : unit -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;'T, Xamarin.Forms.AbsoluteLayout (requires 'T :&gt; Xamarin.Forms.IConfigPlatform)&gt; (requires 'T :&gt; Xamarin.Forms.IConfigPlatform)" Usage="absoluteLayout.On " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementConfiguration`1.On``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;T,Xamarin.Forms.AbsoluteLayout&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Xamarin.Forms.IConfigPlatform</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The platform configuration that selects the platform specific to use.</typeparam>
        <summary>Returns the configuration object that the developer can use to call platform-specific methods for the layout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildAdded">
      <MemberSignature Language="C#" Value="protected override void OnChildAdded (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildAdded(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="override this.OnChildAdded : Xamarin.Forms.Element -&gt; unit" Usage="absoluteLayout.OnChildAdded child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The element that was added to the children.</param>
        <summary>Called when a child is added to the <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
        <remarks>
          <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded(Xamarin.Forms.Element)" /> to change the default behavior thata is triggered when a child is added. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildAdded(Xamarin.Forms.Element)" /> method and then add additional logic.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildRemoved">
      <MemberSignature Language="C#" Value="protected override void OnChildRemoved (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildRemoved(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="override this.OnChildRemoved : Xamarin.Forms.Element -&gt; unit" Usage="absoluteLayout.OnChildRemoved child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The element that was removed from the children.</param>
        <summary>Called when a child is removed from the <see cref="T:Xamarin.Forms.AbsoluteLayout" />.</summary>
        <remarks>
          <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element)" /> to change the default behavior thata is triggered when a child is removed. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element)" /> method and then add additional logic.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildRemoved">
      <MemberSignature Language="C#" Value="protected override void OnChildRemoved (Xamarin.Forms.Element child, int oldLogicalIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildRemoved(class Xamarin.Forms.Element child, int32 oldLogicalIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.OnChildRemoved(Xamarin.Forms.Element,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.OnChildRemoved : Xamarin.Forms.Element * int -&gt; unit" Usage="absoluteLayout.OnChildRemoved (child, oldLogicalIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
        <Parameter Name="oldLogicalIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="oldLogicalIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSizeRequest">
      <MemberSignature Language="C#" Value="protected override Xamarin.Forms.SizeRequest OnSizeRequest (double widthConstraint, double heightConstraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype Xamarin.Forms.SizeRequest OnSizeRequest(float64 widthConstraint, float64 heightConstraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="override this.OnSizeRequest : double * double -&gt; Xamarin.Forms.SizeRequest" Usage="absoluteLayout.OnSizeRequest (widthConstraint, heightConstraint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.SizeRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthConstraint" Type="System.Double" />
        <Parameter Name="heightConstraint" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="widthConstraint">The available width for the AbsoluteLayout to use.</param>
        <param name="heightConstraint">The available height for the AbsoluteLayout to use.</param>
        <summary>Called during the measure pass of a layout cycle to get the desired size of the AbsoluteLayout.</summary>
        <returns>A <see cref="T:Xamarin.Forms.SizeRequest" /> which contains the desired size of the AbsoluteLayout.</returns>
        <remarks>
          <para>Application developers can override <see cref="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest(System.Double,System.Double)" /> to change the default behavior thata is triggered when a child is removed. When doing so, it is recommended to call the base <see cref="M:Xamarin.Forms.AbsoluteLayout.OnSizeRequest(System.Double,System.Double)" /> method and then modify the dimensions and locations of the children directly.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLayoutBounds">
      <MemberSignature Language="C#" Value="public static void SetLayoutBounds (Xamarin.Forms.BindableObject bindable, Xamarin.Forms.Rectangle bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLayoutBounds(class Xamarin.Forms.BindableObject bindable, valuetype Xamarin.Forms.Rectangle bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.SetLayoutBounds(Xamarin.Forms.BindableObject,Xamarin.Forms.Rectangle)" />
      <MemberSignature Language="F#" Value="static member SetLayoutBounds : Xamarin.Forms.BindableObject * Xamarin.Forms.Rectangle -&gt; unit" Usage="Xamarin.Forms.AbsoluteLayout.SetLayoutBounds (bindable, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
        <Parameter Name="bounds" Type="Xamarin.Forms.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bindable">The view to delimit by <paramref name="bounds" />.</param>
        <param name="bounds">A rectangle that represents the desired size and shape of <paramref name="bindable" />.</param>
        <summary>Sets the layout bounds of a view that will be used to size it when it is layed out.</summary>
        <remarks>
          <para>This method supports the <c>AbsoluteLayout.LayoutBounds</c> XAML attached property. In XAML, Application developers can specify a comma-separated list—possibly with spaces—of four values that specify the bounding rectangle's position and dimensions. The first two values in the list must represent numbers. The latter two values may each either be numbers, or the string "AutoSize". The <c>AbsoluteLayout.LayoutFlags</c> attached property determines how the values in the list are interpreted to create the bounding rectangle. Application developers can call this method to update the layout of a view after it is added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLayoutFlags">
      <MemberSignature Language="C#" Value="public static void SetLayoutFlags (Xamarin.Forms.BindableObject bindable, Xamarin.Forms.AbsoluteLayoutFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLayoutFlags(class Xamarin.Forms.BindableObject bindable, valuetype Xamarin.Forms.AbsoluteLayoutFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AbsoluteLayout.SetLayoutFlags(Xamarin.Forms.BindableObject,Xamarin.Forms.AbsoluteLayoutFlags)" />
      <MemberSignature Language="F#" Value="static member SetLayoutFlags : Xamarin.Forms.BindableObject * Xamarin.Forms.AbsoluteLayoutFlags -&gt; unit" Usage="Xamarin.Forms.AbsoluteLayout.SetLayoutFlags (bindable, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
        <Parameter Name="flags" Type="Xamarin.Forms.AbsoluteLayoutFlags" />
      </Parameters>
      <Docs>
        <param name="bindable">The view on which to set the layout flags.</param>
        <param name="flags">A <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> that describes the how to interpret the layout bounds for <paramref name="bindable" />.</param>
        <summary>Sets the layout flags of a view that will be used to interpret the layout bounds set on it when it is added to the layout.</summary>
        <remarks>
          <para>This method supports the <c>AbsoluteLayout.LayoutFlags</c> XAML attached property. In XAML, Application developers can specify the following <see cref="T:Xamarin.Forms.AbsoluteLayoutFlags" /> enumeration value names for the value of this property on the children of a <see cref="T:Xamarin.Forms.AbsoluteLayout" />:</para>
          <list type="bullet">
            <item>
              <term>
                <c>All</c>
              </term>
            </item>
            <item>
              <term>
                <c>None</c>
              </term>
            </item>
            <item>
              <term>
                <c>HeightProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>WidthProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>SizeProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>XProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>YProportional</c>
              </term>
            </item>
            <item>
              <term>
                <c>PositionProportional</c>
              </term>
            </item>
          </list>
          <para>Application developers can combine any of the above values by supplying a comma-separated list. Application developers can call this method to update the layout flags of a view after it is added.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
