<Type Name="Layout&lt;T&gt;" FullName="Xamarin.Forms.Layout&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class Layout&lt;T&gt; : Xamarin.Forms.Layout, Xamarin.Forms.IViewContainer&lt;T&gt; where T : View" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Layout`1&lt;(class Xamarin.Forms.View) T&gt; extends Xamarin.Forms.Layout implements class Xamarin.Forms.IViewContainer`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Xamarin.Forms.Layout`1" />
  <TypeSignature Language="F#" Value="type Layout&lt;'T (requires 'T :&gt; View)&gt; = class&#xA;    inherit Layout&#xA;    interface IViewContainer&lt;'T (requires 'T :&gt; View)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Forms.Core</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Xamarin.Forms.Layout</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xamarin.Forms.IViewContainer&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Xamarin.Forms.ContentProperty("Children")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The subclass of <see cref="T:Xamarin.Forms.View" /> the layout contains.</typeparam>
    <summary>A base implementation of a layout with undefined behavior and multiple children.</summary>
    <remarks>
      <para>
        <see cref="T:Xamarin.Forms.Layout`1" />s contain <see cref="P:Xamarin.Forms.Layout`1.Children" /> that are of the type <c>T</c> with which the <see cref="T:Xamarin.Forms.Layout`1" /> was specified. This <c>T</c> must be of type <see cref="T:Xamarin.Forms.View" />. Since <see cref="T:Xamarin.Forms.Layout" />s are subclasses of <see cref="T:Xamarin.Forms.View" />, this means that layouts may be nested, contain scrolling regions, etc.  
      </para>
      <para>
          The following example shows one way to add elements to a layout.
          </para>
      <example>
        <code lang="csharp lang-csharp"><![CDATA[
  void UpdateItems (Layout<View> layout, IEnumerable newItems)
  {
    layout.Children.Clear ();
    foreach (var item in newItems) {
      layout.Children.Add (item);
    }
  }
          ]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Layout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Provides the base initialization for objects derived from the Layout&lt;T&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;T&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!T&gt; Children" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Layout`1.Children" />
      <MemberSignature Language="F#" Value="member this.Children : System.Collections.Generic.IList&lt;'T (requires 'T :&gt; Xamarin.Forms.View)&gt;" Usage="Xamarin.Forms.Layout&lt;'T (requires 'T :&gt; Xamarin.Forms.View)&gt;.Children" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Xamarin.Forms.IViewContainer`1.Children</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an IList&lt;View&gt; of child element of the Layout.</summary>
        <value>A IList&lt;View&gt;. The default is an empty list.</value>
        <remarks>
          <para>
            The Children collection of a Layout contains all the children added throught the public add/remove interface. Internal children will not be exposed through this collection.
          </para>
          <para>
              The following shows the creation of a layout, setting a property, and adding the children in the object initializer.
              </para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
  var stack = new StackLayout {
    Spacing = 20,
    Children = {
      new Label {Text = "Hello World!"},
      new Button {Text = "Click Me!"}
    }
  };
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnAdded (T view);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAdded(!T view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.OnAdded(`0)" />
      <MemberSignature Language="F#" Value="abstract member OnAdded : 'T -&gt; unit&#xA;override this.OnAdded : 'T -&gt; unit" Usage="layout.OnAdded view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="T" />
      </Parameters>
      <Docs>
        <param name="view">The view which was added.</param>
        <summary>Invoked when a child is added to the layout. Implement this method to add class handling for this event.</summary>
        <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildAdded">
      <MemberSignature Language="C#" Value="protected override void OnChildAdded (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildAdded(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.OnChildAdded(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="override this.OnChildAdded : Xamarin.Forms.Element -&gt; unit" Usage="layout.OnChildAdded child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The child that was added.</param>
        <summary>Application developers can override this method to respond when a child is added.</summary>
        <remarks>Application developers who override this method must call base.OnChildAdded before performing any other actions in their override.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildRemoved">
      <MemberSignature Language="C#" Value="protected override void OnChildRemoved (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildRemoved(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.OnChildRemoved(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="override this.OnChildRemoved : Xamarin.Forms.Element -&gt; unit" Usage="layout.OnChildRemoved child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("OnChildRemoved(Element) is obsolete as of version 4.8.0. Please use OnChildRemoved(Element, int) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The child that was removed.</param>
        <summary>Application developers can override this method to respond when a child is removed.</summary>
        <remarks>Application developers who override this method must call base.OnChildRemoved before performing any other actions in their override.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildRemoved">
      <MemberSignature Language="C#" Value="protected override void OnChildRemoved (Xamarin.Forms.Element child, int oldLogicalIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChildRemoved(class Xamarin.Forms.Element child, int32 oldLogicalIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.OnChildRemoved(Xamarin.Forms.Element,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.OnChildRemoved : Xamarin.Forms.Element * int -&gt; unit" Usage="layout.OnChildRemoved (child, oldLogicalIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
        <Parameter Name="oldLogicalIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="oldLogicalIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoved (T view);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoved(!T view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Layout`1.OnRemoved(`0)" />
      <MemberSignature Language="F#" Value="abstract member OnRemoved : 'T -&gt; unit&#xA;override this.OnRemoved : 'T -&gt; unit" Usage="layout.OnRemoved view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="T" />
      </Parameters>
      <Docs>
        <param name="view">The view which was removed.</param>
        <summary>Invoked when a child is removed from the layout. Implement this method to add class handling for this event.</summary>
        <remarks>This method is different from <see cref="M:Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element)" /> in that it provides a typed child consistent with the type of the Layout&lt;T&gt;.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
