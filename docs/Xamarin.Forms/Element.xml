<Type Name="Element" FullName="Xamarin.Forms.Element">
  <TypeSignature Language="C#" Value="public abstract class Element : Xamarin.Forms.BindableObject, Xamarin.Forms.IElementController, Xamarin.Forms.Internals.INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Element extends Xamarin.Forms.BindableObject implements class Xamarin.Forms.IElementController, class Xamarin.Forms.Internals.INameScope" />
  <TypeSignature Language="DocId" Value="T:Xamarin.Forms.Element" />
  <TypeSignature Language="F#" Value="type Element = class&#xA;    inherit BindableObject&#xA;    interface INameScope&#xA;    interface IElementController" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Forms.Core</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Xamarin.Forms.IElementController</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Xamarin.Forms.Internals.INameScope</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides the base class for all Xamarin.Forms hierarchal elements. This class contains all the methods and properties required to represent an element in the Xamarin.Forms hierarchy.</summary>
    <remarks>
      <para>Important categories of visual elements are noted in the following table:</para>
      <list type="table">
        <listheader>
          <term>Class</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>
            <see cref="T:Xamarin.Forms.VisualElement" />
          </term>
          <description>A <see cref="T:Xamarin.Forms.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.</description>
        </item>
        <item>
          <term>
            <see cref="T:Xamarin.Forms.Cell" />
          </term>
          <description>Cells are elements meant to be added to <see cref="T:Xamarin.Forms.ListView" /> or <see cref="T:Xamarin.Forms.TableView" />.</description>
        </item>
        <item>
          <term>
            <see cref="T:Xamarin.Forms.Page" />
          </term>
          <description>A <see cref="T:Xamarin.Forms.VisualElement" /> that occupies most or all of the screen and contains a single child.</description>
        </item>
        <item>
          <term>
            <see cref="T:Xamarin.Forms.Layout" />
          </term>
          <description>
            <see cref="T:Xamarin.Forms.Layout" /> have a single child of type <see cref="T:Xamarin.Forms.View" />, while subclasses of <see cref="T:Xamarin.Forms.Layout`1" /> have a collection of multiple children views, including other layouts.</description>
        </item>
        <item>
          <term>
            Controls and specialized <see cref="T:Xamarin.Forms.View" />s
          </term>
          <description>The lower part of the diagram shows the Xamarin.Forms classes for universally-available controls, such as <see cref="T:Xamarin.Forms.Button" />s and <see cref="T:Xamarin.Forms.TableView" />s.</description>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Element ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Protected constructor used to initialize a the element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutomationId">
      <MemberSignature Language="C#" Value="public string AutomationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AutomationId" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.AutomationId" />
      <MemberSignature Language="F#" Value="member this.AutomationId : string with get, set" Usage="Xamarin.Forms.Element.AutomationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that allows the automation framework to find and interact with this element.</summary>
        <value>A value that the automation framework can use to find and interact with this element.</value>
        <remarks>This value may only be set once on an element.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutomationIdProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty AutomationIdProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty AutomationIdProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.Element.AutomationIdProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable AutomationIdProperty : Xamarin.Forms.BindableProperty" Usage="Xamarin.Forms.Element.AutomationIdProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The backing store for the <see cref="P:Xamarin.Forms.Element.AutomationId" /> field.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildAdded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; ChildAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ElementEventArgs&gt; ChildAdded" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.Element.ChildAdded" />
      <MemberSignature Language="F#" Value="member this.ChildAdded : EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " Usage="member this.ChildAdded : System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs whenever a child element is added to the element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildRemoved">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; ChildRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ElementEventArgs&gt; ChildRemoved" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.Element.ChildRemoved" />
      <MemberSignature Language="F#" Value="member this.ChildRemoved : EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " Usage="member this.ChildRemoved : System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs whenever a child element is removed from the element.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassId">
      <MemberSignature Language="C#" Value="public string ClassId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClassId" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.ClassId" />
      <MemberSignature Language="F#" Value="member this.ClassId : string with get, set" Usage="Xamarin.Forms.Element.ClassId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value used to identify a collection of semantically similar elements.</summary>
        <value>A string that represents the collection the element belongs to.</value>
        <remarks>Use the class id property to collect together elements into semantically similar groups for identification in ui testing and in theme engines.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassIdProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty ClassIdProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty ClassIdProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.Element.ClassIdProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable ClassIdProperty : Xamarin.Forms.BindableProperty" Usage="Xamarin.Forms.Element.ClassIdProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the ClassId bindable property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantAdded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; DescendantAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ElementEventArgs&gt; DescendantAdded" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.Element.DescendantAdded" />
      <MemberSignature Language="F#" Value="member this.DescendantAdded : EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " Usage="member this.DescendantAdded : System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs whenever a child element is added to the elements subtree.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantRemoved">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; DescendantRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Xamarin.Forms.ElementEventArgs&gt; DescendantRemoved" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.Element.DescendantRemoved" />
      <MemberSignature Language="F#" Value="member this.DescendantRemoved : EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " Usage="member this.DescendantRemoved : System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Xamarin.Forms.ElementEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs whenever a child element is removed from the elements subtree.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.Element&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Xamarin.Forms.Element&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.Descendants" />
      <MemberSignature Language="F#" Value="abstract member Descendants : unit -&gt; seq&lt;Xamarin.Forms.Element&gt;&#xA;override this.Descendants : unit -&gt; seq&lt;Xamarin.Forms.Element&gt;" Usage="element.Descendants " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementController.Descendants</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Xamarin.Forms.Element/&lt;Descendants&gt;d__87))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.Element&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectControlProvider">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.IEffectControlProvider EffectControlProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.IEffectControlProvider EffectControlProvider" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.EffectControlProvider" />
      <MemberSignature Language="F#" Value="member this.EffectControlProvider : Xamarin.Forms.IEffectControlProvider with get, set" Usage="Xamarin.Forms.Element.EffectControlProvider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Xamarin.Forms.IElementController.EffectControlProvider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.IEffectControlProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectIsAttached">
      <MemberSignature Language="C#" Value="public bool EffectIsAttached (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EffectIsAttached(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.EffectIsAttached(System.String)" />
      <MemberSignature Language="F#" Value="abstract member EffectIsAttached : string -&gt; bool&#xA;override this.EffectIsAttached : string -&gt; bool" Usage="element.EffectIsAttached name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementController.EffectIsAttached(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effects">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Xamarin.Forms.Effect&gt; Effects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Xamarin.Forms.Effect&gt; Effects" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.Effects" />
      <MemberSignature Language="F#" Value="member this.Effects : System.Collections.Generic.IList&lt;Xamarin.Forms.Effect&gt;" Usage="Xamarin.Forms.Element.Effects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Xamarin.Forms.Effect&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A list of the effects that are applied to this item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByName">
      <MemberSignature Language="C#" Value="public object FindByName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindByName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.FindByName(System.String)" />
      <MemberSignature Language="F#" Value="abstract member FindByName : string -&gt; obj&#xA;override this.FindByName : string -&gt; obj" Usage="element.FindByName name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.Internals.INameScope.FindByName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the element to find.</param>
        <summary>Returns the element that has the specified name.</summary>
        <returns>The element that has the specified name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMenu">
      <MemberSignature Language="C#" Value="public static Xamarin.Forms.Menu GetMenu (Xamarin.Forms.BindableObject bindable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.Menu GetMenu(class Xamarin.Forms.BindableObject bindable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject)" />
      <MemberSignature Language="F#" Value="static member GetMenu : Xamarin.Forms.BindableObject -&gt; Xamarin.Forms.Menu" Usage="Xamarin.Forms.Element.GetMenu bindable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Menu</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
      </Parameters>
      <Docs>
        <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose menu to get.</param>
        <summary>Gets the <see cref="T:Xamarin.Forms.Menu" /> object for <paramref name="bindable" />.</summary>
        <returns>The <see cref="T:Xamarin.Forms.Menu" /> object for <paramref name="bindable" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.Id" />
      <MemberSignature Language="F#" Value="member this.Id : Guid" Usage="Xamarin.Forms.Element.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that can be used to uniquely identify an element through the run of an application.</summary>
        <value>A Guid uniquely identifying the element.</value>
        <remarks>This value is generated at runtime and is not stable across runs of your app.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Xamarin.Forms.Element&gt; LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class Xamarin.Forms.Element&gt; LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.LogicalChildren" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.ObjectModel.ReadOnlyCollection&lt;Xamarin.Forms.Element&gt;" Usage="Xamarin.Forms.Element.LogicalChildren" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Xamarin.Forms.IElementController.LogicalChildren</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;Xamarin.Forms.Element&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty MenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty MenuProperty" />
      <MemberSignature Language="DocId" Value="F:Xamarin.Forms.Element.MenuProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable MenuProperty : Xamarin.Forms.BindableProperty" Usage="Xamarin.Forms.Element.MenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the attached menu property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.OnBindingContextChanged" />
      <MemberSignature Language="F#" Value="override this.OnBindingContextChanged : unit -&gt; unit" Usage="element.OnBindingContextChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked whenever the binding context of the element changes. Implement this method to add class handling for this event.</summary>
        <remarks>Implementors must call the base method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnChildAdded (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildAdded(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="abstract member OnChildAdded : Xamarin.Forms.Element -&gt; unit&#xA;override this.OnChildAdded : Xamarin.Forms.Element -&gt; unit" Usage="element.OnChildAdded child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The element that was added.</param>
        <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildAdded" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
        <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnChildRemoved (Xamarin.Forms.Element child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildRemoved(class Xamarin.Forms.Element child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element)" />
      <MemberSignature Language="F#" Value="abstract member OnChildRemoved : Xamarin.Forms.Element -&gt; unit&#xA;override this.OnChildRemoved : Xamarin.Forms.Element -&gt; unit" Usage="element.OnChildRemoved child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Xamarin.Forms.Element" />
      </Parameters>
      <Docs>
        <param name="child">The element that was removed.</param>
        <summary>Invoked whenever the <see cref="E:Xamarin.Forms.Element.ChildRemoved" /> event needs to be emitted. Implement this method to add class handling for this event.</summary>
        <remarks>This method has no default implementation. You should still call the base implementation in case an intermediate class has implemented this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentSet">
      <MemberSignature Language="C#" Value="protected virtual void OnParentSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.OnParentSet" />
      <MemberSignature Language="F#" Value="abstract member OnParentSet : unit -&gt; unit&#xA;override this.OnParentSet : unit -&gt; unit" Usage="element.OnParentSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked whenever the Parent of an element is set. Implement this method in order to add behavior when the element is added to a parent.</summary>
        <remarks>Implementors must call the base method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (string propertyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.OnPropertyChanged(System.String)" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : string -&gt; unit" Usage="element.OnPropertyChanged propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the bound property that changed.</param>
        <summary>Method that is called when a bound property is changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Element Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.Element Parent" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Xamarin.Forms.Element with get, set" Usage="Xamarin.Forms.Element.Parent" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Xamarin.Forms.IElement.Parent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Element</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the parent element of the element.</summary>
        <value>The element which should be the parent of this element.</value>
        <remarks>Most application authors will not need to set the parent element by hand.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentView">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.VisualElement ParentView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.VisualElement ParentView" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.ParentView" />
      <MemberSignature Language="F#" Value="member this.ParentView : Xamarin.Forms.VisualElement" Usage="Xamarin.Forms.Element.ParentView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("ParentView is obsolete as of version 2.1.0. Please use Parent instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.VisualElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the element which is the closest ancestor of this element that is a <see cref="T:Xamarin.Forms.VisualElement" />.</summary>
        <value>The closest ansestor which is a <see cref="T:Xamarin.Forms.VisualElement" />.</value>
        <remarks>Convenient way of accessing the nearest ancestor of an element which is actually represented on screen visually. If this element is a visual element, its bounds are relative to its ParentView.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Platform">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Internals.IPlatform Platform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.Internals.IPlatform Platform" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.Platform" />
      <MemberSignature Language="F#" Value="member this.Platform : Xamarin.Forms.Internals.IPlatform with get, set" Usage="Xamarin.Forms.Element.Platform" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Xamarin.Forms.IElementController.Platform</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("IPlatform is obsolete as of 3.5.0. Do not use this property.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Internals.IPlatform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlatformSet">
      <MemberSignature Language="C#" Value="public event EventHandler PlatformSet;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PlatformSet" />
      <MemberSignature Language="DocId" Value="E:Xamarin.Forms.Element.PlatformSet" />
      <MemberSignature Language="F#" Value="member this.PlatformSet : EventHandler " Usage="member this.PlatformSet : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Xamarin.Forms.IElementController.PlatformSet</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PlatformSet is obsolete as of 3.5.0. Do not use this event.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RealParent">
      <MemberSignature Language="C#" Value="public Xamarin.Forms.Element RealParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.Forms.Element RealParent" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.RealParent" />
      <MemberSignature Language="F#" Value="member this.RealParent : Xamarin.Forms.Element" Usage="Xamarin.Forms.Element.RealParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.Element</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDynamicResource">
      <MemberSignature Language="C#" Value="public void RemoveDynamicResource (Xamarin.Forms.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDynamicResource(class Xamarin.Forms.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty)" />
      <MemberSignature Language="F#" Value="override this.RemoveDynamicResource : Xamarin.Forms.BindableProperty -&gt; unit" Usage="element.RemoveDynamicResource property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty from which to remove the DynamicResource.</param>
        <summary>Removes a previously set dynamic resource</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDynamicResource">
      <MemberSignature Language="C#" Value="public void SetDynamicResource (Xamarin.Forms.BindableProperty property, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDynamicResource(class Xamarin.Forms.BindableProperty property, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty,System.String)" />
      <MemberSignature Language="F#" Value="override this.SetDynamicResource : Xamarin.Forms.BindableProperty * string -&gt; unit" Usage="element.SetDynamicResource (property, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty.</param>
        <param name="key">The key of the DynamicResource</param>
        <summary>Sets the BindableProperty property of this element to be updated via the DynamicResource with the provided key.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMenu">
      <MemberSignature Language="C#" Value="public static void SetMenu (Xamarin.Forms.BindableObject bindable, Xamarin.Forms.Menu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMenu(class Xamarin.Forms.BindableObject bindable, class Xamarin.Forms.Menu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject,Xamarin.Forms.Menu)" />
      <MemberSignature Language="F#" Value="static member SetMenu : Xamarin.Forms.BindableObject * Xamarin.Forms.Menu -&gt; unit" Usage="Xamarin.Forms.Element.SetMenu (bindable, menu)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Xamarin.Forms.BindableObject" />
        <Parameter Name="menu" Type="Xamarin.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject" /> whose menu to set.</param>
        <param name="menu">The new menu.</param>
        <summary>Sets the menu for <paramref name="bindable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueFromRenderer">
      <MemberSignature Language="C#" Value="public void SetValueFromRenderer (Xamarin.Forms.BindableProperty property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueFromRenderer(class Xamarin.Forms.BindableProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)" />
      <MemberSignature Language="F#" Value="member this.SetValueFromRenderer : Xamarin.Forms.BindableProperty * obj -&gt; unit" Usage="element.SetValueFromRenderer (property, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Xamarin.Forms platform.</param>
        <param name="value">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueFromRenderer">
      <MemberSignature Language="C#" Value="public void SetValueFromRenderer (Xamarin.Forms.BindablePropertyKey property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueFromRenderer(class Xamarin.Forms.BindablePropertyKey property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.SetValueFromRenderer(Xamarin.Forms.BindablePropertyKey,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member SetValueFromRenderer : Xamarin.Forms.BindablePropertyKey * obj -&gt; unit&#xA;override this.SetValueFromRenderer : Xamarin.Forms.BindablePropertyKey * obj -&gt; unit" Usage="element.SetValueFromRenderer (property, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindablePropertyKey,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Xamarin.Forms.BindablePropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Xamarin.Forms platform.</param>
        <param name="value">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleId">
      <MemberSignature Language="C#" Value="public string StyleId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StyleId" />
      <MemberSignature Language="DocId" Value="P:Xamarin.Forms.Element.StyleId" />
      <MemberSignature Language="F#" Value="member this.StyleId : string with get, set" Usage="Xamarin.Forms.Element.StyleId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a user defined value to uniquely identify the element.</summary>
        <value>A string uniquely identifying the element.</value>
        <remarks>Use the StyleId property to identify individual elements in your application for identification in ui testing and in theme engines.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xamarin.Forms.IElementController.SetValueFromRenderer">
      <MemberSignature Language="C#" Value="void IElementController.SetValueFromRenderer (Xamarin.Forms.BindableProperty property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Xamarin.Forms.IElementController.SetValueFromRenderer(class Xamarin.Forms.BindableProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.Xamarin#Forms#IElementController#SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Xamarin.Forms platform.</param>
        <param name="value">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use by the Xamarin.Forms platform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xamarin.Forms.Internals.INameScope.RegisterName">
      <MemberSignature Language="C#" Value="void INameScope.RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Xamarin.Forms.Internals.INameScope.RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Element.Xamarin#Forms#Internals#INameScope#RegisterName(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Xamarin.Forms.Internals.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.Forms.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">For internal use by the Xamarin.Forms platform.</param>
        <param name="scopedElement">For internal use by the Xamarin.Forms platform.</param>
        <summary>For internal use only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
