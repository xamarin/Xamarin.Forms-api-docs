<Overview>
  <Assemblies>
    <Assembly Name="Xamarin.Forms.Maps.Design" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.Windows.Design.Metadata.ProvideMetadata(typeof(Xamarin.Forms.Maps.RegisterMetadata))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Xamarin Inc.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright Â© Xamarin Inc. 2013-2017")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides the design-time metadata for the XAML language service.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Maps.Design")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.7", FrameworkDisplayName=".NET Framework 4.7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations | System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints | System.Diagnostics.DebuggableAttribute+DebuggingModes.EnableEditAndContinue)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Pages.Azure" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.3.0.336")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.3.0.3152150+336-sha.f9114b130-azdo.3152150.f9114b1306f2896cce07d358725f63ce6ab8cac5")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "4.3.0.3152150+336-sha.f9114b130-azdo.3152150")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Pages.Azure")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Pages" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Pages")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.3.0.336")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.3.0.3152150+336-sha.f9114b130-azdo.3152150.f9114b1306f2896cce07d358725f63ce6ab8cac5")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "4.3.0.3152150+336-sha.f9114b130-azdo.3152150")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Platform" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Platform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.8.0.312")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.8.0.1238-pre3+sha.57aefa6ad-azdo.3932585.57aefa6ade5acc0757179e1d58083e07cb00fc2e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "4.8.0.1238-pre3+sha.57aefa6ad-azdo.3932585")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Maps" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Internals.Preserve</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides Maps support for Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Maps")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.0.333")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727.0b6bfd5118a14ed9689f9159ccf3a5f1cb865cbd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Core" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Dependency(typeof(Xamarin.Forms.Xaml.ValueConverterProvider))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Internals.Preserve</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms", "Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms/design", "Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsPrefix("http://xamarin.com/schemas/2014/forms", "xf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsPrefix("http://xamarin.com/schemas/2014/forms/design", "d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.CarouselView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Pages.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Pages")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Build.Tasks")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("iOSUnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.Design")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.Android.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Maps")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Maps.iOS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Maps.iOS.Classic")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Maps.Android")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Xaml.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.FlexLayout.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Material")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.iOS.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.Android.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.Windows.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core.macOS.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.iOS.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Android.UITests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Loader")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.UITest.Validator")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Platform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Dependency(typeof(Xamarin.Forms.Xaml.ValueConverterProvider))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Internals.Preserve</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms", "Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms/design", "Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsPrefix("http://xamarin.com/schemas/2014/forms", "xf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsPrefix("http://xamarin.com/schemas/2014/forms/design", "d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.HotReload.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.DualScreen")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.DualScreen.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms", "Xamarin.Forms.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms/design", "Xamarin.Forms.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.0.333")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727.0b6bfd5118a14ed9689f9159ccf3a5f1cb865cbd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Xamarin.Forms.DualScreen" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.DualScreen")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.DualScreen.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.0.333")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727.0b6bfd5118a14ed9689f9159ccf3a5f1cb865cbd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Xaml" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Loader")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Dependency(typeof(Xamarin.Forms.Xaml.ResourcesLoader))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.Internals.Preserve</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms", "Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://xamarin.com/schemas/2014/forms/design", "Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "System", AssemblyName="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "System", AssemblyName="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2009/xaml", "Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2009/xaml", "System", AssemblyName="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Xamarin.Forms.XmlnsDefinition("http://schemas.microsoft.com/winfx/2009/xaml", "System", AssemblyName="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.HotReload.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Xaml.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Build.Tasks")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Xaml.Design")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.HotReload.UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.0.333")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727.0b6bfd5118a14ed9689f9159ccf3a5f1cb865cbd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Xamarin.Forms.Platform" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Xamarin.Forms.Platform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Xamarin.Forms.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Version", "2.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Xamarin.Forms")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.0.0.333")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727.0b6bfd5118a14ed9689f9159ccf3a5f1cb865cbd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("PackageVersion", "5.0.0.1539-pre2+sha.0b6bfd511-azdo.4115727")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 47 9b 17 88 b1 08 69 0e d3 55 90 ed c7 00 9a a9 41 1e d3 56 a7 72 4d 07 ef cb c4 c5 ad 95 d9 00 b0 e2 1b 63 7e 71 3c 3c 60 b2 b6 e7 c0 c7 97 7d 64 43 8e 64 15 7e ea 93 61 e6 10 31 bc f4 41 b6 ac 37 7d 41 1b f5 a4 bf 33 e5 94 c3 23 44 d0 32 2d 4e b7 48 0d 74 03 d3 cd 5e e4 35 de 45 de 2b 5c 62 c0 e8 0e eb 11 aa 34 b5 72 4d d0 51 37 f1 2e 33 95 97 c3 5e 77 96 13 fa c7 e4 81 ad 7e ab ]</AssemblyPublicKey>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Xamarin.Forms">
      <Type Name="AbsoluteLayout" Kind="Class" />
      <Type Name="AbsoluteLayout+IAbsoluteList`1" DisplayName="AbsoluteLayout+IAbsoluteList&lt;T&gt;" Kind="Interface" />
      <Type Name="AbsoluteLayoutFlags" Kind="Enumeration" />
      <Type Name="Accelerator" Kind="Class" />
      <Type Name="AcceleratorTypeConverter" Kind="Class" />
      <Type Name="AccessKeyPlacement" Kind="Enumeration" />
      <Type Name="ActivityIndicator" Kind="Class" />
      <Type Name="AdaptiveTrigger" Kind="Class" />
      <Type Name="Animation" Kind="Class" />
      <Type Name="AnimationExtensions" Kind="Class" />
      <Type Name="Application" Kind="Class" />
      <Type Name="AppLinkEntry" Kind="Class" />
      <Type Name="AppThemeChangedEventArgs" Kind="Class" />
      <Type Name="Aspect" Kind="Enumeration" />
      <Type Name="AutomationProperties" Kind="Class" />
      <Type Name="BackButtonBehavior" Kind="Class" />
      <Type Name="BackButtonPressedEventArgs" Kind="Class" />
      <Type Name="BaseMenuItem" Kind="Class" />
      <Type Name="BaseShellItem" Kind="Class" />
      <Type Name="BaseSwipeEventArgs" Kind="Class" />
      <Type Name="Behavior" Kind="Class" />
      <Type Name="Behavior`1" DisplayName="Behavior&lt;T&gt;" Kind="Class" />
      <Type Name="BindableLayout" Kind="Class" />
      <Type Name="BindableObject" Kind="Class" />
      <Type Name="BindableObjectExtensions" Kind="Class" />
      <Type Name="BindableProperty" Kind="Class" />
      <Type Name="BindableProperty+BindingPropertyChangedDelegate" Kind="Delegate" />
      <Type Name="BindableProperty+BindingPropertyChangedDelegate`1" DisplayName="BindableProperty+BindingPropertyChangedDelegate&lt;TPropertyType&gt;" Kind="Delegate" />
      <Type Name="BindableProperty+BindingPropertyChangingDelegate" Kind="Delegate" />
      <Type Name="BindableProperty+BindingPropertyChangingDelegate`1" DisplayName="BindableProperty+BindingPropertyChangingDelegate&lt;TPropertyType&gt;" Kind="Delegate" />
      <Type Name="BindableProperty+CoerceValueDelegate" Kind="Delegate" />
      <Type Name="BindableProperty+CoerceValueDelegate`1" DisplayName="BindableProperty+CoerceValueDelegate&lt;TPropertyType&gt;" Kind="Delegate" />
      <Type Name="BindableProperty+CreateDefaultValueDelegate" Kind="Delegate" />
      <Type Name="BindableProperty+CreateDefaultValueDelegate`2" DisplayName="BindableProperty+CreateDefaultValueDelegate&lt;TDeclarer,TPropertyType&gt;" Kind="Delegate" />
      <Type Name="BindableProperty+ValidateValueDelegate" Kind="Delegate" />
      <Type Name="BindableProperty+ValidateValueDelegate`1" DisplayName="BindableProperty+ValidateValueDelegate&lt;TPropertyType&gt;" Kind="Delegate" />
      <Type Name="BindablePropertyConverter" Kind="Class" />
      <Type Name="BindablePropertyKey" Kind="Class" />
      <Type Name="Binding" Kind="Class" />
      <Type Name="BindingBase" Kind="Class" />
      <Type Name="BindingCondition" Kind="Class" />
      <Type Name="BindingMode" Kind="Enumeration" />
      <Type Name="BindingTypeConverter" Kind="Class" />
      <Type Name="BoundsConstraint" Kind="Class" />
      <Type Name="BoundsTypeConverter" Kind="Class" />
      <Type Name="BoxView" Kind="Class" />
      <Type Name="Brush" Kind="Class" />
      <Type Name="BrushTypeConverter" Kind="Class" />
      <Type Name="BrushTypeConverter+GradientBrushParser" Kind="Class" />
      <Type Name="Button" Kind="Class" />
      <Type Name="Button+ButtonContentLayout" Kind="Class" />
      <Type Name="Button+ButtonContentLayout+ImagePosition" Kind="Enumeration" />
      <Type Name="Button+ButtonContentTypeConverter" Kind="Class" />
      <Type Name="ButtonsMask" Kind="Enumeration" />
      <Type Name="CarouselLayoutTypeConverter" Kind="Class" />
      <Type Name="CarouselPage" Kind="Class" />
      <Type Name="CarouselView" Kind="Class" />
      <Type Name="Cell" Kind="Class" />
      <Type Name="CheckBox" Kind="Class" />
      <Type Name="CheckedChangedEventArgs" Kind="Class" />
      <Type Name="ChildGestureRecognizer" Kind="Class" />
      <Type Name="ClearButtonVisibility" Kind="Enumeration" />
      <Type Name="ClickedEventArgs" Kind="Class" />
      <Type Name="ClickGestureRecognizer" Kind="Class" />
      <Type Name="CollectionSynchronizationCallback" Kind="Delegate" />
      <Type Name="CollectionView" Kind="Class" />
      <Type Name="Color" Kind="Structure" />
      <Type Name="ColorTypeConverter" Kind="Class" />
      <Type Name="ColumnDefinition" Kind="Class" />
      <Type Name="ColumnDefinitionCollection" Kind="Class" />
      <Type Name="ColumnDefinitionCollectionTypeConverter" Kind="Class" />
      <Type Name="Command" Kind="Class" />
      <Type Name="Command`1" DisplayName="Command&lt;T&gt;" Kind="Class" />
      <Type Name="CompareStateTrigger" Kind="Class" />
      <Type Name="CompressedLayout" Kind="Class" />
      <Type Name="Condition" Kind="Class" />
      <Type Name="Configuration`2" DisplayName="Configuration&lt;TPlatform,TElement&gt;" Kind="Class" />
      <Type Name="Constraint" Kind="Class" />
      <Type Name="ConstraintExpression" Kind="Class" />
      <Type Name="ConstraintType" Kind="Enumeration" />
      <Type Name="ConstraintTypeConverter" Kind="Class" />
      <Type Name="ContentPage" Kind="Class" />
      <Type Name="ContentPresenter" Kind="Class" />
      <Type Name="ContentPropertyAttribute" Kind="Class" />
      <Type Name="ContentView" Kind="Class" />
      <Type Name="ControlTemplate" Kind="Class" />
      <Type Name="CornerRadius" Kind="Structure" />
      <Type Name="CornerRadiusTypeConverter" Kind="Class" />
      <Type Name="CurrentItemChangedEventArgs" Kind="Class" />
      <Type Name="DataPackage" Kind="Class" />
      <Type Name="DataPackageOperation" Kind="Enumeration" />
      <Type Name="DataPackagePropertySet" Kind="Class" />
      <Type Name="DataPackagePropertySetView" Kind="Class" />
      <Type Name="DataPackageView" Kind="Class" />
      <Type Name="DataTemplate" Kind="Class" />
      <Type Name="DataTemplateSelector" Kind="Class" />
      <Type Name="DataTrigger" Kind="Class" />
      <Type Name="DateChangedEventArgs" Kind="Class" />
      <Type Name="DatePicker" Kind="Class" />
      <Type Name="DefinitionCollection`1" DisplayName="DefinitionCollection&lt;T&gt;" Kind="Class" />
      <Type Name="DependencyAttribute" Kind="Class" />
      <Type Name="DependencyFetchTarget" Kind="Enumeration" />
      <Type Name="DependencyService" Kind="Class" />
      <Type Name="DesignMode" Kind="Class" />
      <Type Name="Device" Kind="Class" />
      <Type Name="Device+Styles" Kind="Class" />
      <Type Name="DeviceStateTrigger" Kind="Class" />
      <Type Name="DoubleCollection" Kind="Class" />
      <Type Name="DoubleCollectionConverter" Kind="Class" />
      <Type Name="DragEventArgs" Kind="Class" />
      <Type Name="DragGestureRecognizer" Kind="Class" />
      <Type Name="DragStartingEventArgs" Kind="Class" />
      <Type Name="DropCompletedEventArgs" Kind="Class" />
      <Type Name="DropEventArgs" Kind="Class" />
      <Type Name="DropGestureRecognizer" Kind="Class" />
      <Type Name="Easing" Kind="Class" />
      <Type Name="EasingTypeConverter" Kind="Class" />
      <Type Name="Editor" Kind="Class" />
      <Type Name="EditorAutoSizeOption" Kind="Enumeration" />
      <Type Name="Effect" Kind="Class" />
      <Type Name="EffectiveFlowDirection" Kind="Enumeration" />
      <Type Name="EffectiveFlowDirectionExtensions" Kind="Class" />
      <Type Name="EffectiveVisualExtensions" Kind="Class" />
      <Type Name="Element" Kind="Class" />
      <Type Name="ElementEventArgs" Kind="Class" />
      <Type Name="ElementTemplate" Kind="Class" />
      <Type Name="EmbeddedFont" Kind="Class" />
      <Type Name="Entry" Kind="Class" />
      <Type Name="EntryCell" Kind="Class" />
      <Type Name="EventTrigger" Kind="Class" />
      <Type Name="ExportEffectAttribute" Kind="Class" />
      <Type Name="ExportFontAttribute" Kind="Class" />
      <Type Name="FileImageSource" Kind="Class" />
      <Type Name="FileImageSourceConverter" Kind="Class" />
      <Type Name="FlexAlignContent" Kind="Enumeration" />
      <Type Name="FlexAlignContentTypeConverter" Kind="Class" />
      <Type Name="FlexAlignItems" Kind="Enumeration" />
      <Type Name="FlexAlignItemsTypeConverter" Kind="Class" />
      <Type Name="FlexAlignSelf" Kind="Enumeration" />
      <Type Name="FlexAlignSelfTypeConverter" Kind="Class" />
      <Type Name="FlexBasis" Kind="Structure" />
      <Type Name="FlexBasis+FlexBasisTypeConverter" Kind="Class" />
      <Type Name="FlexDirection" Kind="Enumeration" />
      <Type Name="FlexDirectionTypeConverter" Kind="Class" />
      <Type Name="FlexJustify" Kind="Enumeration" />
      <Type Name="FlexJustifyTypeConverter" Kind="Class" />
      <Type Name="FlexLayout" Kind="Class" />
      <Type Name="FlexPosition" Kind="Enumeration" />
      <Type Name="FlexWrap" Kind="Enumeration" />
      <Type Name="FlexWrapTypeConverter" Kind="Class" />
      <Type Name="FlowDirection" Kind="Enumeration" />
      <Type Name="FlowDirectionConverter" Kind="Class" />
      <Type Name="FlyoutBehavior" Kind="Enumeration" />
      <Type Name="FlyoutDisplayOptions" Kind="Enumeration" />
      <Type Name="FlyoutHeaderBehavior" Kind="Enumeration" />
      <Type Name="FlyoutItem" Kind="Class" />
      <Type Name="FlyoutLayoutBehavior" Kind="Enumeration" />
      <Type Name="FlyoutPage" Kind="Class" />
      <Type Name="FocusEventArgs" Kind="Class" />
      <Type Name="Font" Kind="Structure" />
      <Type Name="FontAttributes" Kind="Enumeration" />
      <Type Name="FontAttributesConverter" Kind="Class" />
      <Type Name="FontFile" Kind="Class" />
      <Type Name="FontImageSource" Kind="Class" />
      <Type Name="FontSizeConverter" Kind="Class" />
      <Type Name="FontTypeConverter" Kind="Class" />
      <Type Name="FormattedString" Kind="Class" />
      <Type Name="Frame" Kind="Class" />
      <Type Name="GestureElement" Kind="Class" />
      <Type Name="GestureRecognizer" Kind="Class" />
      <Type Name="GestureState" Kind="Enumeration" />
      <Type Name="GestureStatus" Kind="Enumeration" />
      <Type Name="GradientBrush" Kind="Class" />
      <Type Name="GradientStop" Kind="Class" />
      <Type Name="GradientStopCollection" Kind="Class" />
      <Type Name="Grid" Kind="Class" />
      <Type Name="Grid+IGridList`1" DisplayName="Grid+IGridList&lt;T&gt;" Kind="Interface" />
      <Type Name="GridItemsLayout" Kind="Class" />
      <Type Name="GridLength" Kind="Structure" />
      <Type Name="GridLengthTypeConverter" Kind="Class" />
      <Type Name="GridUnitType" Kind="Enumeration" />
      <Type Name="GroupableItemsView" Kind="Class" />
      <Type Name="HandlerAttribute" Kind="Class" />
      <Type Name="HtmlWebViewSource" Kind="Class" />
      <Type Name="IAnimatable" Kind="Interface" />
      <Type Name="IAppearanceObserver" Kind="Interface" />
      <Type Name="IAppIndexingProvider" Kind="Interface" />
      <Type Name="IApplicationController" Kind="Interface" />
      <Type Name="IAppLinkEntry" Kind="Interface" />
      <Type Name="IAppLinks" Kind="Interface" />
      <Type Name="IBorderElement" Kind="Interface" />
      <Type Name="IButtonController" Kind="Interface" />
      <Type Name="ICellController" Kind="Interface" />
      <Type Name="IConfigElement`1" DisplayName="IConfigElement&lt;T&gt;" Kind="Interface" />
      <Type Name="IConfigPlatform" Kind="Interface" />
      <Type Name="IDecorableTextElement" Kind="Interface" />
      <Type Name="IDefinition" Kind="Interface" />
      <Type Name="IDispatcher" Kind="Interface" />
      <Type Name="IDispatcherProvider" Kind="Interface" />
      <Type Name="IEditorController" Kind="Interface" />
      <Type Name="IEffectControlProvider" Kind="Interface" />
      <Type Name="IElementConfiguration`1" DisplayName="IElementConfiguration&lt;TElement&gt;" Kind="Interface" />
      <Type Name="IElementController" Kind="Interface" />
      <Type Name="IEmbeddedFontLoader" Kind="Interface" />
      <Type Name="IEntryCellController" Kind="Interface" />
      <Type Name="IEntryController" Kind="Interface" />
      <Type Name="IExtendedTypeConverter" Kind="Interface" />
      <Type Name="IFlyoutBehaviorObserver" Kind="Interface" />
      <Type Name="IFlyoutPageController" Kind="Interface" />
      <Type Name="IGestureRecognizer" Kind="Interface" />
      <Type Name="IGestureRecognizers" Kind="Interface" />
      <Type Name="IGridController" Kind="Interface" />
      <Type Name="IImageController" Kind="Interface" />
      <Type Name="IImageElement" Kind="Interface" />
      <Type Name="IItemsLayout" Kind="Interface" />
      <Type Name="IItemsView`1" DisplayName="IItemsView&lt;T&gt;" Kind="Interface" />
      <Type Name="IItemViewController" Kind="Interface" />
      <Type Name="ILayout" Kind="Interface" />
      <Type Name="ILayoutController" Kind="Interface" />
      <Type Name="IListProxy" Kind="Interface" />
      <Type Name="IListViewController" Kind="Interface" />
      <Type Name="Image" Kind="Class" />
      <Type Name="ImageButton" Kind="Class" />
      <Type Name="ImageCell" Kind="Class" />
      <Type Name="ImageSource" Kind="Class" />
      <Type Name="ImageSourceConverter" Kind="Class" />
      <Type Name="IMasterDetailPageController" Kind="Interface" />
      <Type Name="IMenuItemController" Kind="Interface" />
      <Type Name="IMessagingCenter" Kind="Interface" />
      <Type Name="IMultiPageController`1" DisplayName="IMultiPageController&lt;T&gt;" Kind="Interface" />
      <Type Name="IMultiValueConverter" Kind="Interface" />
      <Type Name="INativeElementView" Kind="Interface" />
      <Type Name="INavigation" Kind="Interface" />
      <Type Name="INavigationPageController" Kind="Interface" />
      <Type Name="IndicatorShape" Kind="Enumeration" />
      <Type Name="IndicatorView" Kind="Class" />
      <Type Name="InitializationFlags" Kind="Enumeration" />
      <Type Name="InputView" Kind="Class" />
      <Type Name="InvalidNavigationException" Kind="Class" />
      <Type Name="IOpenGlViewController" Kind="Interface" />
      <Type Name="IPageContainer`1" DisplayName="IPageContainer&lt;T&gt;" Kind="Interface" />
      <Type Name="IPageController" Kind="Interface" />
      <Type Name="IPanGestureController" Kind="Interface" />
      <Type Name="IPinchGestureController" Kind="Interface" />
      <Type Name="IPlatformElementConfiguration`2" DisplayName="IPlatformElementConfiguration&lt;TPlatform,TElement&gt;" Kind="Interface" />
      <Type Name="IQueryAttributable" Kind="Interface" />
      <Type Name="IRegisterable" Kind="Interface" />
      <Type Name="IScrollViewController" Kind="Interface" />
      <Type Name="ISearchBarController" Kind="Interface" />
      <Type Name="ISearchHandlerController" Kind="Interface" />
      <Type Name="IShellAppearanceElement" Kind="Interface" />
      <Type Name="IShellContentController" Kind="Interface" />
      <Type Name="IShellContentInsetObserver" Kind="Interface" />
      <Type Name="IShellController" Kind="Interface" />
      <Type Name="IShellItemController" Kind="Interface" />
      <Type Name="IShellSectionController" Kind="Interface" />
      <Type Name="ISliderController" Kind="Interface" />
      <Type Name="IStreamImageSource" Kind="Interface" />
      <Type Name="ISwipeGestureController" Kind="Interface" />
      <Type Name="ISwipeItem" Kind="Interface" />
      <Type Name="ISwipeViewController" Kind="Interface" />
      <Type Name="ITableModel" Kind="Interface" />
      <Type Name="ITableViewController" Kind="Interface" />
      <Type Name="ITabStopElement" Kind="Interface" />
      <Type Name="ITemplatedItemsList`1" DisplayName="ITemplatedItemsList&lt;TItem&gt;" Kind="Interface" />
      <Type Name="ITemplatedItemsListScrollToRequestedEventArgs" Kind="Interface" />
      <Type Name="ITemplatedItemsView`1" DisplayName="ITemplatedItemsView&lt;TItem&gt;" Kind="Interface" />
      <Type Name="ItemSizingStrategy" Kind="Enumeration" />
      <Type Name="ItemsLayout" Kind="Class" />
      <Type Name="ItemsLayoutOrientation" Kind="Enumeration" />
      <Type Name="ItemsLayoutTypeConverter" Kind="Class" />
      <Type Name="ItemsUpdatingScrollMode" Kind="Enumeration" />
      <Type Name="ItemsView" Kind="Class" />
      <Type Name="ItemsView`1" DisplayName="ItemsView&lt;TVisual&gt;" Kind="Class" />
      <Type Name="ItemsViewScrolledEventArgs" Kind="Class" />
      <Type Name="ItemTappedEventArgs" Kind="Class" />
      <Type Name="ItemVisibilityEventArgs" Kind="Class" />
      <Type Name="IValueConverter" Kind="Interface" />
      <Type Name="IViewContainer`1" DisplayName="IViewContainer&lt;T&gt;" Kind="Interface" />
      <Type Name="IViewController" Kind="Interface" />
      <Type Name="IVisual" Kind="Interface" />
      <Type Name="IVisualElementController" Kind="Interface" />
      <Type Name="IWebViewController" Kind="Interface" />
      <Type Name="IWebViewDelegate" Kind="Interface" />
      <Type Name="Keyboard" Kind="Class" />
      <Type Name="KeyboardFlags" Kind="Enumeration" />
      <Type Name="KeyboardTypeConverter" Kind="Class" />
      <Type Name="Label" Kind="Class" />
      <Type Name="Layout" Kind="Class" />
      <Type Name="Layout`1" DisplayName="Layout&lt;T&gt;" Kind="Class" />
      <Type Name="LayoutAlignment" Kind="Enumeration" />
      <Type Name="LayoutOptions" Kind="Structure" />
      <Type Name="LayoutOptionsConverter" Kind="Class" />
      <Type Name="LinearGradientBrush" Kind="Class" />
      <Type Name="LinearItemsLayout" Kind="Class" />
      <Type Name="LineBreakMode" Kind="Enumeration" />
      <Type Name="ListProxyChangedEventArgs" Kind="Class" />
      <Type Name="ListStringTypeConverter" Kind="Class" />
      <Type Name="ListView" Kind="Class" />
      <Type Name="ListViewCachingStrategy" Kind="Enumeration" />
      <Type Name="ListViewSelectionMode" Kind="Enumeration" />
      <Type Name="MarshalingObservableCollection" Kind="Class" />
      <Type Name="MasterBehavior" Kind="Enumeration" />
      <Type Name="MasterDetailPage" Kind="Class" />
      <Type Name="MeasureFlags" Kind="Enumeration" />
      <Type Name="Menu" Kind="Class" />
      <Type Name="MenuItem" Kind="Class" />
      <Type Name="MenuItemCollection" Kind="Class" />
      <Type Name="MessagingCenter" Kind="Class" />
      <Type Name="ModalEventArgs" Kind="Class" />
      <Type Name="ModalPoppedEventArgs" Kind="Class" />
      <Type Name="ModalPoppingEventArgs" Kind="Class" />
      <Type Name="ModalPushedEventArgs" Kind="Class" />
      <Type Name="ModalPushingEventArgs" Kind="Class" />
      <Type Name="MultiBinding" Kind="Class" />
      <Type Name="MultiPage`1" DisplayName="MultiPage&lt;T&gt;" Kind="Class" />
      <Type Name="MultiTrigger" Kind="Class" />
      <Type Name="NamedPlatformColor" Kind="Class" />
      <Type Name="NamedSize" Kind="Enumeration" />
      <Type Name="NameScopeExtensions" Kind="Class" />
      <Type Name="NavigableElement" Kind="Class" />
      <Type Name="NavigationEventArgs" Kind="Class" />
      <Type Name="NavigationPage" Kind="Class" />
      <Type Name="On" Kind="Class" />
      <Type Name="OnIdiom`1" DisplayName="OnIdiom&lt;T&gt;" Kind="Class" />
      <Type Name="OnPlatform`1" DisplayName="OnPlatform&lt;T&gt;" Kind="Class" />
      <Type Name="OpenGLView" Kind="Class" />
      <Type Name="OpenSwipeEventArgs" Kind="Class" />
      <Type Name="OpenSwipeItem" Kind="Enumeration" />
      <Type Name="OrientationStateTrigger" Kind="Class" />
      <Type Name="OSAppTheme" Kind="Enumeration" />
      <Type Name="Page" Kind="Class" />
      <Type Name="PanGestureRecognizer" Kind="Class" />
      <Type Name="PanUpdatedEventArgs" Kind="Class" />
      <Type Name="Picker" Kind="Class" />
      <Type Name="PinchGestureRecognizer" Kind="Class" />
      <Type Name="PinchGestureUpdatedEventArgs" Kind="Class" />
      <Type Name="PlatformEffect`2" DisplayName="PlatformEffect&lt;TContainer,TControl&gt;" Kind="Class" />
      <Type Name="Point" Kind="Structure" />
      <Type Name="PointTypeConverter" Kind="Class" />
      <Type Name="PoppedToRootEventArgs" Kind="Class" />
      <Type Name="PositionChangedEventArgs" Kind="Class" />
      <Type Name="PresentationMode" Kind="Enumeration" />
      <Type Name="ProgressBar" Kind="Class" />
      <Type Name="PropertyChangingEventArgs" Kind="Class" />
      <Type Name="PropertyChangingEventHandler" Kind="Delegate" />
      <Type Name="PropertyCondition" Kind="Class" />
      <Type Name="QueryPropertyAttribute" Kind="Class" />
      <Type Name="RadialGradientBrush" Kind="Class" />
      <Type Name="RadioButton" Kind="Class" />
      <Type Name="RadioButtonGroup" Kind="Class" />
      <Type Name="Rect" Kind="Structure" />
      <Type Name="Rectangle" Kind="Structure" />
      <Type Name="RectangleTypeConverter" Kind="Class" />
      <Type Name="RectTypeConverter" Kind="Class" />
      <Type Name="ReferenceTypeConverter" Kind="Class" />
      <Type Name="RefreshView" Kind="Class" />
      <Type Name="Region" Kind="Structure" />
      <Type Name="RelativeBindingSource" Kind="Class" />
      <Type Name="RelativeBindingSourceMode" Kind="Enumeration" />
      <Type Name="RelativeLayout" Kind="Class" />
      <Type Name="RelativeLayout+IRelativeList`1" DisplayName="RelativeLayout+IRelativeList&lt;T&gt;" Kind="Interface" />
      <Type Name="RenderWithAttribute" Kind="Class" />
      <Type Name="ResolutionGroupNameAttribute" Kind="Class" />
      <Type Name="ResourceDictionary" Kind="Class" />
      <Type Name="ResourceDictionary+RDSourceTypeConverter" Kind="Class" />
      <Type Name="ReturnType" Kind="Enumeration" />
      <Type Name="RouteFactory" Kind="Class" />
      <Type Name="Routing" Kind="Class" />
      <Type Name="RoutingEffect" Kind="Class" />
      <Type Name="RowDefinition" Kind="Class" />
      <Type Name="RowDefinitionCollection" Kind="Class" />
      <Type Name="RowDefinitionCollectionTypeConverter" Kind="Class" />
      <Type Name="ScrollBarVisibility" Kind="Enumeration" />
      <Type Name="ScrolledEventArgs" Kind="Class" />
      <Type Name="ScrollMode" Kind="Enumeration" />
      <Type Name="ScrollOrientation" Kind="Enumeration" />
      <Type Name="ScrollToMode" Kind="Enumeration" />
      <Type Name="ScrollToPosition" Kind="Enumeration" />
      <Type Name="ScrollToRequestedEventArgs" Kind="Class" />
      <Type Name="ScrollToRequestEventArgs" Kind="Class" />
      <Type Name="ScrollView" Kind="Class" />
      <Type Name="SearchBar" Kind="Class" />
      <Type Name="SearchBoxVisibility" Kind="Enumeration" />
      <Type Name="SearchHandler" Kind="Class" />
      <Type Name="SelectableItemsView" Kind="Class" />
      <Type Name="SelectedItemChangedEventArgs" Kind="Class" />
      <Type Name="SelectedPositionChangedEventArgs" Kind="Class" />
      <Type Name="SelectionChangedEventArgs" Kind="Class" />
      <Type Name="SelectionMode" Kind="Enumeration" />
      <Type Name="SeparatorVisibility" Kind="Enumeration" />
      <Type Name="Setter" Kind="Class" />
      <Type Name="SettersExtensions" Kind="Class" />
      <Type Name="Shell" Kind="Class" />
      <Type Name="ShellAppearance" Kind="Class" />
      <Type Name="ShellContent" Kind="Class" />
      <Type Name="ShellGroupItem" Kind="Class" />
      <Type Name="ShellItem" Kind="Class" />
      <Type Name="ShellNavigatedEventArgs" Kind="Class" />
      <Type Name="ShellNavigatingDeferral" Kind="Class" />
      <Type Name="ShellNavigatingEventArgs" Kind="Class" />
      <Type Name="ShellNavigationSource" Kind="Enumeration" />
      <Type Name="ShellNavigationState" Kind="Class" />
      <Type Name="ShellSection" Kind="Class" />
      <Type Name="Size" Kind="Structure" />
      <Type Name="SizeRequest" Kind="Structure" />
      <Type Name="SizeTypeConverter" Kind="Class" />
      <Type Name="Slider" Kind="Class" />
      <Type Name="SnapPointsAlignment" Kind="Enumeration" />
      <Type Name="SnapPointsType" Kind="Enumeration" />
      <Type Name="SolidColorBrush" Kind="Class" />
      <Type Name="Span" Kind="Class" />
      <Type Name="StackLayout" Kind="Class" />
      <Type Name="StackOrientation" Kind="Enumeration" />
      <Type Name="StateTrigger" Kind="Class" />
      <Type Name="StateTriggerBase" Kind="Class" />
      <Type Name="Stepper" Kind="Class" />
      <Type Name="StreamImageSource" Kind="Class" />
      <Type Name="Stretch" Kind="Enumeration" />
      <Type Name="StructuredItemsView" Kind="Class" />
      <Type Name="Style" Kind="Class" />
      <Type Name="SweepDirection" Kind="Enumeration" />
      <Type Name="SwipeBehaviorOnInvoked" Kind="Enumeration" />
      <Type Name="SwipeChangingEventArgs" Kind="Class" />
      <Type Name="SwipedEventArgs" Kind="Class" />
      <Type Name="SwipeDirection" Kind="Enumeration" />
      <Type Name="SwipeEndedEventArgs" Kind="Class" />
      <Type Name="SwipeGestureRecognizer" Kind="Class" />
      <Type Name="SwipeItem" Kind="Class" />
      <Type Name="SwipeItems" Kind="Class" />
      <Type Name="SwipeItemView" Kind="Class" />
      <Type Name="SwipeMode" Kind="Enumeration" />
      <Type Name="SwipeStartedEventArgs" Kind="Class" />
      <Type Name="SwipeView" Kind="Class" />
      <Type Name="Switch" Kind="Class" />
      <Type Name="SwitchCell" Kind="Class" />
      <Type Name="Tab" Kind="Class" />
      <Type Name="TabBar" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
      <Type Name="TabIndexExtensions" Kind="Class" />
      <Type Name="TableIntent" Kind="Enumeration" />
      <Type Name="TableRoot" Kind="Class" />
      <Type Name="TableSection" Kind="Class" />
      <Type Name="TableSectionBase" Kind="Class" />
      <Type Name="TableSectionBase`1" DisplayName="TableSectionBase&lt;T&gt;" Kind="Class" />
      <Type Name="TableView" Kind="Class" />
      <Type Name="TabsStyle" Kind="Enumeration" />
      <Type Name="TapGestureRecognizer" Kind="Class" />
      <Type Name="TappedEventArgs" Kind="Class" />
      <Type Name="TargetIdiom" Kind="Enumeration" />
      <Type Name="TargetPlatform" Kind="Enumeration" />
      <Type Name="TemplateBinding" Kind="Class" />
      <Type Name="TemplatedPage" Kind="Class" />
      <Type Name="TemplatedView" Kind="Class" />
      <Type Name="TemplateExtensions" Kind="Class" />
      <Type Name="TextAlignment" Kind="Enumeration" />
      <Type Name="TextAlignmentConverter" Kind="Class" />
      <Type Name="TextCell" Kind="Class" />
      <Type Name="TextChangedEventArgs" Kind="Class" />
      <Type Name="TextDecorationConverter" Kind="Class" />
      <Type Name="TextDecorations" Kind="Enumeration" />
      <Type Name="TextTransform" Kind="Enumeration" />
      <Type Name="TextType" Kind="Enumeration" />
      <Type Name="Thickness" Kind="Structure" />
      <Type Name="ThicknessTypeConverter" Kind="Class" />
      <Type Name="TimePicker" Kind="Class" />
      <Type Name="ToggledEventArgs" Kind="Class" />
      <Type Name="ToolbarItem" Kind="Class" />
      <Type Name="ToolbarItemOrder" Kind="Enumeration" />
      <Type Name="Trigger" Kind="Class" />
      <Type Name="TriggerAction" Kind="Class" />
      <Type Name="TriggerAction`1" DisplayName="TriggerAction&lt;T&gt;" Kind="Class" />
      <Type Name="TriggerBase" Kind="Class" />
      <Type Name="TypeConverter" Kind="Class" />
      <Type Name="TypeConverterAttribute" Kind="Class" />
      <Type Name="TypeTypeConverter" Kind="Class" />
      <Type Name="UnsolvableConstraintsException" Kind="Class" />
      <Type Name="UriImageSource" Kind="Class" />
      <Type Name="UriTypeConverter" Kind="Class" />
      <Type Name="UrlWebViewSource" Kind="Class" />
      <Type Name="ValueChangedEventArgs" Kind="Class" />
      <Type Name="Vec2" Kind="Structure" />
      <Type Name="View" Kind="Class" />
      <Type Name="ViewCell" Kind="Class" />
      <Type Name="ViewExtensions" Kind="Class" />
      <Type Name="ViewState" Kind="Enumeration" />
      <Type Name="VisualAttribute" Kind="Class" />
      <Type Name="VisualElement" Kind="Class" />
      <Type Name="VisualElement+FocusRequestArgs" Kind="Class" />
      <Type Name="VisualElement+VisibilityConverter" Kind="Class" />
      <Type Name="VisualMarker" Kind="Class" />
      <Type Name="VisualMarker+DefaultVisual" Kind="Class" />
      <Type Name="VisualMarker+MaterialVisual" Kind="Class" />
      <Type Name="VisualState" Kind="Class" />
      <Type Name="VisualStateGroup" Kind="Class" />
      <Type Name="VisualStateGroupList" Kind="Class" />
      <Type Name="VisualStateManager" Kind="Class" />
      <Type Name="VisualStateManager+CommonStates" Kind="Class" />
      <Type Name="VisualTypeConverter" Kind="Class" />
      <Type Name="WeakEventManager" Kind="Class" />
      <Type Name="WebNavigatedEventArgs" Kind="Class" />
      <Type Name="WebNavigatingEventArgs" Kind="Class" />
      <Type Name="WebNavigationEvent" Kind="Enumeration" />
      <Type Name="WebNavigationEventArgs" Kind="Class" />
      <Type Name="WebNavigationResult" Kind="Enumeration" />
      <Type Name="WebView" Kind="Class" />
      <Type Name="WebViewSource" Kind="Class" />
      <Type Name="WebViewSourceTypeConverter" Kind="Class" />
      <Type Name="XmlnsDefinitionAttribute" Kind="Class" />
      <Type Name="XmlnsPrefixAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Core">
    </Namespace>
    <Namespace Name="Xamarin.Forms.DualScreen">
      <Type Name="DualScreenInfo" Kind="Class" />
      <Type Name="HingeAngleChangedEventArgs" Kind="Class" />
      <Type Name="SpanModeStateTrigger" Kind="Class" />
      <Type Name="TwoPaneView" Kind="Class" />
      <Type Name="TwoPaneViewMode" Kind="Enumeration" />
      <Type Name="TwoPaneViewPriority" Kind="Enumeration" />
      <Type Name="TwoPaneViewTallModeConfiguration" Kind="Enumeration" />
      <Type Name="TwoPaneViewWideModeConfiguration" Kind="Enumeration" />
      <Type Name="WindowSpanModeStateTrigger" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Internals">
      <Type Name="ActionSheetArguments" Kind="Class" />
      <Type Name="AlertArguments" Kind="Class" />
      <Type Name="AsyncValue`1" DisplayName="AsyncValue&lt;T&gt;" Kind="Class" />
      <Type Name="AsyncValueExtensions" Kind="Class" />
      <Type Name="CellExtensions" Kind="Class" />
      <Type Name="ContentPageEx" Kind="Class" />
      <Type Name="CustomKeyboard" Kind="Class" />
      <Type Name="DataTemplateExtensions" Kind="Class" />
      <Type Name="DelegateLogListener" Kind="Class" />
      <Type Name="DependencyResolver" Kind="Class" />
      <Type Name="DeviceInfo" Kind="Class" />
      <Type Name="DeviceOrientation" Kind="Enumeration" />
      <Type Name="DeviceOrientationExtensions" Kind="Class" />
      <Type Name="DynamicResource" Kind="Class" />
      <Type Name="EffectUtilities" Kind="Class" />
      <Type Name="EnumerableExtensions" Kind="Class" />
      <Type Name="EvalRequested" Kind="Class" />
      <Type Name="EvaluateJavaScriptDelegate" Kind="Delegate" />
      <Type Name="EventArg`1" DisplayName="EventArg&lt;T&gt;" Kind="Class" />
      <Type Name="ExpressionSearch" Kind="Class" />
      <Type Name="FontRegistrar" Kind="Class" />
      <Type Name="GIFBitmap" Kind="Class" />
      <Type Name="GIFBitmap+DisposeMethod" Kind="Enumeration" />
      <Type Name="GIFBitmap+Rect" Kind="Class" />
      <Type Name="GIFBitmapDecoder" Kind="Class" />
      <Type Name="GIFColorTable" Kind="Class" />
      <Type Name="GIFDecoderFormatException" Kind="Class" />
      <Type Name="GIFDecoderStreamReader" Kind="Class" />
      <Type Name="GIFHeader" Kind="Class" />
      <Type Name="GIFImageParser" Kind="Class" />
      <Type Name="IDataTemplate" Kind="Interface" />
      <Type Name="IDataTemplateController" Kind="Interface" />
      <Type Name="IDeserializer" Kind="Interface" />
      <Type Name="IDynamicResourceHandler" Kind="Interface" />
      <Type Name="IExpressionSearch" Kind="Interface" />
      <Type Name="IFontElement" Kind="Interface" />
      <Type Name="IGestureController" Kind="Interface" />
      <Type Name="IIsolatedStorageFile" Kind="Interface" />
      <Type Name="INameScope" Kind="Interface" />
      <Type Name="INavigationProxy" Kind="Interface" />
      <Type Name="InvalidationTrigger" Kind="Enumeration" />
      <Type Name="IPerformanceProvider" Kind="Interface" />
      <Type Name="IPlatform" Kind="Interface" />
      <Type Name="IPlatformInvalidate" Kind="Interface" />
      <Type Name="IPlatformServices" Kind="Interface" />
      <Type Name="IResourceDictionary" Kind="Interface" />
      <Type Name="ISpatialElement" Kind="Interface" />
      <Type Name="ISystemResourcesProvider" Kind="Interface" />
      <Type Name="LockableObservableListWrapper" Kind="Class" />
      <Type Name="Log" Kind="Class" />
      <Type Name="LogListener" Kind="Class" />
      <Type Name="NameScope" Kind="Class" />
      <Type Name="NativeBindingHelpers" Kind="Class" />
      <Type Name="NavigationModel" Kind="Class" />
      <Type Name="NavigationProxy" Kind="Class" />
      <Type Name="NavigationRequestedEventArgs" Kind="Class" />
      <Type Name="NavigationRequestType" Kind="Enumeration" />
      <Type Name="NotifyCollectionChangedEventArgsEx" Kind="Class" />
      <Type Name="NotifyCollectionChangedEventArgsExtensions" Kind="Class" />
      <Type Name="NumericExtensions" Kind="Class" />
      <Type Name="PageExtensions" Kind="Class" />
      <Type Name="Performance" Kind="Class" />
      <Type Name="PreserveAttribute" Kind="Class" />
      <Type Name="Profile" Kind="Structure" />
      <Type Name="Profile+Datum" Kind="Structure" />
      <Type Name="ProfileDatum" Kind="Class" />
      <Type Name="PromptArguments" Kind="Class" />
      <Type Name="PropertyPropagationExtensions" Kind="Class" />
      <Type Name="ReflectionExtensions" Kind="Class" />
      <Type Name="Registrar" Kind="Class" />
      <Type Name="Registrar`1" DisplayName="Registrar&lt;TRegistrable&gt;" Kind="Class" />
      <Type Name="ResourceLoader" Kind="Class" />
      <Type Name="ResourceLoader+ResourceLoadingQuery" Kind="Class" />
      <Type Name="ResourceLoader+ResourceLoadingResponse" Kind="Class" />
      <Type Name="ResourcesChangedEventArgs" Kind="Class" />
      <Type Name="SetValueFlags" Kind="Enumeration" />
      <Type Name="SwipeDirectionHelper" Kind="Class" />
      <Type Name="TableModel" Kind="Class" />
      <Type Name="TemplatedItemsList`2" DisplayName="TemplatedItemsList&lt;TView,TItem&gt;" Kind="Class" />
      <Type Name="TextTransformUtilites" Kind="Class" />
      <Type Name="Ticker" Kind="Class" />
      <Type Name="ToolbarTracker" Kind="Class" />
      <Type Name="TypedBinding`2" DisplayName="TypedBinding&lt;TSource,TProperty&gt;" Kind="Class" />
      <Type Name="TypedBindingBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Maps">
      <Type Name="Circle" Kind="Class" />
      <Type Name="Distance" Kind="Structure" />
      <Type Name="Geocoder" Kind="Class" />
      <Type Name="GeographyUtils" Kind="Class" />
      <Type Name="Map" Kind="Class" />
      <Type Name="MapClickedEventArgs" Kind="Class" />
      <Type Name="MapElement" Kind="Class" />
      <Type Name="MapSpan" Kind="Class" />
      <Type Name="MapType" Kind="Enumeration" />
      <Type Name="Pin" Kind="Class" />
      <Type Name="PinClickedEventArgs" Kind="Class" />
      <Type Name="PinType" Kind="Enumeration" />
      <Type Name="Polygon" Kind="Class" />
      <Type Name="Polyline" Kind="Class" />
      <Type Name="Position" Kind="Structure" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Markup">
      <Type Name="BindableObjectExtensions" Kind="Class" />
      <Type Name="DefaultBindableProperties" Kind="Class" />
      <Type Name="ElementExtensions" Kind="Class" />
      <Type Name="ElementGesturesExtensions" Kind="Class" />
      <Type Name="FuncConverter" Kind="Class" />
      <Type Name="FuncConverter`1" DisplayName="FuncConverter&lt;TSource&gt;" Kind="Class" />
      <Type Name="FuncConverter`2" DisplayName="FuncConverter&lt;TSource,TDest&gt;" Kind="Class" />
      <Type Name="FuncConverter`3" DisplayName="FuncConverter&lt;TSource,TDest,TParam&gt;" Kind="Class" />
      <Type Name="GridRowsColumns" Kind="Class" />
      <Type Name="GridRowsColumns+Columns" Kind="Class" />
      <Type Name="GridRowsColumns+Rows" Kind="Class" />
      <Type Name="LabelExtensions" Kind="Class" />
      <Type Name="LayoutExtensions" Kind="Class" />
      <Type Name="NotConverter" Kind="Class" />
      <Type Name="Style`1" DisplayName="Style&lt;T&gt;" Kind="Class" />
      <Type Name="ToStringConverter" Kind="Class" />
      <Type Name="ViewExtensions" Kind="Class" />
      <Type Name="ViewInFlexLayoutExtensions" Kind="Class" />
      <Type Name="ViewInGridExtensions" Kind="Class" />
      <Type Name="VisualElementExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Markup.LeftToRight">
      <Type Name="LabelExtensions" Kind="Class" />
      <Type Name="ViewExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Markup.RightToLeft">
      <Type Name="LabelExtensions" Kind="Class" />
      <Type Name="ViewExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Pages">
    </Namespace>
    <Namespace Name="Xamarin.Forms.Pages.Azure">
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration">
      <Type Name="Android" Kind="Class" />
      <Type Name="GTK" Kind="Class" />
      <Type Name="iOS" Kind="Class" />
      <Type Name="macOS" Kind="Class" />
      <Type Name="Tizen" Kind="Class" />
      <Type Name="Windows" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.AndroidSpecific">
      <Type Name="Application" Kind="Class" />
      <Type Name="Button" Kind="Class" />
      <Type Name="Entry" Kind="Class" />
      <Type Name="ImageButton" Kind="Class" />
      <Type Name="ImeFlags" Kind="Enumeration" />
      <Type Name="ListView" Kind="Class" />
      <Type Name="MixedContentHandling" Kind="Enumeration" />
      <Type Name="ShellItem" Kind="Class" />
      <Type Name="SwipeTransitionMode" Kind="Enumeration" />
      <Type Name="SwipeView" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
      <Type Name="ToolbarPlacement" Kind="Enumeration" />
      <Type Name="ViewCell" Kind="Class" />
      <Type Name="VisualElement" Kind="Class" />
      <Type Name="WebView" Kind="Class" />
      <Type Name="WindowSoftInputModeAdjust" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat">
      <Type Name="Application" Kind="Class" />
      <Type Name="NavigationPage" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.GTKSpecific">
      <Type Name="BoxView" Kind="Class" />
      <Type Name="NavigationPage" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
      <Type Name="TabPosition" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.iOSSpecific">
      <Type Name="Application" Kind="Class" />
      <Type Name="BlurEffectStyle" Kind="Enumeration" />
      <Type Name="Cell" Kind="Class" />
      <Type Name="DatePicker" Kind="Class" />
      <Type Name="Entry" Kind="Class" />
      <Type Name="FlyoutPage" Kind="Class" />
      <Type Name="GroupHeaderStyle" Kind="Enumeration" />
      <Type Name="LargeTitleDisplayMode" Kind="Enumeration" />
      <Type Name="ListView" Kind="Class" />
      <Type Name="MasterDetailPage" Kind="Class" />
      <Type Name="NavigationPage" Kind="Class" />
      <Type Name="Page" Kind="Class" />
      <Type Name="Picker" Kind="Class" />
      <Type Name="ScrollView" Kind="Class" />
      <Type Name="SearchBar" Kind="Class" />
      <Type Name="SeparatorStyle" Kind="Enumeration" />
      <Type Name="Slider" Kind="Class" />
      <Type Name="StatusBarHiddenMode" Kind="Enumeration" />
      <Type Name="StatusBarTextColorMode" Kind="Enumeration" />
      <Type Name="SwipeTransitionMode" Kind="Enumeration" />
      <Type Name="SwipeView" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
      <Type Name="TimePicker" Kind="Class" />
      <Type Name="TranslucencyMode" Kind="Enumeration" />
      <Type Name="UIModalPresentationStyle" Kind="Enumeration" />
      <Type Name="UISearchBarStyle" Kind="Enumeration" />
      <Type Name="UIStatusBarAnimation" Kind="Enumeration" />
      <Type Name="UpdateMode" Kind="Enumeration" />
      <Type Name="VisualElement" Kind="Class" />
      <Type Name="VisualElement+ShadowEffect" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.macOSSpecific">
      <Type Name="NavigationPage" Kind="Class" />
      <Type Name="NavigationTransitionStyle" Kind="Enumeration" />
      <Type Name="Page" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.TizenSpecific">
      <Type Name="Application" Kind="Class" />
      <Type Name="ButtonStyle" Kind="Class" />
      <Type Name="Entry" Kind="Class" />
      <Type Name="FocusDirection" Kind="Class" />
      <Type Name="FontWeight" Kind="Class" />
      <Type Name="Image" Kind="Class" />
      <Type Name="Label" Kind="Class" />
      <Type Name="NavigationPage" Kind="Class" />
      <Type Name="Page" Kind="Class" />
      <Type Name="ProgressBar" Kind="Class" />
      <Type Name="ProgressBarStyle" Kind="Class" />
      <Type Name="Switch" Kind="Class" />
      <Type Name="SwitchStyle" Kind="Class" />
      <Type Name="TabbedPageStyle" Kind="Class" />
      <Type Name="VisualElement" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.PlatformConfiguration.WindowsSpecific">
      <Type Name="Application" Kind="Class" />
      <Type Name="CollapseStyle" Kind="Enumeration" />
      <Type Name="FlyoutPage" Kind="Class" />
      <Type Name="InputView" Kind="Class" />
      <Type Name="Label" Kind="Class" />
      <Type Name="ListView" Kind="Class" />
      <Type Name="ListViewSelectionMode" Kind="Enumeration" />
      <Type Name="MasterDetailPage" Kind="Class" />
      <Type Name="Page" Kind="Class" />
      <Type Name="RefreshView" Kind="Class" />
      <Type Name="RefreshView+RefreshPullDirection" Kind="Enumeration" />
      <Type Name="SearchBar" Kind="Class" />
      <Type Name="TabbedPage" Kind="Class" />
      <Type Name="ToolbarPlacement" Kind="Enumeration" />
      <Type Name="VisualElement" Kind="Class" />
      <Type Name="WebView" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Shapes">
      <Type Name="ArcSegment" Kind="Class" />
      <Type Name="BezierSegment" Kind="Class" />
      <Type Name="CompositeTransform" Kind="Class" />
      <Type Name="Ellipse" Kind="Class" />
      <Type Name="EllipseGeometry" Kind="Class" />
      <Type Name="FillRule" Kind="Enumeration" />
      <Type Name="Geometry" Kind="Class" />
      <Type Name="GeometryCollection" Kind="Class" />
      <Type Name="GeometryGroup" Kind="Class" />
      <Type Name="GeometryHelper" Kind="Class" />
      <Type Name="Line" Kind="Class" />
      <Type Name="LineGeometry" Kind="Class" />
      <Type Name="LineSegment" Kind="Class" />
      <Type Name="Matrix" Kind="Structure" />
      <Type Name="MatrixTransform" Kind="Class" />
      <Type Name="MatrixTypeConverter" Kind="Class" />
      <Type Name="Path" Kind="Class" />
      <Type Name="PathFigure" Kind="Class" />
      <Type Name="PathFigureCollection" Kind="Class" />
      <Type Name="PathFigureCollectionConverter" Kind="Class" />
      <Type Name="PathGeometry" Kind="Class" />
      <Type Name="PathGeometryConverter" Kind="Class" />
      <Type Name="PathSegment" Kind="Class" />
      <Type Name="PathSegmentCollection" Kind="Class" />
      <Type Name="PenLineCap" Kind="Enumeration" />
      <Type Name="PenLineJoin" Kind="Enumeration" />
      <Type Name="PointCollection" Kind="Class" />
      <Type Name="PointCollectionConverter" Kind="Class" />
      <Type Name="PolyBezierSegment" Kind="Class" />
      <Type Name="Polygon" Kind="Class" />
      <Type Name="Polyline" Kind="Class" />
      <Type Name="PolyLineSegment" Kind="Class" />
      <Type Name="PolyQuadraticBezierSegment" Kind="Class" />
      <Type Name="QuadraticBezierSegment" Kind="Class" />
      <Type Name="Rectangle" Kind="Class" />
      <Type Name="RectangleGeometry" Kind="Class" />
      <Type Name="RotateTransform" Kind="Class" />
      <Type Name="RoundRectangleGeometry" Kind="Class" />
      <Type Name="ScaleTransform" Kind="Class" />
      <Type Name="Shape" Kind="Class" />
      <Type Name="SkewTransform" Kind="Class" />
      <Type Name="Transform" Kind="Class" />
      <Type Name="TransformCollection" Kind="Class" />
      <Type Name="TransformGroup" Kind="Class" />
      <Type Name="TransformTypeConverter" Kind="Class" />
      <Type Name="TranslateTransform" Kind="Class" />
      <Type Name="Vector2" Kind="Structure" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.StyleSheets">
      <Type Name="StyleSheet" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Xaml">
      <Type Name="AcceptEmptyServiceProviderAttribute" Kind="Class" />
      <Type Name="AppThemeBindingExtension" Kind="Class" />
      <Type Name="ArrayExtension" Kind="Class" />
      <Type Name="BindingExtension" Kind="Class" />
      <Type Name="DataTemplateExtension" Kind="Class" />
      <Type Name="DynamicResourceExtension" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="FontImageExtension" Kind="Class" />
      <Type Name="IMarkupExtension" Kind="Interface" />
      <Type Name="IMarkupExtension`1" DisplayName="IMarkupExtension&lt;T&gt;" Kind="Interface" />
      <Type Name="IProvideValueTarget" Kind="Interface" />
      <Type Name="IReferenceProvider" Kind="Interface" />
      <Type Name="IRootObjectProvider" Kind="Interface" />
      <Type Name="IServiceProviderExtensions" Kind="Class" />
      <Type Name="IValueProvider" Kind="Interface" />
      <Type Name="IXamlTypeResolver" Kind="Interface" />
      <Type Name="IXmlLineInfoProvider" Kind="Interface" />
      <Type Name="NullExtension" Kind="Class" />
      <Type Name="OnIdiomExtension" Kind="Class" />
      <Type Name="OnPlatformExtension" Kind="Class" />
      <Type Name="ReferenceExtension" Kind="Class" />
      <Type Name="RelativeSourceExtension" Kind="Class" />
      <Type Name="StaticExtension" Kind="Class" />
      <Type Name="StaticResourceExtension" Kind="Class" />
      <Type Name="StyleSheetExtension" Kind="Class" />
      <Type Name="TemplateBindingExtension" Kind="Class" />
      <Type Name="TypeConversionAttribute" Kind="Class" />
      <Type Name="TypeExtension" Kind="Class" />
      <Type Name="XamlCompilationAttribute" Kind="Class" />
      <Type Name="XamlCompilationOptions" Kind="Enumeration" />
      <Type Name="XamlFilePathAttribute" Kind="Class" />
      <Type Name="XamlParseException" Kind="Class" />
      <Type Name="XamlResourceIdAttribute" Kind="Class" />
      <Type Name="XmlLineInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Xaml.Diagnostics">
      <Type Name="BindingBaseErrorEventArgs" Kind="Class" />
      <Type Name="BindingDiagnostics" Kind="Class" />
      <Type Name="BindingErrorEventArgs" Kind="Class" />
      <Type Name="VisualDiagnostics" Kind="Class" />
      <Type Name="VisualTreeChangeEventArgs" Kind="Class" />
      <Type Name="VisualTreeChangeType" Kind="Enumeration" />
      <Type Name="XamlSourceInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Xamarin.Forms.Xaml.Internals">
      <Type Name="INativeBindingService" Kind="Interface" />
      <Type Name="INativeValueConverterService" Kind="Interface" />
      <Type Name="NameScopeProvider" Kind="Class" />
      <Type Name="SimpleValueTargetProvider" Kind="Class" />
      <Type Name="XamlLoader" Kind="Class" />
      <Type Name="XamlServiceProvider" Kind="Class" />
      <Type Name="XamlTypeResolver" Kind="Class" />
      <Type Name="XmlLineInfoProvider" Kind="Class" />
      <Type Name="XmlNamespaceResolver" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="AbortAnimation">
        <MemberSignature Language="C#" Value="public static bool AbortAnimation (this Xamarin.Forms.IAnimatable self, string handle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AbortAnimation(class Xamarin.Forms.IAnimatable self, string handle) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.AbortAnimation(Xamarin.Forms.IAnimatable,System.String)" />
        <MemberSignature Language="F#" Value="static member AbortAnimation : Xamarin.Forms.IAnimatable * string -&gt; bool" Usage="Xamarin.Forms.AnimationExtensions.AbortAnimation (self, handle)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="handle" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="handle">An animation key that must be unique among its sibling and parent animations for the duration of the animation.</param>
          <summary>Stops the animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.AbortAnimation(Xamarin.Forms.IAnimatable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="Animate">
        <MemberSignature Language="C#" Value="public static void Animate (this Xamarin.Forms.IAnimatable self, string name, Action&lt;double&gt; callback, double start, double end, uint rate = 16, uint length = 250, Xamarin.Forms.Easing easing = default, Action&lt;double,bool&gt; finished = default, Func&lt;bool&gt; repeat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Animate(class Xamarin.Forms.IAnimatable self, string name, class System.Action`1&lt;float64&gt; callback, float64 start, float64 end, unsigned int32 rate, unsigned int32 length, class Xamarin.Forms.Easing easing, class System.Action`2&lt;float64, bool&gt; finished, class System.Func`1&lt;bool&gt; repeat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.Double,System.Double,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
        <MemberSignature Language="F#" Value="static member Animate : Xamarin.Forms.IAnimatable * string * Action&lt;double&gt; * double * double * uint32 * uint32 * Xamarin.Forms.Easing * Action&lt;double, bool&gt; * Func&lt;bool&gt; -&gt; unit" Usage="Xamarin.Forms.AnimationExtensions.Animate (self, name, callback, start, end, rate, length, easing, finished, repeat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="callback" Type="System.Action&lt;System.Double&gt;" />
          <Parameter Name="start" Type="System.Double" />
          <Parameter Name="end" Type="System.Double" />
          <Parameter Name="rate" Type="System.UInt32" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
          <Parameter Name="finished" Type="System.Action&lt;System.Double,System.Boolean&gt;" />
          <Parameter Name="repeat" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="name">An animation key that should be unique among its sibling and parent animations for the duration of the animation.</param>
          <param name="callback">An action that is called with successive animation values.</param>
          <param name="start">The fraction into the current animation at which to start the animation.</param>
          <param name="end">The fraction into the current animation at which to stop the animation.</param>
          <param name="rate">The time, in milliseconds, between frames.</param>
          <param name="length">The number of milliseconds over which to interpolate the animation.</param>
          <param name="easing">The easing function to use to transision in, out, or in and out of the animation.</param>
          <param name="finished">An action to call when the animation is finished.</param>
          <param name="repeat">A function that returns true if the animation should continue.</param>
          <summary>Sets the specified parameters and starts the animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.Double,System.Double,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="Animate">
        <MemberSignature Language="C#" Value="public static void Animate (this Xamarin.Forms.IAnimatable self, string name, Action&lt;double&gt; callback, uint rate = 16, uint length = 250, Xamarin.Forms.Easing easing = default, Action&lt;double,bool&gt; finished = default, Func&lt;bool&gt; repeat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Animate(class Xamarin.Forms.IAnimatable self, string name, class System.Action`1&lt;float64&gt; callback, unsigned int32 rate, unsigned int32 length, class Xamarin.Forms.Easing easing, class System.Action`2&lt;float64, bool&gt; finished, class System.Func`1&lt;bool&gt; repeat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
        <MemberSignature Language="F#" Value="static member Animate : Xamarin.Forms.IAnimatable * string * Action&lt;double&gt; * uint32 * uint32 * Xamarin.Forms.Easing * Action&lt;double, bool&gt; * Func&lt;bool&gt; -&gt; unit" Usage="Xamarin.Forms.AnimationExtensions.Animate (self, name, callback, rate, length, easing, finished, repeat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="callback" Type="System.Action&lt;System.Double&gt;" />
          <Parameter Name="rate" Type="System.UInt32" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
          <Parameter Name="finished" Type="System.Action&lt;System.Double,System.Boolean&gt;" />
          <Parameter Name="repeat" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="name">An animation key that should be unique among its sibling and parent animations for the duration of the animation.</param>
          <param name="callback">An action that is called with successive animation values.</param>
          <param name="rate">The time, in milliseconds, between frames.</param>
          <param name="length">The number of milliseconds over which to interpolate the animation.</param>
          <param name="easing">The easing function to use to transision in, out, or in and out of the animation.</param>
          <param name="finished">An action to call when the animation is finished.</param>
          <param name="repeat">A function that returns true if the animation should continue.</param>
          <summary>Sets the specified parameters and starts the animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,System.Action{System.Double},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="Animate">
        <MemberSignature Language="C#" Value="public static void Animate (this Xamarin.Forms.IAnimatable self, string name, Xamarin.Forms.Animation animation, uint rate = 16, uint length = 250, Xamarin.Forms.Easing easing = default, Action&lt;double,bool&gt; finished = default, Func&lt;bool&gt; repeat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Animate(class Xamarin.Forms.IAnimatable self, string name, class Xamarin.Forms.Animation animation, unsigned int32 rate, unsigned int32 length, class Xamarin.Forms.Easing easing, class System.Action`2&lt;float64, bool&gt; finished, class System.Func`1&lt;bool&gt; repeat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,Xamarin.Forms.Animation,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
        <MemberSignature Language="F#" Value="static member Animate : Xamarin.Forms.IAnimatable * string * Xamarin.Forms.Animation * uint32 * uint32 * Xamarin.Forms.Easing * Action&lt;double, bool&gt; * Func&lt;bool&gt; -&gt; unit" Usage="Xamarin.Forms.AnimationExtensions.Animate (self, name, animation, rate, length, easing, finished, repeat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="animation" Type="Xamarin.Forms.Animation" />
          <Parameter Name="rate" Type="System.UInt32" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
          <Parameter Name="finished" Type="System.Action&lt;System.Double,System.Boolean&gt;" />
          <Parameter Name="repeat" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="name">An animation key that should be unique among its sibling and parent animations for the duration of the animation.</param>
          <param name="animation">The animation to run.</param>
          <param name="rate">The time, in milliseconds, between frames.</param>
          <param name="length">The number of milliseconds over which to interpolate the animation.</param>
          <param name="easing">The easing function to use to transision in, out, or in and out of the animation.</param>
          <param name="finished">An action to call when the animation is finished.</param>
          <param name="repeat">A function that returns true if the animation should continue.</param>
          <summary>Sets the specified parameters and starts the animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.Animate(Xamarin.Forms.IAnimatable,System.String,Xamarin.Forms.Animation,System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{System.Double,System.Boolean},System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="Animate&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Animate&lt;T&gt; (this Xamarin.Forms.IAnimatable self, string name, Func&lt;double,T&gt; transform, Action&lt;T&gt; callback, uint rate = 16, uint length = 250, Xamarin.Forms.Easing easing = default, Action&lt;T,bool&gt; finished = default, Func&lt;bool&gt; repeat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Animate&lt;T&gt;(class Xamarin.Forms.IAnimatable self, string name, class System.Func`2&lt;float64, !!T&gt; transform, class System.Action`1&lt;!!T&gt; callback, unsigned int32 rate, unsigned int32 length, class Xamarin.Forms.Easing easing, class System.Action`2&lt;!!T, bool&gt; finished, class System.Func`1&lt;bool&gt; repeat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.Animate``1(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,``0},System.Action{``0},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{``0,System.Boolean},System.Func{System.Boolean})" />
        <MemberSignature Language="F#" Value="static member Animate : Xamarin.Forms.IAnimatable * string * Func&lt;double, 'T&gt; * Action&lt;'T&gt; * uint32 * uint32 * Xamarin.Forms.Easing * Action&lt;'T, bool&gt; * Func&lt;bool&gt; -&gt; unit" Usage="Xamarin.Forms.AnimationExtensions.Animate (self, name, transform, callback, rate, length, easing, finished, repeat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="transform" Type="System.Func&lt;System.Double,T&gt;" />
          <Parameter Name="callback" Type="System.Action&lt;T&gt;" />
          <Parameter Name="rate" Type="System.UInt32" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
          <Parameter Name="finished" Type="System.Action&lt;T,System.Boolean&gt;" />
          <Parameter Name="repeat" Type="System.Func&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">The object on which this method will be run.</param>
          <param name="name">An animation key that should be unique among its sibling and parent animations for the duration of the animation.</param>
          <param name="transform">A function that maps animation times to new time values.</param>
          <param name="callback">An action that is called with successive animation values.</param>
          <param name="rate">The time, in milliseconds, between frames.</param>
          <param name="length">The number of milliseconds over which to interpolate the animation.</param>
          <param name="easing">The easing function to use to transision in, out, or in and out of the animation.</param>
          <param name="finished">An action to call when the animation is finished.</param>
          <param name="repeat">A function that returns true if the animation should continue.</param>
          <summary>Sets the specified parameters and starts the animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.Animate``1(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,``0},System.Action{``0},System.UInt32,System.UInt32,Xamarin.Forms.Easing,System.Action{``0,System.Boolean},System.Func{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="AnimateKinetic">
        <MemberSignature Language="C#" Value="public static void AnimateKinetic (this Xamarin.Forms.IAnimatable self, string name, Func&lt;double,double,bool&gt; callback, double velocity, double drag, Action finished = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AnimateKinetic(class Xamarin.Forms.IAnimatable self, string name, class System.Func`3&lt;float64, float64, bool&gt; callback, float64 velocity, float64 drag, class System.Action finished) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.AnimateKinetic(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,System.Double,System.Boolean},System.Double,System.Double,System.Action)" />
        <MemberSignature Language="F#" Value="static member AnimateKinetic : Xamarin.Forms.IAnimatable * string * Func&lt;double, double, bool&gt; * double * double * Action -&gt; unit" Usage="Xamarin.Forms.AnimationExtensions.AnimateKinetic (self, name, callback, velocity, drag, finished)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="callback" Type="System.Func&lt;System.Double,System.Double,System.Boolean&gt;" />
          <Parameter Name="velocity" Type="System.Double" />
          <Parameter Name="drag" Type="System.Double" />
          <Parameter Name="finished" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="name">An animation key that should be unique among its sibling and parent animations for the duration of the animation.</param>
          <param name="callback">An action that is called with successive animation values.</param>
          <param name="velocity">The amount that the animation progresses in each animation step. For example, a velocity of <c>1</c> progresses at the default speed.</param>
          <param name="drag">The amount that the progression speed is reduced per frame. Can be negative.</param>
          <param name="finished">An action to call when the animation is finished.</param>
          <summary>Sets the specified parameters and starts the kinetic animation.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.AnimateKinetic(Xamarin.Forms.IAnimatable,System.String,System.Func{System.Double,System.Double,System.Boolean},System.Double,System.Double,System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="AnimationIsRunning">
        <MemberSignature Language="C#" Value="public static bool AnimationIsRunning (this Xamarin.Forms.IAnimatable self, string handle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AnimationIsRunning(class Xamarin.Forms.IAnimatable self, string handle) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.AnimationIsRunning(Xamarin.Forms.IAnimatable,System.String)" />
        <MemberSignature Language="F#" Value="static member AnimationIsRunning : Xamarin.Forms.IAnimatable * string -&gt; bool" Usage="Xamarin.Forms.AnimationExtensions.AnimationIsRunning (self, handle)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
          <Parameter Name="handle" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">The object on which this method will be run.</param>
          <param name="handle">An animation key that must be unique among its sibling and parent animations for the duration of the animation.</param>
          <summary>Returns a Boolean value that indicates whether or not the animation that is specified by <paramref name="handle" /> is running.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.AnimationIsRunning(Xamarin.Forms.IAnimatable,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IAnimatable" />
      </Targets>
      <Member MemberName="Batch">
        <MemberSignature Language="C#" Value="public static IDisposable Batch (this Xamarin.Forms.IAnimatable self);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable Batch(class Xamarin.Forms.IAnimatable self) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.AnimationExtensions.Batch(Xamarin.Forms.IAnimatable)" />
        <MemberSignature Language="F#" Value="static member Batch : Xamarin.Forms.IAnimatable -&gt; IDisposable" Usage="Xamarin.Forms.AnimationExtensions.Batch self" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.IAnimatable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.AnimationExtensions" Member="M:Xamarin.Forms.AnimationExtensions.Batch(Xamarin.Forms.IAnimatable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="GetPropertyIfSet&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetPropertyIfSet&lt;T&gt; (this Xamarin.Forms.BindableObject bindableObject, Xamarin.Forms.BindableProperty bindableProperty, T returnIfNotSet);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetPropertyIfSet&lt;T&gt;(class Xamarin.Forms.BindableObject bindableObject, class Xamarin.Forms.BindableProperty bindableProperty, !!T returnIfNotSet) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.BindableObjectExtensions.GetPropertyIfSet``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,``0)" />
        <MemberSignature Language="F#" Value="static member GetPropertyIfSet : Xamarin.Forms.BindableObject * Xamarin.Forms.BindableProperty * 'T -&gt; 'T" Usage="Xamarin.Forms.BindableObjectExtensions.GetPropertyIfSet (bindableObject, bindableProperty, returnIfNotSet)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindableObject" Type="Xamarin.Forms.BindableObject" RefType="this" />
          <Parameter Name="bindableProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="returnIfNotSet" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="bindableObject">To be added.</param>
          <param name="bindableProperty">To be added.</param>
          <param name="returnIfNotSet">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.BindableObjectExtensions" Member="M:Xamarin.Forms.BindableObjectExtensions.GetPropertyIfSet``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="SetAppThemeColor">
        <MemberSignature Language="C#" Value="public static void SetAppThemeColor (this Xamarin.Forms.BindableObject self, Xamarin.Forms.BindableProperty targetProperty, Xamarin.Forms.Color light, Xamarin.Forms.Color dark);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAppThemeColor(class Xamarin.Forms.BindableObject self, class Xamarin.Forms.BindableProperty targetProperty, valuetype Xamarin.Forms.Color light, valuetype Xamarin.Forms.Color dark) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.BindableObjectExtensions.SetAppThemeColor(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,Xamarin.Forms.Color,Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetAppThemeColor : Xamarin.Forms.BindableObject * Xamarin.Forms.BindableProperty * Xamarin.Forms.Color * Xamarin.Forms.Color -&gt; unit" Usage="Xamarin.Forms.BindableObjectExtensions.SetAppThemeColor (self, targetProperty, light, dark)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.BindableObject" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="light" Type="Xamarin.Forms.Color" />
          <Parameter Name="dark" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <param name="targetProperty">To be added.</param>
          <param name="light">To be added.</param>
          <param name="dark">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.BindableObjectExtensions" Member="M:Xamarin.Forms.BindableObjectExtensions.SetAppThemeColor(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,Xamarin.Forms.Color,Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="SetBinding">
        <MemberSignature Language="C#" Value="public static void SetBinding (this Xamarin.Forms.BindableObject self, Xamarin.Forms.BindableProperty targetProperty, string path, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Xamarin.Forms.IValueConverter converter = default, string stringFormat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBinding(class Xamarin.Forms.BindableObject self, class Xamarin.Forms.BindableProperty targetProperty, string path, valuetype Xamarin.Forms.BindingMode mode, class Xamarin.Forms.IValueConverter converter, string stringFormat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.BindableObjectExtensions.SetBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)" />
        <MemberSignature Language="F#" Value="static member SetBinding : Xamarin.Forms.BindableObject * Xamarin.Forms.BindableProperty * string * Xamarin.Forms.BindingMode * Xamarin.Forms.IValueConverter * string -&gt; unit" Usage="Xamarin.Forms.BindableObjectExtensions.SetBinding (self, targetProperty, path, mode, converter, stringFormat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.BindableObject" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="converter" Type="Xamarin.Forms.IValueConverter" />
          <Parameter Name="stringFormat" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">The <see cref="T:Xamarin.Forms.BindableObject" />.</param>
          <param name="targetProperty">The BindableProperty on which to set a binding.</param>
          <param name="path">A <see cref="T:System.String" /> indicating the property path to bind to.</param>
          <param name="mode">The <see cref="T:Xamarin.Forms.BindingMode" /> for the binding. This parameter is optional. Default is <see cref="F:Xamarin.Forms.BindingMode.Default" />.</param>
          <param name="converter">An <see cref="T:Xamarin.Forms.IValueConverter" /> for the binding. This parameter is optional. Default is <see langword="null" />.</param>
          <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
          <summary>Creates and applies a binding to a property.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.BindableObjectExtensions" Member="M:Xamarin.Forms.BindableObjectExtensions.SetBinding(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="SetBinding&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void SetBinding&lt;TSource&gt; (this Xamarin.Forms.BindableObject self, Xamarin.Forms.BindableProperty targetProperty, System.Linq.Expressions.Expression&lt;Func&lt;TSource,object&gt;&gt; sourceProperty, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Xamarin.Forms.IValueConverter converter = default, string stringFormat = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBinding&lt;TSource&gt;(class Xamarin.Forms.BindableObject self, class Xamarin.Forms.BindableProperty targetProperty, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, object&gt;&gt; sourceProperty, valuetype Xamarin.Forms.BindingMode mode, class Xamarin.Forms.IValueConverter converter, string stringFormat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.BindableObjectExtensions.SetBinding``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)" />
        <MemberSignature Language="F#" Value="static member SetBinding : Xamarin.Forms.BindableObject * Xamarin.Forms.BindableProperty * System.Linq.Expressions.Expression&lt;Func&lt;'Source, obj&gt;&gt; * Xamarin.Forms.BindingMode * Xamarin.Forms.IValueConverter * string -&gt; unit" Usage="Xamarin.Forms.BindableObjectExtensions.SetBinding (self, targetProperty, sourceProperty, mode, converter, stringFormat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.BindableObject" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="sourceProperty" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Object&gt;&gt;" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="converter" Type="Xamarin.Forms.IValueConverter" />
          <Parameter Name="stringFormat" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The source type.</typeparam>
          <param name="self">The BindableObject.</param>
          <param name="targetProperty">The BindableProperty to bind to</param>
          <param name="sourceProperty">An expression used to retrieve the source path.</param>
          <param name="mode">The BindingMode for the binding. This parameter is optional. Default is <see cref="F:Xamarin.Forms.BindingMode.Default" />.</param>
          <param name="converter">An IValueConverter for the binding. This parameter is optional. Default is <see langword="null" />.</param>
          <param name="stringFormat">A string used as stringFormat for the binding. This parameter is optional. Default is <see langword="null" />.</param>
          <summary>Creates and applies a binding from an expression.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.BindableObjectExtensions" Member="M:Xamarin.Forms.BindableObjectExtensions.SetBinding``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="SetOnAppTheme&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetOnAppTheme&lt;T&gt; (this Xamarin.Forms.BindableObject self, Xamarin.Forms.BindableProperty targetProperty, T light, T dark);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOnAppTheme&lt;T&gt;(class Xamarin.Forms.BindableObject self, class Xamarin.Forms.BindableProperty targetProperty, !!T light, !!T dark) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.BindableObjectExtensions.SetOnAppTheme``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,``0,``0)" />
        <MemberSignature Language="F#" Value="static member SetOnAppTheme : Xamarin.Forms.BindableObject * Xamarin.Forms.BindableProperty * 'T * 'T -&gt; unit" Usage="Xamarin.Forms.BindableObjectExtensions.SetOnAppTheme (self, targetProperty, light, dark)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.BindableObject" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="light" Type="T" />
          <Parameter Name="dark" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="targetProperty">To be added.</param>
          <param name="light">To be added.</param>
          <param name="dark">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.BindableObjectExtensions" Member="M:Xamarin.Forms.BindableObjectExtensions.SetOnAppTheme``1(Xamarin.Forms.BindableObject,Xamarin.Forms.BindableProperty,``0,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.EffectiveFlowDirection" />
      </Targets>
      <Member MemberName="IsExplicit">
        <MemberSignature Language="C#" Value="public static bool IsExplicit (this Xamarin.Forms.EffectiveFlowDirection self);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExplicit(valuetype Xamarin.Forms.EffectiveFlowDirection self) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsExplicit(Xamarin.Forms.EffectiveFlowDirection)" />
        <MemberSignature Language="F#" Value="static member IsExplicit : Xamarin.Forms.EffectiveFlowDirection -&gt; bool" Usage="Xamarin.Forms.EffectiveFlowDirectionExtensions.IsExplicit self" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.EffectiveFlowDirection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">The enumeration value on which this method operates.</param>
          <summary>Returns <see langword="true" /> if the developer set the flow direction on the current object. Returns <see langword="false" /> if the flow direction is inherited or was not set by the developer.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveFlowDirectionExtensions" Member="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsExplicit(Xamarin.Forms.EffectiveFlowDirection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.EffectiveFlowDirection" />
      </Targets>
      <Member MemberName="IsImplicit">
        <MemberSignature Language="C#" Value="public static bool IsImplicit (this Xamarin.Forms.EffectiveFlowDirection self);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsImplicit(valuetype Xamarin.Forms.EffectiveFlowDirection self) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsImplicit(Xamarin.Forms.EffectiveFlowDirection)" />
        <MemberSignature Language="F#" Value="static member IsImplicit : Xamarin.Forms.EffectiveFlowDirection -&gt; bool" Usage="Xamarin.Forms.EffectiveFlowDirectionExtensions.IsImplicit self" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.EffectiveFlowDirection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">The enumeration value on which this method operates.</param>
          <summary>Returns <see langword="false" /> if the developer set the flow direction on the current object. Returns <see langword="true" /> if the flow direction is inherited or was not set by the developer.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveFlowDirectionExtensions" Member="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsImplicit(Xamarin.Forms.EffectiveFlowDirection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.EffectiveFlowDirection" />
      </Targets>
      <Member MemberName="IsLeftToRight">
        <MemberSignature Language="C#" Value="public static bool IsLeftToRight (this Xamarin.Forms.EffectiveFlowDirection self);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeftToRight(valuetype Xamarin.Forms.EffectiveFlowDirection self) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsLeftToRight(Xamarin.Forms.EffectiveFlowDirection)" />
        <MemberSignature Language="F#" Value="static member IsLeftToRight : Xamarin.Forms.EffectiveFlowDirection -&gt; bool" Usage="Xamarin.Forms.EffectiveFlowDirectionExtensions.IsLeftToRight self" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.EffectiveFlowDirection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">The enumeration value on which this method operates.</param>
          <summary>Returns <see langword="true" /> if the flow direction is left-to-right. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveFlowDirectionExtensions" Member="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsLeftToRight(Xamarin.Forms.EffectiveFlowDirection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.EffectiveFlowDirection" />
      </Targets>
      <Member MemberName="IsRightToLeft">
        <MemberSignature Language="C#" Value="public static bool IsRightToLeft (this Xamarin.Forms.EffectiveFlowDirection self);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRightToLeft(valuetype Xamarin.Forms.EffectiveFlowDirection self) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsRightToLeft(Xamarin.Forms.EffectiveFlowDirection)" />
        <MemberSignature Language="F#" Value="static member IsRightToLeft : Xamarin.Forms.EffectiveFlowDirection -&gt; bool" Usage="Xamarin.Forms.EffectiveFlowDirectionExtensions.IsRightToLeft self" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.EffectiveFlowDirection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">The enumeration value on which this method operates.</param>
          <summary>Returns <see langword="true" /> if the flow direction is right-to-left. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveFlowDirectionExtensions" Member="M:Xamarin.Forms.EffectiveFlowDirectionExtensions.IsRightToLeft(Xamarin.Forms.EffectiveFlowDirection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IVisual" />
      </Targets>
      <Member MemberName="IsDefault">
        <MemberSignature Language="C#" Value="public static bool IsDefault (this Xamarin.Forms.IVisual visual);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefault(class Xamarin.Forms.IVisual visual) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveVisualExtensions.IsDefault(Xamarin.Forms.IVisual)" />
        <MemberSignature Language="F#" Value="static member IsDefault : Xamarin.Forms.IVisual -&gt; bool" Usage="Xamarin.Forms.EffectiveVisualExtensions.IsDefault visual" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="visual" Type="Xamarin.Forms.IVisual" RefType="this" />
        </Parameters>
        <Docs>
          <param name="visual">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveVisualExtensions" Member="M:Xamarin.Forms.EffectiveVisualExtensions.IsDefault(Xamarin.Forms.IVisual)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IVisual" />
      </Targets>
      <Member MemberName="IsMatchParent">
        <MemberSignature Language="C#" Value="public static bool IsMatchParent (this Xamarin.Forms.IVisual visual);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatchParent(class Xamarin.Forms.IVisual visual) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveVisualExtensions.IsMatchParent(Xamarin.Forms.IVisual)" />
        <MemberSignature Language="F#" Value="static member IsMatchParent : Xamarin.Forms.IVisual -&gt; bool" Usage="Xamarin.Forms.EffectiveVisualExtensions.IsMatchParent visual" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="visual" Type="Xamarin.Forms.IVisual" RefType="this" />
        </Parameters>
        <Docs>
          <param name="visual">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveVisualExtensions" Member="M:Xamarin.Forms.EffectiveVisualExtensions.IsMatchParent(Xamarin.Forms.IVisual)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IVisual" />
      </Targets>
      <Member MemberName="IsMaterial">
        <MemberSignature Language="C#" Value="public static bool IsMaterial (this Xamarin.Forms.IVisual visual);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMaterial(class Xamarin.Forms.IVisual visual) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.EffectiveVisualExtensions.IsMaterial(Xamarin.Forms.IVisual)" />
        <MemberSignature Language="F#" Value="static member IsMaterial : Xamarin.Forms.IVisual -&gt; bool" Usage="Xamarin.Forms.EffectiveVisualExtensions.IsMaterial visual" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="visual" Type="Xamarin.Forms.IVisual" RefType="this" />
        </Parameters>
        <Docs>
          <param name="visual">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.EffectiveVisualExtensions" Member="M:Xamarin.Forms.EffectiveVisualExtensions.IsMaterial(Xamarin.Forms.IVisual)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="AsAsyncValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Internals.AsyncValue&lt;T&gt; AsAsyncValue&lt;T&gt; (this System.Threading.Tasks.Task&lt;T&gt; valueTask, T defaultValue = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.Internals.AsyncValue`1&lt;!!T&gt; AsAsyncValue&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; valueTask, !!T defaultValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.AsyncValueExtensions.AsAsyncValue``1(System.Threading.Tasks.Task{``0},``0)" />
        <MemberSignature Language="F#" Value="static member AsAsyncValue : System.Threading.Tasks.Task&lt;'T&gt; * 'T -&gt; Xamarin.Forms.Internals.AsyncValue&lt;'T&gt;" Usage="Xamarin.Forms.Internals.AsyncValueExtensions.AsAsyncValue (valueTask, defaultValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Internals.AsyncValue&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="valueTask" Type="System.Threading.Tasks.Task&lt;T&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="valueTask">For internal use by the Xamarin.Forms platform.</param>
          <param name="defaultValue">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.AsyncValueExtensions" Member="M:Xamarin.Forms.Internals.AsyncValueExtensions.AsAsyncValue``1(System.Threading.Tasks.Task{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="GetGroup&lt;TView,TItem&gt;">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.ITemplatedItemsList&lt;TItem&gt; GetGroup&lt;TView,TItem&gt; (this TItem cell) where TView : Xamarin.Forms.BindableObject, Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt; where TItem : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.ITemplatedItemsList`1&lt;!!TItem&gt; GetGroup&lt;(class Xamarin.Forms.BindableObject, class Xamarin.Forms.ITemplatedItemsView`1&lt;!!TItem&gt;) TView, (class Xamarin.Forms.BindableObject) TItem&gt;(!!TItem cell) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.GetGroup``2(``1)" />
        <MemberSignature Language="F#" Value="static member GetGroup : 'Item -&gt; Xamarin.Forms.ITemplatedItemsList&lt;'Item (requires 'Item :&gt; Xamarin.Forms.BindableObject)&gt; (requires 'View :&gt; Xamarin.Forms.BindableObject and 'View :&gt; Xamarin.Forms.ITemplatedItemsView&lt;'Item&gt; and 'Item :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Internals.CellExtensions.GetGroup cell" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.ITemplatedItemsList&lt;TItem&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <InterfaceName>Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TItem">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="cell" Type="TItem" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TItem">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.GetGroup``2(``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="GetGroupHeaderContent&lt;TView,TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem GetGroupHeaderContent&lt;TView,TItem&gt; (this TItem cell) where TView : Xamarin.Forms.BindableObject, Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt; where TItem : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem GetGroupHeaderContent&lt;(class Xamarin.Forms.BindableObject, class Xamarin.Forms.ITemplatedItemsView`1&lt;!!TItem&gt;) TView, (class Xamarin.Forms.BindableObject) TItem&gt;(!!TItem cell) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.GetGroupHeaderContent``2(``1)" />
        <MemberSignature Language="F#" Value="static member GetGroupHeaderContent : 'Item -&gt; 'Item (requires 'View :&gt; Xamarin.Forms.BindableObject and 'View :&gt; Xamarin.Forms.ITemplatedItemsView&lt;'Item&gt; and 'Item :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Internals.CellExtensions.GetGroupHeaderContent cell" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <InterfaceName>Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TItem">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="cell" Type="TItem" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TItem">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.GetGroupHeaderContent``2(``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="GetIndex&lt;TView,TItem&gt;">
        <MemberSignature Language="C#" Value="public static int GetIndex&lt;TView,TItem&gt; (this TItem cell) where TView : Xamarin.Forms.BindableObject, Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt; where TItem : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIndex&lt;(class Xamarin.Forms.BindableObject, class Xamarin.Forms.ITemplatedItemsView`1&lt;!!TItem&gt;) TView, (class Xamarin.Forms.BindableObject) TItem&gt;(!!TItem cell) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.GetIndex``2(``1)" />
        <MemberSignature Language="F#" Value="static member GetIndex : 'Item -&gt; int (requires 'View :&gt; Xamarin.Forms.BindableObject and 'View :&gt; Xamarin.Forms.ITemplatedItemsView&lt;'Item&gt; and 'Item :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Internals.CellExtensions.GetIndex cell" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <InterfaceName>Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TItem">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="cell" Type="TItem" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TItem">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.GetIndex``2(``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="GetIsGroupHeader&lt;TView,TItem&gt;">
        <MemberSignature Language="C#" Value="public static bool GetIsGroupHeader&lt;TView,TItem&gt; (this TItem cell) where TView : Xamarin.Forms.BindableObject, Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt; where TItem : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsGroupHeader&lt;(class Xamarin.Forms.BindableObject, class Xamarin.Forms.ITemplatedItemsView`1&lt;!!TItem&gt;) TView, (class Xamarin.Forms.BindableObject) TItem&gt;(!!TItem cell) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.GetIsGroupHeader``2(``1)" />
        <MemberSignature Language="F#" Value="static member GetIsGroupHeader : 'Item -&gt; bool (requires 'View :&gt; Xamarin.Forms.BindableObject and 'View :&gt; Xamarin.Forms.ITemplatedItemsView&lt;'Item&gt; and 'Item :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Internals.CellExtensions.GetIsGroupHeader cell" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <InterfaceName>Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TItem">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="cell" Type="TItem" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TItem">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.GetIsGroupHeader``2(``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Cell" />
      </Targets>
      <Member MemberName="GetPath">
        <MemberSignature Language="C#" Value="public static (int,int) GetPath (this Xamarin.Forms.Cell cell);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`2&lt;int32, int32&gt; GetPath(class Xamarin.Forms.Cell cell) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.GetPath(Xamarin.Forms.Cell)" />
        <MemberSignature Language="F#" Value="static member GetPath : Xamarin.Forms.Cell -&gt; int * int" Usage="Xamarin.Forms.Internals.CellExtensions.GetPath cell" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;System.Int32,System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cell" Type="Xamarin.Forms.Cell" RefType="this" />
        </Parameters>
        <Docs>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.GetPath(Xamarin.Forms.Cell)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="SetIsGroupHeader&lt;TView,TItem&gt;">
        <MemberSignature Language="C#" Value="public static void SetIsGroupHeader&lt;TView,TItem&gt; (this TItem cell, bool value) where TView : Xamarin.Forms.BindableObject, Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt; where TItem : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsGroupHeader&lt;(class Xamarin.Forms.BindableObject, class Xamarin.Forms.ITemplatedItemsView`1&lt;!!TItem&gt;) TView, (class Xamarin.Forms.BindableObject) TItem&gt;(!!TItem cell, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.CellExtensions.SetIsGroupHeader``2(``1,System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsGroupHeader : 'Item * bool -&gt; unit (requires 'View :&gt; Xamarin.Forms.BindableObject and 'View :&gt; Xamarin.Forms.ITemplatedItemsView&lt;'Item&gt; and 'Item :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Internals.CellExtensions.SetIsGroupHeader (cell, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <InterfaceName>Xamarin.Forms.ITemplatedItemsView&lt;TItem&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TItem">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="cell" Type="TItem" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="TView">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TItem">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="cell">For internal use by the Xamarin.Forms platform.</param>
          <param name="value">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.CellExtensions" Member="M:Xamarin.Forms.Internals.CellExtensions.SetIsGroupHeader``2(``1,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.ContentPage" />
      </Targets>
      <Member MemberName="LoadProfile">
        <MemberSignature Language="C#" Value="public static void LoadProfile (this Xamarin.Forms.ContentPage page);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LoadProfile(class Xamarin.Forms.ContentPage page) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ContentPageEx.LoadProfile(Xamarin.Forms.ContentPage)" />
        <MemberSignature Language="F#" Value="static member LoadProfile : Xamarin.Forms.ContentPage -&gt; unit" Usage="Xamarin.Forms.Internals.ContentPageEx.LoadProfile page" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Xamarin.Forms.ContentPage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="page">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ContentPageEx" Member="M:Xamarin.Forms.Internals.ContentPageEx.LoadProfile(Xamarin.Forms.ContentPage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.DataTemplate" />
      </Targets>
      <Member MemberName="CreateContent">
        <MemberSignature Language="C#" Value="public static object CreateContent (this Xamarin.Forms.DataTemplate self, object item, Xamarin.Forms.BindableObject container);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateContent(class Xamarin.Forms.DataTemplate self, object item, class Xamarin.Forms.BindableObject container) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.DataTemplateExtensions.CreateContent(Xamarin.Forms.DataTemplate,System.Object,Xamarin.Forms.BindableObject)" />
        <MemberSignature Language="F#" Value="static member CreateContent : Xamarin.Forms.DataTemplate * obj * Xamarin.Forms.BindableObject -&gt; obj" Usage="Xamarin.Forms.Internals.DataTemplateExtensions.CreateContent (self, item, container)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.DataTemplate" RefType="this" />
          <Parameter Name="item" Type="System.Object" />
          <Parameter Name="container" Type="Xamarin.Forms.BindableObject" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="item">For internal use by the Xamarin.Forms platform.</param>
          <param name="container">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.DataTemplateExtensions" Member="M:Xamarin.Forms.Internals.DataTemplateExtensions.CreateContent(Xamarin.Forms.DataTemplate,System.Object,Xamarin.Forms.BindableObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.DataTemplate" />
      </Targets>
      <Member MemberName="SelectDataTemplate">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.DataTemplate SelectDataTemplate (this Xamarin.Forms.DataTemplate self, object item, Xamarin.Forms.BindableObject container);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.DataTemplate SelectDataTemplate(class Xamarin.Forms.DataTemplate self, object item, class Xamarin.Forms.BindableObject container) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.DataTemplateExtensions.SelectDataTemplate(Xamarin.Forms.DataTemplate,System.Object,Xamarin.Forms.BindableObject)" />
        <MemberSignature Language="F#" Value="static member SelectDataTemplate : Xamarin.Forms.DataTemplate * obj * Xamarin.Forms.BindableObject -&gt; Xamarin.Forms.DataTemplate" Usage="Xamarin.Forms.Internals.DataTemplateExtensions.SelectDataTemplate (self, item, container)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.DataTemplate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.DataTemplate" RefType="this" />
          <Parameter Name="item" Type="System.Object" />
          <Parameter Name="container" Type="Xamarin.Forms.BindableObject" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="item">For internal use by the Xamarin.Forms platform.</param>
          <param name="container">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.DataTemplateExtensions" Member="M:Xamarin.Forms.Internals.DataTemplateExtensions.SelectDataTemplate(Xamarin.Forms.DataTemplate,System.Object,Xamarin.Forms.BindableObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Internals.DeviceOrientation" />
      </Targets>
      <Member MemberName="IsLandscape">
        <MemberSignature Language="C#" Value="public static bool IsLandscape (this Xamarin.Forms.Internals.DeviceOrientation orientation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLandscape(valuetype Xamarin.Forms.Internals.DeviceOrientation orientation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.DeviceOrientationExtensions.IsLandscape(Xamarin.Forms.Internals.DeviceOrientation)" />
        <MemberSignature Language="F#" Value="static member IsLandscape : Xamarin.Forms.Internals.DeviceOrientation -&gt; bool" Usage="Xamarin.Forms.Internals.DeviceOrientationExtensions.IsLandscape orientation" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="orientation" Type="Xamarin.Forms.Internals.DeviceOrientation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="orientation">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.DeviceOrientationExtensions" Member="M:Xamarin.Forms.Internals.DeviceOrientationExtensions.IsLandscape(Xamarin.Forms.Internals.DeviceOrientation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Internals.DeviceOrientation" />
      </Targets>
      <Member MemberName="IsPortrait">
        <MemberSignature Language="C#" Value="public static bool IsPortrait (this Xamarin.Forms.Internals.DeviceOrientation orientation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPortrait(valuetype Xamarin.Forms.Internals.DeviceOrientation orientation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.DeviceOrientationExtensions.IsPortrait(Xamarin.Forms.Internals.DeviceOrientation)" />
        <MemberSignature Language="F#" Value="static member IsPortrait : Xamarin.Forms.Internals.DeviceOrientation -&gt; bool" Usage="Xamarin.Forms.Internals.DeviceOrientationExtensions.IsPortrait orientation" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="orientation" Type="Xamarin.Forms.Internals.DeviceOrientation" RefType="this" />
        </Parameters>
        <Docs>
          <param name="orientation">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.DeviceOrientationExtensions" Member="M:Xamarin.Forms.Internals.DeviceOrientationExtensions.IsPortrait(Xamarin.Forms.Internals.DeviceOrientation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ForEach&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void ForEach&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; enumeration, Action&lt;T&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; enumeration, class System.Action`1&lt;!!T&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
        <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'T&gt; * Action&lt;'T&gt; -&gt; unit" Usage="Xamarin.Forms.Internals.EnumerableExtensions.ForEach (enumeration, action)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="enumeration" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="enumeration">For internal use by the Xamarin.Forms platform.</param>
          <param name="action">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GetChildGesturesFor&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetChildGesturesFor&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.GestureElement&gt; elements, Func&lt;T,bool&gt; predicate = default) where T : Xamarin.Forms.GestureRecognizer;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetChildGesturesFor&lt;(class Xamarin.Forms.GestureRecognizer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Xamarin.Forms.GestureElement&gt; elements, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.GetChildGesturesFor``1(System.Collections.Generic.IEnumerable{Xamarin.Forms.GestureElement},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="F#" Value="static member GetChildGesturesFor : seq&lt;Xamarin.Forms.GestureElement&gt; * Func&lt;'T, bool (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)&gt; -&gt; seq&lt;'T (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)&gt; (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)" Usage="Xamarin.Forms.Internals.EnumerableExtensions.GetChildGesturesFor (elements, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.GestureRecognizer</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.GestureElement&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="elements">For internal use by the Xamarin.Forms platform.</param>
          <param name="predicate">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.GetChildGesturesFor``1(System.Collections.Generic.IEnumerable{Xamarin.Forms.GestureElement},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GetGesturesFor&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetGesturesFor&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.IGestureRecognizer&gt; gestures, Func&lt;T,bool&gt; predicate = default) where T : Xamarin.Forms.GestureRecognizer;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetGesturesFor&lt;(class Xamarin.Forms.GestureRecognizer) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Xamarin.Forms.IGestureRecognizer&gt; gestures, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.GetGesturesFor``1(System.Collections.Generic.IEnumerable{Xamarin.Forms.IGestureRecognizer},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="F#" Value="static member GetGesturesFor : seq&lt;Xamarin.Forms.IGestureRecognizer&gt; * Func&lt;'T, bool (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)&gt; -&gt; seq&lt;'T (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)&gt; (requires 'T :&gt; Xamarin.Forms.GestureRecognizer)" Usage="Xamarin.Forms.Internals.EnumerableExtensions.GetGesturesFor (gestures, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.GestureRecognizer</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestures" Type="System.Collections.Generic.IEnumerable&lt;Xamarin.Forms.IGestureRecognizer&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="gestures">For internal use by the Xamarin.Forms platform.</param>
          <param name="predicate">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.GetGesturesFor``1(System.Collections.Generic.IEnumerable{Xamarin.Forms.IGestureRecognizer},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;TKey,System.Collections.Generic.List&lt;TSource&gt;&gt; GroupToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; enumeration, Func&lt;TSource,TKey&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;!!TKey, class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; GroupToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; enumeration, class System.Func`2&lt;!!TSource, !!TKey&gt; func) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.GroupToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <MemberSignature Language="F#" Value="static member GroupToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.IDictionary&lt;'Key, System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="Xamarin.Forms.Internals.EnumerableExtensions.GroupToDictionary (enumeration, func)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="enumeration" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">For internal use by the Xamarin.Forms platform.</typeparam>
          <typeparam name="TKey">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="enumeration">For internal use by the Xamarin.Forms platform.</param>
          <param name="func">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.GroupToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; enumerable, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; enumerable, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        <MemberSignature Language="F#" Value="static member IndexOf : seq&lt;'T&gt; * 'T -&gt; int" Usage="Xamarin.Forms.Internals.EnumerableExtensions.IndexOf (enumerable, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="enumerable" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="enumerable">For internal use by the Xamarin.Forms platform.</param>
          <param name="item">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; enumerable, Func&lt;T,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; enumerable, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="F#" Value="static member IndexOf : seq&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; int" Usage="Xamarin.Forms.Internals.EnumerableExtensions.IndexOf (enumerable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="enumerable" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="enumerable">For internal use by the Xamarin.Forms platform.</param>
          <param name="predicate">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Prepend&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; Prepend&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; enumerable, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Prepend&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; enumerable, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'T&gt; * 'T -&gt; seq&lt;'T&gt;" Usage="Xamarin.Forms.Internals.EnumerableExtensions.Prepend (enumerable, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="enumerable" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="enumerable">For internal use by the Xamarin.Forms platform.</param>
          <param name="item">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.EnumerableExtensions" Member="M:Xamarin.Forms.Internals.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Targets>
      <Member MemberName="Apply">
        <MemberSignature Language="C#" Value="public static System.Collections.Specialized.NotifyCollectionChangedAction Apply (this System.Collections.Specialized.NotifyCollectionChangedEventArgs self, Action&lt;object,int,bool&gt; insert, Action&lt;object,int&gt; removeAt, Action reset);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Specialized.NotifyCollectionChangedAction Apply(class System.Collections.Specialized.NotifyCollectionChangedEventArgs self, class System.Action`3&lt;object, int32, bool&gt; insert, class System.Action`2&lt;object, int32&gt; removeAt, class System.Action reset) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Action{System.Object,System.Int32,System.Boolean},System.Action{System.Object,System.Int32},System.Action)" />
        <MemberSignature Language="F#" Value="static member Apply : System.Collections.Specialized.NotifyCollectionChangedEventArgs * Action&lt;obj, int, bool&gt; * Action&lt;obj, int&gt; * Action -&gt; System.Collections.Specialized.NotifyCollectionChangedAction" Usage="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply (self, insert, removeAt, reset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Specialized.NotifyCollectionChangedAction</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" RefType="this" />
          <Parameter Name="insert" Type="System.Action&lt;System.Object,System.Int32,System.Boolean&gt;" />
          <Parameter Name="removeAt" Type="System.Action&lt;System.Object,System.Int32&gt;" />
          <Parameter Name="reset" Type="System.Action" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="insert">For internal use by the Xamarin.Forms platform.</param>
          <param name="removeAt">For internal use by the Xamarin.Forms platform.</param>
          <param name="reset">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions" Member="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Action{System.Object,System.Int32,System.Boolean},System.Action{System.Object,System.Int32},System.Action)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Targets>
      <Member MemberName="Apply&lt;TFrom&gt;">
        <MemberSignature Language="C#" Value="public static void Apply&lt;TFrom&gt; (this System.Collections.Specialized.NotifyCollectionChangedEventArgs self, System.Collections.Generic.IList&lt;TFrom&gt; from, System.Collections.Generic.IList&lt;object&gt; to);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Apply&lt;TFrom&gt;(class System.Collections.Specialized.NotifyCollectionChangedEventArgs self, class System.Collections.Generic.IList`1&lt;!!TFrom&gt; from, class System.Collections.Generic.IList`1&lt;object&gt; to) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Object})" />
        <MemberSignature Language="F#" Value="static member Apply : System.Collections.Specialized.NotifyCollectionChangedEventArgs * System.Collections.Generic.IList&lt;'From&gt; * System.Collections.Generic.IList&lt;obj&gt; -&gt; unit" Usage="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply (self, from, to)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFrom" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" RefType="this" />
          <Parameter Name="from" Type="System.Collections.Generic.IList&lt;TFrom&gt;" />
          <Parameter Name="to" Type="System.Collections.Generic.IList&lt;System.Object&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TFrom">For internal use by the Xamarin.Forms platform.</typeparam>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="from">For internal use by the Xamarin.Forms platform.</param>
          <param name="to">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions" Member="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.Apply``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Targets>
      <Member MemberName="WithCount">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsEx WithCount (this System.Collections.Specialized.NotifyCollectionChangedEventArgs e, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsEx WithCount(class System.Collections.Specialized.NotifyCollectionChangedEventArgs e, int32 count) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.WithCount(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Int32)" />
        <MemberSignature Language="F#" Value="static member WithCount : System.Collections.Specialized.NotifyCollectionChangedEventArgs * int -&gt; Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsEx" Usage="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.WithCount (e, count)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsEx</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="e" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="e">For internal use by the Xamarin.Forms platform.</param>
          <param name="count">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by platform renderers.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions" Member="M:Xamarin.Forms.Internals.NotifyCollectionChangedEventArgsExtensions.WithCount(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double" />
      </Targets>
      <Member MemberName="Clamp">
        <MemberSignature Language="C#" Value="public static double Clamp (this double self, double min, double max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 self, float64 min, float64 max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.NumericExtensions.Clamp(System.Double,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Clamp : double * double * double -&gt; double" Usage="Xamarin.Forms.Internals.NumericExtensions.Clamp (self, min, max)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Double" RefType="this" />
          <Parameter Name="min" Type="System.Double" />
          <Parameter Name="max" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="min">For internal use by the Xamarin.Forms platform.</param>
          <param name="max">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.NumericExtensions" Member="M:Xamarin.Forms.Internals.NumericExtensions.Clamp(System.Double,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="Clamp">
        <MemberSignature Language="C#" Value="public static int Clamp (this int self, int min, int max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 self, int32 min, int32 max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.NumericExtensions.Clamp(System.Int32,System.Int32,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Clamp : int * int * int -&gt; int" Usage="Xamarin.Forms.Internals.NumericExtensions.Clamp (self, min, max)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Int32" RefType="this" />
          <Parameter Name="min" Type="System.Int32" />
          <Parameter Name="max" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="min">For internal use by the Xamarin.Forms platform.</param>
          <param name="max">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.NumericExtensions" Member="M:Xamarin.Forms.Internals.NumericExtensions.Clamp(System.Int32,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Page" />
      </Targets>
      <Member MemberName="AncestorToRoot">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Page AncestorToRoot (this Xamarin.Forms.Page page);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.Page AncestorToRoot(class Xamarin.Forms.Page page) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.PageExtensions.AncestorToRoot(Xamarin.Forms.Page)" />
        <MemberSignature Language="F#" Value="static member AncestorToRoot : Xamarin.Forms.Page -&gt; Xamarin.Forms.Page" Usage="Xamarin.Forms.Internals.PageExtensions.AncestorToRoot page" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Page</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="page" Type="Xamarin.Forms.Page" RefType="this" />
        </Parameters>
        <Docs>
          <param name="page">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.PageExtensions" Member="M:Xamarin.Forms.Internals.PageExtensions.AncestorToRoot(Xamarin.Forms.Page)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetExportedTypes">
        <MemberSignature Language="C#" Value="public static Type[] GetExportedTypes (this System.Reflection.Assembly assembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetExportedTypes(class System.Reflection.Assembly assembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetExportedTypes(System.Reflection.Assembly)" />
        <MemberSignature Language="F#" Value="static member GetExportedTypes : System.Reflection.Assembly -&gt; Type[]" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetExportedTypes assembly" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Type[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="assembly" Type="System.Reflection.Assembly" RefType="this" />
        </Parameters>
        <Docs>
          <param name="assembly">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetExportedTypes(System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetField">
        <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (this Type type, Func&lt;System.Reflection.FieldInfo,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, class System.Func`2&lt;class System.Reflection.FieldInfo, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetField(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean})" />
        <MemberSignature Language="F#" Value="static member GetField : Type * Func&lt;System.Reflection.FieldInfo, bool&gt; -&gt; System.Reflection.FieldInfo" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetField (type, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.FieldInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Reflection.FieldInfo,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="type">For internal use by the Xamarin.Forms platform.</param>
          <param name="predicate">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetField(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetField">
        <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (this Type type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetField(System.Type,System.String)" />
        <MemberSignature Language="F#" Value="static member GetField : Type * string -&gt; System.Reflection.FieldInfo" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetField (type, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.FieldInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">For internal use by the Xamarin.Forms platform.</param>
          <param name="name">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetField(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetFields">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.FieldInfo&gt; GetFields (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.FieldInfo&gt; GetFields(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetFields(System.Type)" />
        <MemberSignature Language="F#" Value="static member GetFields : Type -&gt; seq&lt;System.Reflection.FieldInfo&gt;" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetFields type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.FieldInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetFields(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt; GetProperties (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.PropertyInfo&gt; GetProperties(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetProperties(System.Type)" />
        <MemberSignature Language="F#" Value="static member GetProperties : Type -&gt; seq&lt;System.Reflection.PropertyInfo&gt;" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetProperties type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetProperties(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetProperty">
        <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetProperty (this Type type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetProperty(class System.Type type, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.GetProperty(System.Type,System.String)" />
        <MemberSignature Language="F#" Value="static member GetProperty : Type * string -&gt; System.Reflection.PropertyInfo" Usage="Xamarin.Forms.Internals.ReflectionExtensions.GetProperty (type, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.PropertyInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">For internal use by the Xamarin.Forms platform.</param>
          <param name="name">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.GetProperty(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsAssignableFrom">
        <MemberSignature Language="C#" Value="public static bool IsAssignableFrom (this Type self, Type c);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignableFrom(class System.Type self, class System.Type c) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.IsAssignableFrom(System.Type,System.Type)" />
        <MemberSignature Language="F#" Value="static member IsAssignableFrom : Type * Type -&gt; bool" Usage="Xamarin.Forms.Internals.ReflectionExtensions.IsAssignableFrom (self, c)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Type" RefType="this" />
          <Parameter Name="c" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="c">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.IsAssignableFrom(System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsInstanceOfType">
        <MemberSignature Language="C#" Value="public static bool IsInstanceOfType (this Type self, object o);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInstanceOfType(class System.Type self, object o) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Internals.ReflectionExtensions.IsInstanceOfType(System.Type,System.Object)" />
        <MemberSignature Language="F#" Value="static member IsInstanceOfType : Type * obj -&gt; bool" Usage="Xamarin.Forms.Internals.ReflectionExtensions.IsInstanceOfType (self, o)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Type" RefType="this" />
          <Parameter Name="o" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="self">For internal use by the Xamarin.Forms platform.</param>
          <param name="o">For internal use by the Xamarin.Forms platform.</param>
          <summary>For internal use by the Xamarin.Forms platform.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Internals.ReflectionExtensions" Member="M:Xamarin.Forms.Internals.ReflectionExtensions.IsInstanceOfType(System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Maps.Circle" />
      </Targets>
      <Member MemberName="ToCircumferencePositions">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;Xamarin.Forms.Maps.Position&gt; ToCircumferencePositions (this Xamarin.Forms.Maps.Circle circle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;valuetype Xamarin.Forms.Maps.Position&gt; ToCircumferencePositions(class Xamarin.Forms.Maps.Circle circle) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Maps.GeographyUtils.ToCircumferencePositions(Xamarin.Forms.Maps.Circle)" />
        <MemberSignature Language="F#" Value="static member ToCircumferencePositions : Xamarin.Forms.Maps.Circle -&gt; System.Collections.Generic.List&lt;Xamarin.Forms.Maps.Position&gt;" Usage="Xamarin.Forms.Maps.GeographyUtils.ToCircumferencePositions circle" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;Xamarin.Forms.Maps.Position&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="circle" Type="Xamarin.Forms.Maps.Circle" RefType="this" />
        </Parameters>
        <Docs>
          <param name="circle">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Maps.GeographyUtils" Member="M:Xamarin.Forms.Maps.GeographyUtils.ToCircumferencePositions(Xamarin.Forms.Maps.Circle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double" />
      </Targets>
      <Member MemberName="ToDegrees">
        <MemberSignature Language="C#" Value="public static double ToDegrees (this double radians);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDegrees(float64 radians) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Maps.GeographyUtils.ToDegrees(System.Double)" />
        <MemberSignature Language="F#" Value="static member ToDegrees : double -&gt; double" Usage="Xamarin.Forms.Maps.GeographyUtils.ToDegrees radians" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="radians" Type="System.Double" RefType="this" />
        </Parameters>
        <Docs>
          <param name="radians">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Maps.GeographyUtils" Member="M:Xamarin.Forms.Maps.GeographyUtils.ToDegrees(System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double" />
      </Targets>
      <Member MemberName="ToRadians">
        <MemberSignature Language="C#" Value="public static double ToRadians (this double degrees);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToRadians(float64 degrees) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Maps.GeographyUtils.ToRadians(System.Double)" />
        <MemberSignature Language="F#" Value="static member ToRadians : double -&gt; double" Usage="Xamarin.Forms.Maps.GeographyUtils.ToRadians degrees" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="degrees" Type="System.Double" RefType="this" />
        </Parameters>
        <Docs>
          <param name="degrees">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Maps.GeographyUtils" Member="M:Xamarin.Forms.Maps.GeographyUtils.ToRadians(System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
        <Target Type="TVariable" />
      </Targets>
      <Member MemberName="Assign&lt;TBindable,TVariable&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Assign&lt;TBindable,TVariable&gt; (this TBindable bindable, out TVariable variable) where TBindable : Xamarin.Forms.BindableObject, TVariable;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Assign&lt;(class Xamarin.Forms.BindableObject, !!TVariable) TBindable, TVariable&gt;(!!TBindable bindable, [out] !!TVariable&amp; variable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Assign``2(``0,``1@)" />
        <MemberSignature Language="F#" Value="static member Assign : 'Bindable * 'Variable -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject and 'Bindable :&gt; 'Variable)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Assign (bindable, variable)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
              <BaseTypeName>TVariable</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TVariable" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="variable" Type="TVariable" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <typeparam name="TVariable">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="variable">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Assign``2(``0,``1@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable&gt; (this TBindable bindable, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Xamarin.Forms.IValueConverter converter = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable&gt;(!!TBindable bindable, string path, valuetype Xamarin.Forms.BindingMode mode, class Xamarin.Forms.IValueConverter converter, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``1(``0,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * string * Xamarin.Forms.BindingMode * Xamarin.Forms.IValueConverter * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="converter" Type="Xamarin.Forms.IValueConverter" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="converter">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``1(``0,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable&gt; (this TBindable bindable, Xamarin.Forms.BindableProperty targetProperty, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Xamarin.Forms.IValueConverter converter = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable&gt;(!!TBindable bindable, class Xamarin.Forms.BindableProperty targetProperty, string path, valuetype Xamarin.Forms.BindingMode mode, class Xamarin.Forms.IValueConverter converter, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``1(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * Xamarin.Forms.BindableProperty * string * Xamarin.Forms.BindingMode * Xamarin.Forms.IValueConverter * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, targetProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="converter" Type="Xamarin.Forms.IValueConverter" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="targetProperty">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="converter">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``1(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,Xamarin.Forms.IValueConverter,System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable,TSource,TDest&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable,TSource,TDest&gt; (this TBindable bindable, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Func&lt;TSource,TDest&gt; convert = default, Func&lt;TDest,TSource&gt; convertBack = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable, TSource, TDest&gt;(!!TBindable bindable, string path, valuetype Xamarin.Forms.BindingMode mode, class System.Func`2&lt;!!TSource, !!TDest&gt; convert, class System.Func`2&lt;!!TDest, !!TSource&gt; convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``3(``0,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2},System.Func{``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * string * Xamarin.Forms.BindingMode * Func&lt;'Source, 'Dest&gt; * Func&lt;'Dest, 'Source&gt; * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, path, mode, convert, convertBack, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TDest" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="convert" Type="System.Func&lt;TSource,TDest&gt;" />
          <Parameter Name="convertBack" Type="System.Func&lt;TDest,TSource&gt;" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TDest">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="convert">To be added.</param>
          <param name="convertBack">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``3(``0,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2},System.Func{``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable,TSource,TDest&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable,TSource,TDest&gt; (this TBindable bindable, Xamarin.Forms.BindableProperty targetProperty, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Func&lt;TSource,TDest&gt; convert = default, Func&lt;TDest,TSource&gt; convertBack = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable, TSource, TDest&gt;(!!TBindable bindable, class Xamarin.Forms.BindableProperty targetProperty, string path, valuetype Xamarin.Forms.BindingMode mode, class System.Func`2&lt;!!TSource, !!TDest&gt; convert, class System.Func`2&lt;!!TDest, !!TSource&gt; convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``3(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2},System.Func{``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * Xamarin.Forms.BindableProperty * string * Xamarin.Forms.BindingMode * Func&lt;'Source, 'Dest&gt; * Func&lt;'Dest, 'Source&gt; * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, targetProperty, path, mode, convert, convertBack, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TDest" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="convert" Type="System.Func&lt;TSource,TDest&gt;" />
          <Parameter Name="convertBack" Type="System.Func&lt;TDest,TSource&gt;" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TDest">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="targetProperty">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="convert">To be added.</param>
          <param name="convertBack">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``3(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2},System.Func{``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable,TSource,TParam,TDest&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable,TSource,TParam,TDest&gt; (this TBindable bindable, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Func&lt;TSource,TParam,TDest&gt; convert = default, Func&lt;TDest,TParam,TSource&gt; convertBack = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable, TSource, TParam, TDest&gt;(!!TBindable bindable, string path, valuetype Xamarin.Forms.BindingMode mode, class System.Func`3&lt;!!TSource, !!TParam, !!TDest&gt; convert, class System.Func`3&lt;!!TDest, !!TParam, !!TSource&gt; convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``4(``0,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2,``3},System.Func{``3,``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * string * Xamarin.Forms.BindingMode * Func&lt;'Source, 'Param, 'Dest&gt; * Func&lt;'Dest, 'Param, 'Source&gt; * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, path, mode, convert, convertBack, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TParam" />
          <TypeParameter Name="TDest" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="convert" Type="System.Func&lt;TSource,TParam,TDest&gt;" />
          <Parameter Name="convertBack" Type="System.Func&lt;TDest,TParam,TSource&gt;" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TParam">To be added.</typeparam>
          <typeparam name="TDest">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="convert">To be added.</param>
          <param name="convertBack">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``4(``0,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2,``3},System.Func{``3,``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Bind&lt;TBindable,TSource,TParam,TDest&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Bind&lt;TBindable,TSource,TParam,TDest&gt; (this TBindable bindable, Xamarin.Forms.BindableProperty targetProperty, string path = &quot;.&quot;, Xamarin.Forms.BindingMode mode = Xamarin.Forms.BindingMode.Default, Func&lt;TSource,TParam,TDest&gt; convert = default, Func&lt;TDest,TParam,TSource&gt; convertBack = default, object converterParameter = default, string stringFormat = default, object source = default, object targetNullValue = default, object fallbackValue = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Bind&lt;(class Xamarin.Forms.BindableObject) TBindable, TSource, TParam, TDest&gt;(!!TBindable bindable, class Xamarin.Forms.BindableProperty targetProperty, string path, valuetype Xamarin.Forms.BindingMode mode, class System.Func`3&lt;!!TSource, !!TParam, !!TDest&gt; convert, class System.Func`3&lt;!!TDest, !!TParam, !!TSource&gt; convertBack, object converterParameter, string stringFormat, object source, object targetNullValue, object fallbackValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``4(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2,``3},System.Func{``3,``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
        <MemberSignature Language="F#" Value="static member Bind : 'Bindable * Xamarin.Forms.BindableProperty * string * Xamarin.Forms.BindingMode * Func&lt;'Source, 'Param, 'Dest&gt; * Func&lt;'Dest, 'Param, 'Source&gt; * obj * string * obj * obj * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Bind (bindable, targetProperty, path, mode, convert, convertBack, converterParameter, stringFormat, source, targetNullValue, fallbackValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TParam" />
          <TypeParameter Name="TDest" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="mode" Type="Xamarin.Forms.BindingMode" />
          <Parameter Name="convert" Type="System.Func&lt;TSource,TParam,TDest&gt;" />
          <Parameter Name="convertBack" Type="System.Func&lt;TDest,TParam,TSource&gt;" />
          <Parameter Name="converterParameter" Type="System.Object" />
          <Parameter Name="stringFormat" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="targetNullValue" Type="System.Object" />
          <Parameter Name="fallbackValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TParam">To be added.</typeparam>
          <typeparam name="TDest">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="targetProperty">To be added.</param>
          <param name="path">To be added.</param>
          <param name="mode">To be added.</param>
          <param name="convert">To be added.</param>
          <param name="convertBack">To be added.</param>
          <param name="converterParameter">To be added.</param>
          <param name="stringFormat">To be added.</param>
          <param name="source">To be added.</param>
          <param name="targetNullValue">To be added.</param>
          <param name="fallbackValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Bind``4(``0,Xamarin.Forms.BindableProperty,System.String,Xamarin.Forms.BindingMode,System.Func{``1,``2,``3},System.Func{``3,``2,``1},System.Object,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="BindCommand&lt;TBindable&gt;">
        <MemberSignature Language="C#" Value="public static TBindable BindCommand&lt;TBindable&gt; (this TBindable bindable, string path = &quot;.&quot;, object source = default, string parameterPath = &quot;.&quot;, object parameterSource = default) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable BindCommand&lt;(class Xamarin.Forms.BindableObject) TBindable&gt;(!!TBindable bindable, string path, object source, string parameterPath, object parameterSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.BindCommand``1(``0,System.String,System.Object,System.String,System.Object)" />
        <MemberSignature Language="F#" Value="static member BindCommand : 'Bindable * string * obj * string * obj -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.BindCommand (bindable, path, source, parameterPath, parameterSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="source" Type="System.Object" />
          <Parameter Name="parameterPath" Type="System.String" />
          <Parameter Name="parameterSource" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="path">To be added.</param>
          <param name="source">To be added.</param>
          <param name="parameterPath">To be added.</param>
          <param name="parameterSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.BindCommand``1(``0,System.String,System.Object,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.BindableObject" />
      </Targets>
      <Member MemberName="Invoke&lt;TBindable&gt;">
        <MemberSignature Language="C#" Value="public static TBindable Invoke&lt;TBindable&gt; (this TBindable bindable, Action&lt;TBindable&gt; action) where TBindable : Xamarin.Forms.BindableObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBindable Invoke&lt;(class Xamarin.Forms.BindableObject) TBindable&gt;(!!TBindable bindable, class System.Action`1&lt;!!TBindable&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.BindableObjectExtensions.Invoke``1(``0,System.Action{``0})" />
        <MemberSignature Language="F#" Value="static member Invoke : 'Bindable * Action&lt;'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)&gt; -&gt; 'Bindable (requires 'Bindable :&gt; Xamarin.Forms.BindableObject)" Usage="Xamarin.Forms.Markup.BindableObjectExtensions.Invoke (bindable, action)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TBindable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBindable">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.BindableObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="bindable" Type="TBindable" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TBindable&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TBindable">To be added.</typeparam>
          <param name="bindable">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.BindableObjectExtensions" Member="M:Xamarin.Forms.Markup.BindableObjectExtensions.Invoke``1(``0,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.Internals.IFontElement" />
      </Targets>
      <Member MemberName="Bold&lt;TFontElement&gt;">
        <MemberSignature Language="C#" Value="public static TFontElement Bold&lt;TFontElement&gt; (this TFontElement fontElement) where TFontElement : Xamarin.Forms.Element, Xamarin.Forms.Internals.IFontElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TFontElement Bold&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.Internals.IFontElement) TFontElement&gt;(!!TFontElement fontElement) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementExtensions.Bold``1(``0)" />
        <MemberSignature Language="F#" Value="static member Bold : 'FontElement -&gt; 'FontElement (requires 'FontElement :&gt; Xamarin.Forms.Element and 'FontElement :&gt; Xamarin.Forms.Internals.IFontElement)" Usage="Xamarin.Forms.Markup.ElementExtensions.Bold fontElement" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TFontElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFontElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.Internals.IFontElement</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="fontElement" Type="TFontElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFontElement">To be added.</typeparam>
          <param name="fontElement">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementExtensions" Member="M:Xamarin.Forms.Markup.ElementExtensions.Bold``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
      </Targets>
      <Member MemberName="Effects&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement Effects&lt;TElement&gt; (this TElement element, params Xamarin.Forms.Effect[] effects) where TElement : Xamarin.Forms.Element;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement Effects&lt;(class Xamarin.Forms.Element) TElement&gt;(!!TElement element, class Xamarin.Forms.Effect[] effects) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementExtensions.Effects``1(``0,Xamarin.Forms.Effect[])" />
        <MemberSignature Language="F#" Value="static member Effects : 'Element * Xamarin.Forms.Effect[] -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.Element)" Usage="Xamarin.Forms.Markup.ElementExtensions.Effects (element, effects)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="effects" Type="Xamarin.Forms.Effect[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="effects">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementExtensions" Member="M:Xamarin.Forms.Markup.ElementExtensions.Effects``1(``0,Xamarin.Forms.Effect[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.Internals.IFontElement" />
      </Targets>
      <Member MemberName="Font&lt;TFontElement&gt;">
        <MemberSignature Language="C#" Value="public static TFontElement Font&lt;TFontElement&gt; (this TFontElement fontElement, double? size = default, bool? bold = default, bool? italic = default, string family = default) where TFontElement : Xamarin.Forms.Element, Xamarin.Forms.Internals.IFontElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TFontElement Font&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.Internals.IFontElement) TFontElement&gt;(!!TFontElement fontElement, valuetype System.Nullable`1&lt;float64&gt; size, valuetype System.Nullable`1&lt;bool&gt; bold, valuetype System.Nullable`1&lt;bool&gt; italic, string family) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementExtensions.Font``1(``0,System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)" />
        <MemberSignature Language="F#" Value="static member Font : 'FontElement * Nullable&lt;double&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string -&gt; 'FontElement (requires 'FontElement :&gt; Xamarin.Forms.Element and 'FontElement :&gt; Xamarin.Forms.Internals.IFontElement)" Usage="Xamarin.Forms.Markup.ElementExtensions.Font (fontElement, size, bold, italic, family)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TFontElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFontElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.Internals.IFontElement</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="fontElement" Type="TFontElement" RefType="this" />
          <Parameter Name="size" Type="System.Nullable&lt;System.Double&gt;" />
          <Parameter Name="bold" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="italic" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="family" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TFontElement">To be added.</typeparam>
          <param name="fontElement">To be added.</param>
          <param name="size">To be added.</param>
          <param name="bold">To be added.</param>
          <param name="italic">To be added.</param>
          <param name="family">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementExtensions" Member="M:Xamarin.Forms.Markup.ElementExtensions.Font``1(``0,System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.Internals.IFontElement" />
      </Targets>
      <Member MemberName="FontSize&lt;TFontElement&gt;">
        <MemberSignature Language="C#" Value="public static TFontElement FontSize&lt;TFontElement&gt; (this TFontElement fontElement, double size) where TFontElement : Xamarin.Forms.Element, Xamarin.Forms.Internals.IFontElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TFontElement FontSize&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.Internals.IFontElement) TFontElement&gt;(!!TFontElement fontElement, float64 size) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementExtensions.FontSize``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member FontSize : 'FontElement * double -&gt; 'FontElement (requires 'FontElement :&gt; Xamarin.Forms.Element and 'FontElement :&gt; Xamarin.Forms.Internals.IFontElement)" Usage="Xamarin.Forms.Markup.ElementExtensions.FontSize (fontElement, size)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TFontElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFontElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.Internals.IFontElement</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="fontElement" Type="TFontElement" RefType="this" />
          <Parameter Name="size" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TFontElement">To be added.</typeparam>
          <param name="fontElement">To be added.</param>
          <param name="size">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementExtensions" Member="M:Xamarin.Forms.Markup.ElementExtensions.FontSize``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.Internals.IFontElement" />
      </Targets>
      <Member MemberName="Italic&lt;TFontElement&gt;">
        <MemberSignature Language="C#" Value="public static TFontElement Italic&lt;TFontElement&gt; (this TFontElement fontElement) where TFontElement : Xamarin.Forms.Element, Xamarin.Forms.Internals.IFontElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TFontElement Italic&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.Internals.IFontElement) TFontElement&gt;(!!TFontElement fontElement) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementExtensions.Italic``1(``0)" />
        <MemberSignature Language="F#" Value="static member Italic : 'FontElement -&gt; 'FontElement (requires 'FontElement :&gt; Xamarin.Forms.Element and 'FontElement :&gt; Xamarin.Forms.Internals.IFontElement)" Usage="Xamarin.Forms.Markup.ElementExtensions.Italic fontElement" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TFontElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFontElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.Internals.IFontElement</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="fontElement" Type="TFontElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFontElement">To be added.</typeparam>
          <param name="fontElement">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementExtensions" Member="M:Xamarin.Forms.Markup.ElementExtensions.Italic``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="BindClickGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement BindClickGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, string commandPath = &quot;.&quot;, object commandSource = default, string parameterPath = default, object parameterSource = default) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement BindClickGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindClickGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
        <MemberSignature Language="F#" Value="static member BindClickGesture : 'GestureElement * string * obj * string * obj -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.BindClickGesture (gestureElement, commandPath, commandSource, parameterPath, parameterSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="commandPath" Type="System.String" />
          <Parameter Name="commandSource" Type="System.Object" />
          <Parameter Name="parameterPath" Type="System.String" />
          <Parameter Name="parameterSource" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="commandPath">To be added.</param>
          <param name="commandSource">To be added.</param>
          <param name="parameterPath">To be added.</param>
          <param name="parameterSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindClickGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="BindSwipeGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement BindSwipeGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, string commandPath = &quot;.&quot;, object commandSource = default, string parameterPath = default, object parameterSource = default) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement BindSwipeGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindSwipeGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
        <MemberSignature Language="F#" Value="static member BindSwipeGesture : 'GestureElement * string * obj * string * obj -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.BindSwipeGesture (gestureElement, commandPath, commandSource, parameterPath, parameterSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="commandPath" Type="System.String" />
          <Parameter Name="commandSource" Type="System.Object" />
          <Parameter Name="parameterPath" Type="System.String" />
          <Parameter Name="parameterSource" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="commandPath">To be added.</param>
          <param name="commandSource">To be added.</param>
          <param name="parameterPath">To be added.</param>
          <param name="parameterSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindSwipeGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="BindTapGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement BindTapGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, string commandPath = &quot;.&quot;, object commandSource = default, string parameterPath = default, object parameterSource = default) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement BindTapGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, string commandPath, object commandSource, string parameterPath, object parameterSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindTapGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
        <MemberSignature Language="F#" Value="static member BindTapGesture : 'GestureElement * string * obj * string * obj -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.BindTapGesture (gestureElement, commandPath, commandSource, parameterPath, parameterSource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="commandPath" Type="System.String" />
          <Parameter Name="commandSource" Type="System.Object" />
          <Parameter Name="parameterPath" Type="System.String" />
          <Parameter Name="parameterSource" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="commandPath">To be added.</param>
          <param name="commandSource">To be added.</param>
          <param name="parameterPath">To be added.</param>
          <param name="parameterSource">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.BindTapGesture``1(``0,System.String,System.Object,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="ClickGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement ClickGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, Action&lt;Xamarin.Forms.ClickGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement ClickGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;class Xamarin.Forms.ClickGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.ClickGesture``1(``0,System.Action{Xamarin.Forms.ClickGestureRecognizer})" />
        <MemberSignature Language="F#" Value="static member ClickGesture : 'GestureElement * Action&lt;Xamarin.Forms.ClickGestureRecognizer&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.ClickGesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;Xamarin.Forms.ClickGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.ClickGesture``1(``0,System.Action{Xamarin.Forms.ClickGestureRecognizer})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="Gesture&lt;TGestureElement,TGestureRecognizer&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement Gesture&lt;TGestureElement,TGestureRecognizer&gt; (this TGestureElement gestureElement, Action&lt;TGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers where TGestureRecognizer : Xamarin.Forms.GestureRecognizernew();" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement Gesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement, .ctor (class Xamarin.Forms.GestureRecognizer) TGestureRecognizer&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;!!TGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.Gesture``2(``0,System.Action{``1})" />
        <MemberSignature Language="F#" Value="static member Gesture : 'GestureElement * Action&lt;'GestureRecognizer (requires 'GestureRecognizer :&gt; Xamarin.Forms.GestureRecognizer and 'GestureRecognizer : (new : unit -&gt; 'GestureRecognizer))&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers and 'GestureRecognizer :&gt; Xamarin.Forms.GestureRecognizer and 'GestureRecognizer : (new : unit -&gt; 'GestureRecognizer))" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.Gesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TGestureRecognizer">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Xamarin.Forms.GestureRecognizer</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;TGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <typeparam name="TGestureRecognizer">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.Gesture``2(``0,System.Action{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="PanGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement PanGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, Action&lt;Xamarin.Forms.PanGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement PanGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;class Xamarin.Forms.PanGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.PanGesture``1(``0,System.Action{Xamarin.Forms.PanGestureRecognizer})" />
        <MemberSignature Language="F#" Value="static member PanGesture : 'GestureElement * Action&lt;Xamarin.Forms.PanGestureRecognizer&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.PanGesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;Xamarin.Forms.PanGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.PanGesture``1(``0,System.Action{Xamarin.Forms.PanGestureRecognizer})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="PinchGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement PinchGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, Action&lt;Xamarin.Forms.PinchGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement PinchGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;class Xamarin.Forms.PinchGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.PinchGesture``1(``0,System.Action{Xamarin.Forms.PinchGestureRecognizer})" />
        <MemberSignature Language="F#" Value="static member PinchGesture : 'GestureElement * Action&lt;Xamarin.Forms.PinchGestureRecognizer&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.PinchGesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;Xamarin.Forms.PinchGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.PinchGesture``1(``0,System.Action{Xamarin.Forms.PinchGestureRecognizer})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="SwipeGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement SwipeGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, Action&lt;Xamarin.Forms.SwipeGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement SwipeGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;class Xamarin.Forms.SwipeGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.SwipeGesture``1(``0,System.Action{Xamarin.Forms.SwipeGestureRecognizer})" />
        <MemberSignature Language="F#" Value="static member SwipeGesture : 'GestureElement * Action&lt;Xamarin.Forms.SwipeGestureRecognizer&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.SwipeGesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;Xamarin.Forms.SwipeGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.SwipeGesture``1(``0,System.Action{Xamarin.Forms.SwipeGestureRecognizer})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
        <Target Type="T:Xamarin.Forms.IGestureRecognizers" />
      </Targets>
      <Member MemberName="TapGesture&lt;TGestureElement&gt;">
        <MemberSignature Language="C#" Value="public static TGestureElement TapGesture&lt;TGestureElement&gt; (this TGestureElement gestureElement, Action&lt;Xamarin.Forms.TapGestureRecognizer&gt; init) where TGestureElement : Xamarin.Forms.Element, Xamarin.Forms.IGestureRecognizers;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TGestureElement TapGesture&lt;(class Xamarin.Forms.Element, class Xamarin.Forms.IGestureRecognizers) TGestureElement&gt;(!!TGestureElement gestureElement, class System.Action`1&lt;class Xamarin.Forms.TapGestureRecognizer&gt; init) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ElementGesturesExtensions.TapGesture``1(``0,System.Action{Xamarin.Forms.TapGestureRecognizer})" />
        <MemberSignature Language="F#" Value="static member TapGesture : 'GestureElement * Action&lt;Xamarin.Forms.TapGestureRecognizer&gt; -&gt; 'GestureElement (requires 'GestureElement :&gt; Xamarin.Forms.Element and 'GestureElement :&gt; Xamarin.Forms.IGestureRecognizers)" Usage="Xamarin.Forms.Markup.ElementGesturesExtensions.TapGesture (gestureElement, init)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TGestureElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TGestureElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Element</BaseTypeName>
              <InterfaceName>Xamarin.Forms.IGestureRecognizers</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="gestureElement" Type="TGestureElement" RefType="this" />
          <Parameter Name="init" Type="System.Action&lt;Xamarin.Forms.TapGestureRecognizer&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TGestureElement">To be added.</typeparam>
          <param name="gestureElement">To be added.</param>
          <param name="init">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ElementGesturesExtensions" Member="M:Xamarin.Forms.Markup.ElementGesturesExtensions.TapGesture``1(``0,System.Action{Xamarin.Forms.TapGestureRecognizer})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="FormattedText&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel FormattedText&lt;TLabel&gt; (this TLabel label, params Xamarin.Forms.Span[] spans) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel FormattedText&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label, class Xamarin.Forms.Span[] spans) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.FormattedText``1(``0,Xamarin.Forms.Span[])" />
        <MemberSignature Language="F#" Value="static member FormattedText : 'Label * Xamarin.Forms.Span[] -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.FormattedText (label, spans)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
          <Parameter Name="spans" Type="Xamarin.Forms.Span[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <param name="spans">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.FormattedText``1(``0,Xamarin.Forms.Span[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextBottom&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextBottom&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextBottom&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextBottom``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextBottom : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextBottom label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextBottom``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextCenter&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextCenter&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextCenter&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextCenter``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextCenter : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextCenter label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextCenter``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextCenterHorizontal&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextCenterHorizontal&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextCenterHorizontal&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextCenterHorizontal``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextCenterHorizontal : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextCenterHorizontal label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextCenterHorizontal``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextCenterVertical&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextCenterVertical&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextCenterVertical&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextCenterVertical``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextCenterVertical : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextCenterVertical label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextCenterVertical``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextEnd&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextEnd&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextEnd&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextEnd``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextEnd : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextEnd label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextEnd``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextStart&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextStart&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextStart&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextStart``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextStart : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextStart label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextStart``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextTop&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextTop&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextTop&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LabelExtensions.TextTop``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextTop : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LabelExtensions.TextTop label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LabelExtensions" Member="M:Xamarin.Forms.Markup.LabelExtensions.TextTop``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Layout" />
      </Targets>
      <Member MemberName="Padding&lt;TLayout&gt;">
        <MemberSignature Language="C#" Value="public static TLayout Padding&lt;TLayout&gt; (this TLayout layout, double horizontalSize, double verticalSize) where TLayout : Xamarin.Forms.Layout;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLayout Padding&lt;(class Xamarin.Forms.Layout) TLayout&gt;(!!TLayout layout, float64 horizontalSize, float64 verticalSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LayoutExtensions.Padding``1(``0,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Padding : 'Layout * double * double -&gt; 'Layout (requires 'Layout :&gt; Xamarin.Forms.Layout)" Usage="Xamarin.Forms.Markup.LayoutExtensions.Padding (layout, horizontalSize, verticalSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLayout</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLayout">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Layout</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="layout" Type="TLayout" RefType="this" />
          <Parameter Name="horizontalSize" Type="System.Double" />
          <Parameter Name="verticalSize" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TLayout">To be added.</typeparam>
          <param name="layout">To be added.</param>
          <param name="horizontalSize">To be added.</param>
          <param name="verticalSize">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LayoutExtensions" Member="M:Xamarin.Forms.Markup.LayoutExtensions.Padding``1(``0,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Layout" />
      </Targets>
      <Member MemberName="Padding&lt;TLayout&gt;">
        <MemberSignature Language="C#" Value="public static TLayout Padding&lt;TLayout&gt; (this TLayout layout, Xamarin.Forms.Thickness padding) where TLayout : Xamarin.Forms.Layout;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLayout Padding&lt;(class Xamarin.Forms.Layout) TLayout&gt;(!!TLayout layout, valuetype Xamarin.Forms.Thickness padding) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LayoutExtensions.Padding``1(``0,Xamarin.Forms.Thickness)" />
        <MemberSignature Language="F#" Value="static member Padding : 'Layout * Xamarin.Forms.Thickness -&gt; 'Layout (requires 'Layout :&gt; Xamarin.Forms.Layout)" Usage="Xamarin.Forms.Markup.LayoutExtensions.Padding (layout, padding)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLayout</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLayout">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Layout</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="layout" Type="TLayout" RefType="this" />
          <Parameter Name="padding" Type="Xamarin.Forms.Thickness" />
        </Parameters>
        <Docs>
          <typeparam name="TLayout">To be added.</typeparam>
          <param name="layout">To be added.</param>
          <param name="padding">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LayoutExtensions" Member="M:Xamarin.Forms.Markup.LayoutExtensions.Padding``1(``0,Xamarin.Forms.Thickness)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Layout" />
      </Targets>
      <Member MemberName="Paddings&lt;TLayout&gt;">
        <MemberSignature Language="C#" Value="public static TLayout Paddings&lt;TLayout&gt; (this TLayout layout, double left = 0, double top = 0, double right = 0, double bottom = 0) where TLayout : Xamarin.Forms.Layout;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLayout Paddings&lt;(class Xamarin.Forms.Layout) TLayout&gt;(!!TLayout layout, float64 left, float64 top, float64 right, float64 bottom) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LayoutExtensions.Paddings``1(``0,System.Double,System.Double,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Paddings : 'Layout * double * double * double * double -&gt; 'Layout (requires 'Layout :&gt; Xamarin.Forms.Layout)" Usage="Xamarin.Forms.Markup.LayoutExtensions.Paddings (layout, left, top, right, bottom)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLayout</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLayout">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Layout</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="layout" Type="TLayout" RefType="this" />
          <Parameter Name="left" Type="System.Double" />
          <Parameter Name="top" Type="System.Double" />
          <Parameter Name="right" Type="System.Double" />
          <Parameter Name="bottom" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TLayout">To be added.</typeparam>
          <param name="layout">To be added.</param>
          <param name="left">To be added.</param>
          <param name="top">To be added.</param>
          <param name="right">To be added.</param>
          <param name="bottom">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LayoutExtensions" Member="M:Xamarin.Forms.Markup.LayoutExtensions.Paddings``1(``0,System.Double,System.Double,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextLeft&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextLeft&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextLeft&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextLeft``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextLeft : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextLeft label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.LabelExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextLeft``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextRight&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextRight&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextRight&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextRight``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextRight : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextRight label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.LabelExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.LabelExtensions.TextRight``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Left&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Left&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Left&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Left``1(``0)" />
        <MemberSignature Language="F#" Value="static member Left : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Left view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.ViewExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Left``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="LeftExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView LeftExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView LeftExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.LeftExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member LeftExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.LeftToRight.ViewExtensions.LeftExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.ViewExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.LeftExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Right&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Right&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Right&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Right``1(``0)" />
        <MemberSignature Language="F#" Value="static member Right : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Right view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.ViewExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.Right``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="RightExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView RightExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView RightExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.RightExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member RightExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.LeftToRight.ViewExtensions.RightExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.LeftToRight.ViewExtensions" Member="M:Xamarin.Forms.Markup.LeftToRight.ViewExtensions.RightExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextLeft&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextLeft&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextLeft&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextLeft``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextLeft : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextLeft label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.LabelExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextLeft``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Label" />
      </Targets>
      <Member MemberName="TextRight&lt;TLabel&gt;">
        <MemberSignature Language="C#" Value="public static TLabel TextRight&lt;TLabel&gt; (this TLabel label) where TLabel : Xamarin.Forms.Label;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TLabel TextRight&lt;(class Xamarin.Forms.Label) TLabel&gt;(!!TLabel label) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextRight``1(``0)" />
        <MemberSignature Language="F#" Value="static member TextRight : 'Label -&gt; 'Label (requires 'Label :&gt; Xamarin.Forms.Label)" Usage="Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextRight label" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TLabel</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLabel">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.Label</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="label" Type="TLabel" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TLabel">To be added.</typeparam>
          <param name="label">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.LabelExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.LabelExtensions.TextRight``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Left&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Left&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Left&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Left``1(``0)" />
        <MemberSignature Language="F#" Value="static member Left : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Left view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.ViewExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Left``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="LeftExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView LeftExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView LeftExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.LeftExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member LeftExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.RightToLeft.ViewExtensions.LeftExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.ViewExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.LeftExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Right&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Right&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Right&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Right``1(``0)" />
        <MemberSignature Language="F#" Value="static member Right : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Right view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.ViewExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.Right``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="RightExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView RightExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView RightExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.RightExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member RightExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.RightToLeft.ViewExtensions.RightExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.RightToLeft.ViewExtensions" Member="M:Xamarin.Forms.Markup.RightToLeft.ViewExtensions.RightExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Bottom&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Bottom&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Bottom&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Bottom``1(``0)" />
        <MemberSignature Language="F#" Value="static member Bottom : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Bottom view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Bottom``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="BottomExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView BottomExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView BottomExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.BottomExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member BottomExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.BottomExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.BottomExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Center&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Center&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Center&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Center``1(``0)" />
        <MemberSignature Language="F#" Value="static member Center : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Center view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Center``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="CenterExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView CenterExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView CenterExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member CenterExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.CenterExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="CenterExpandHorizontal&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView CenterExpandHorizontal&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView CenterExpandHorizontal&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpandHorizontal``1(``0)" />
        <MemberSignature Language="F#" Value="static member CenterExpandHorizontal : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.CenterExpandHorizontal view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpandHorizontal``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="CenterExpandVertical&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView CenterExpandVertical&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView CenterExpandVertical&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpandVertical``1(``0)" />
        <MemberSignature Language="F#" Value="static member CenterExpandVertical : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.CenterExpandVertical view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.CenterExpandVertical``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="CenterHorizontal&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView CenterHorizontal&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView CenterHorizontal&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.CenterHorizontal``1(``0)" />
        <MemberSignature Language="F#" Value="static member CenterHorizontal : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.CenterHorizontal view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.CenterHorizontal``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="CenterVertical&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView CenterVertical&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView CenterVertical&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.CenterVertical``1(``0)" />
        <MemberSignature Language="F#" Value="static member CenterVertical : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.CenterVertical view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.CenterVertical``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="End&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView End&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView End&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.End``1(``0)" />
        <MemberSignature Language="F#" Value="static member End : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.End view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.End``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="EndExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView EndExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView EndExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.EndExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member EndExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.EndExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.EndExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Fill&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Fill&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Fill&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Fill``1(``0)" />
        <MemberSignature Language="F#" Value="static member Fill : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Fill view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Fill``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="FillExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView FillExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView FillExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.FillExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member FillExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.FillExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.FillExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="FillExpandHorizontal&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView FillExpandHorizontal&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView FillExpandHorizontal&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.FillExpandHorizontal``1(``0)" />
        <MemberSignature Language="F#" Value="static member FillExpandHorizontal : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.FillExpandHorizontal view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.FillExpandHorizontal``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="FillExpandVertical&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView FillExpandVertical&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView FillExpandVertical&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.FillExpandVertical``1(``0)" />
        <MemberSignature Language="F#" Value="static member FillExpandVertical : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.FillExpandVertical view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.FillExpandVertical``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="FillHorizontal&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView FillHorizontal&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView FillHorizontal&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.FillHorizontal``1(``0)" />
        <MemberSignature Language="F#" Value="static member FillHorizontal : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.FillHorizontal view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.FillHorizontal``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="FillVertical&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView FillVertical&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView FillVertical&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.FillVertical``1(``0)" />
        <MemberSignature Language="F#" Value="static member FillVertical : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.FillVertical view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.FillVertical``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Margin&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Margin&lt;TView&gt; (this TView view, double horizontal, double vertical) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Margin&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, float64 horizontal, float64 vertical) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Margin``1(``0,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Margin : 'View * double * double -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Margin (view, horizontal, vertical)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="horizontal" Type="System.Double" />
          <Parameter Name="vertical" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="horizontal">To be added.</param>
          <param name="vertical">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Margin``1(``0,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Margin&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Margin&lt;TView&gt; (this TView view, Xamarin.Forms.Thickness margin) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Margin&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, valuetype Xamarin.Forms.Thickness margin) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Margin``1(``0,Xamarin.Forms.Thickness)" />
        <MemberSignature Language="F#" Value="static member Margin : 'View * Xamarin.Forms.Thickness -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Margin (view, margin)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="margin" Type="Xamarin.Forms.Thickness" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="margin">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Margin``1(``0,Xamarin.Forms.Thickness)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Margins&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Margins&lt;TView&gt; (this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Margins&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, float64 left, float64 top, float64 right, float64 bottom) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Margins``1(``0,System.Double,System.Double,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Margins : 'View * double * double * double * double -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Margins (view, left, top, right, bottom)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="left" Type="System.Double" />
          <Parameter Name="top" Type="System.Double" />
          <Parameter Name="right" Type="System.Double" />
          <Parameter Name="bottom" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="left">To be added.</param>
          <param name="top">To be added.</param>
          <param name="right">To be added.</param>
          <param name="bottom">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Margins``1(``0,System.Double,System.Double,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Start&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Start&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Start&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Start``1(``0)" />
        <MemberSignature Language="F#" Value="static member Start : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Start view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Start``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="StartExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView StartExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView StartExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.StartExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member StartExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.StartExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.StartExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Top&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Top&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Top&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.Top``1(``0)" />
        <MemberSignature Language="F#" Value="static member Top : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.Top view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.Top``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="TopExpand&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView TopExpand&lt;TView&gt; (this TView view) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView TopExpand&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewExtensions.TopExpand``1(``0)" />
        <MemberSignature Language="F#" Value="static member TopExpand : 'View -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewExtensions.TopExpand view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewExtensions" Member="M:Xamarin.Forms.Markup.ViewExtensions.TopExpand``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="AlignSelf&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView AlignSelf&lt;TView&gt; (this TView view, Xamarin.Forms.FlexAlignSelf value) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView AlignSelf&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, valuetype Xamarin.Forms.FlexAlignSelf value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.AlignSelf``1(``0,Xamarin.Forms.FlexAlignSelf)" />
        <MemberSignature Language="F#" Value="static member AlignSelf : 'View * Xamarin.Forms.FlexAlignSelf -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.AlignSelf (view, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.FlexAlignSelf" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions" Member="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.AlignSelf``1(``0,Xamarin.Forms.FlexAlignSelf)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Basis&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Basis&lt;TView&gt; (this TView view, Xamarin.Forms.FlexBasis value) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Basis&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, valuetype Xamarin.Forms.FlexBasis value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Basis``1(``0,Xamarin.Forms.FlexBasis)" />
        <MemberSignature Language="F#" Value="static member Basis : 'View * Xamarin.Forms.FlexBasis -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Basis (view, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.FlexBasis" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions" Member="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Basis``1(``0,Xamarin.Forms.FlexBasis)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Grow&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Grow&lt;TView&gt; (this TView view, float value) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Grow&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, float32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Grow``1(``0,System.Single)" />
        <MemberSignature Language="F#" Value="static member Grow : 'View * single -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Grow (view, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions" Member="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Grow``1(``0,System.Single)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Order&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Order&lt;TView&gt; (this TView view, int value) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Order&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Order``1(``0,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Order : 'View * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Order (view, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="value" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions" Member="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Order``1(``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Shrink&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Shrink&lt;TView&gt; (this TView view, float value) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Shrink&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, float32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Shrink``1(``0,System.Single)" />
        <MemberSignature Language="F#" Value="static member Shrink : 'View * single -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Shrink (view, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInFlexLayoutExtensions" Member="M:Xamarin.Forms.Markup.ViewInFlexLayoutExtensions.Shrink``1(``0,System.Single)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Column&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Column&lt;TView&gt; (this TView view, int column) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Column&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``1(``0,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Column : 'View * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Column (view, column)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="column" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``1(``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Column&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Column&lt;TView&gt; (this TView view, int column, int span) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Column&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 column, int32 span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``1(``0,System.Int32,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Column : 'View * int * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Column (view, column, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="column" Type="System.Int32" />
          <Parameter Name="span" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="column">To be added.</param>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``1(``0,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Column&lt;TView,TColumn&gt;">
        <MemberSignature Language="C#" Value="public static TView Column&lt;TView,TColumn&gt; (this TView view, TColumn column) where TView : Xamarin.Forms.View where TColumn : Enum;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Column&lt;(class Xamarin.Forms.View) TView, (class System.Enum) TColumn&gt;(!!TView view, !!TColumn column) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``2(``0,``1)" />
        <MemberSignature Language="F#" Value="static member Column : 'View * 'Column -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View and 'Column :&gt; Enum)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Column (view, column)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TColumn">
            <Constraints>
              <BaseTypeName>System.Enum</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="column" Type="TColumn" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <typeparam name="TColumn">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``2(``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Column&lt;TView,TColumn&gt;">
        <MemberSignature Language="C#" Value="public static TView Column&lt;TView,TColumn&gt; (this TView view, TColumn first, TColumn last) where TView : Xamarin.Forms.View where TColumn : Enum;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Column&lt;(class Xamarin.Forms.View) TView, (class System.Enum) TColumn&gt;(!!TView view, !!TColumn first, !!TColumn last) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``2(``0,``1,``1)" />
        <MemberSignature Language="F#" Value="static member Column : 'View * 'Column * 'Column -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View and 'Column :&gt; Enum)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Column (view, first, last)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TColumn">
            <Constraints>
              <BaseTypeName>System.Enum</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="first" Type="TColumn" />
          <Parameter Name="last" Type="TColumn" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <typeparam name="TColumn">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="first">To be added.</param>
          <param name="last">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Column``2(``0,``1,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="ColumnSpan&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView ColumnSpan&lt;TView&gt; (this TView view, int span) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView ColumnSpan&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.ColumnSpan``1(``0,System.Int32)" />
        <MemberSignature Language="F#" Value="static member ColumnSpan : 'View * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.ColumnSpan (view, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="span" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.ColumnSpan``1(``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Row&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Row&lt;TView&gt; (this TView view, int row) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Row&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 row) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``1(``0,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Row : 'View * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Row (view, row)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="row" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="row">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``1(``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Row&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView Row&lt;TView&gt; (this TView view, int row, int span) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Row&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 row, int32 span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``1(``0,System.Int32,System.Int32)" />
        <MemberSignature Language="F#" Value="static member Row : 'View * int * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Row (view, row, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="row" Type="System.Int32" />
          <Parameter Name="span" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="row">To be added.</param>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``1(``0,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Row&lt;TView,TRow&gt;">
        <MemberSignature Language="C#" Value="public static TView Row&lt;TView,TRow&gt; (this TView view, TRow row) where TView : Xamarin.Forms.View where TRow : Enum;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Row&lt;(class Xamarin.Forms.View) TView, (class System.Enum) TRow&gt;(!!TView view, !!TRow row) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``2(``0,``1)" />
        <MemberSignature Language="F#" Value="static member Row : 'View * 'Row -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View and 'Row :&gt; Enum)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Row (view, row)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Enum</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="row" Type="TRow" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="row">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``2(``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="Row&lt;TView,TRow&gt;">
        <MemberSignature Language="C#" Value="public static TView Row&lt;TView,TRow&gt; (this TView view, TRow first, TRow last) where TView : Xamarin.Forms.View where TRow : Enum;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView Row&lt;(class Xamarin.Forms.View) TView, (class System.Enum) TRow&gt;(!!TView view, !!TRow first, !!TRow last) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``2(``0,``1,``1)" />
        <MemberSignature Language="F#" Value="static member Row : 'View * 'Row * 'Row -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View and 'Row :&gt; Enum)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.Row (view, first, last)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Enum</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="first" Type="TRow" />
          <Parameter Name="last" Type="TRow" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="first">To be added.</param>
          <param name="last">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.Row``2(``0,``1,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.View" />
      </Targets>
      <Member MemberName="RowSpan&lt;TView&gt;">
        <MemberSignature Language="C#" Value="public static TView RowSpan&lt;TView&gt; (this TView view, int span) where TView : Xamarin.Forms.View;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TView RowSpan&lt;(class Xamarin.Forms.View) TView&gt;(!!TView view, int32 span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.ViewInGridExtensions.RowSpan``1(``0,System.Int32)" />
        <MemberSignature Language="F#" Value="static member RowSpan : 'View * int -&gt; 'View (requires 'View :&gt; Xamarin.Forms.View)" Usage="Xamarin.Forms.Markup.ViewInGridExtensions.RowSpan (view, span)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TView">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TView" RefType="this" />
          <Parameter Name="span" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TView">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.ViewInGridExtensions" Member="M:Xamarin.Forms.Markup.ViewInGridExtensions.RowSpan``1(``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="Height&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement Height&lt;TElement&gt; (this TElement element, double request) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement Height&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.Height``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member Height : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.Height (element, request)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="request" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.Height``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="MinHeight&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement MinHeight&lt;TElement&gt; (this TElement element, double request) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement MinHeight&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.MinHeight``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member MinHeight : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.MinHeight (element, request)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="request" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.MinHeight``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="MinSize&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement MinSize&lt;TElement&gt; (this TElement element, double sizeRequest) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement MinSize&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 sizeRequest) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.MinSize``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member MinSize : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.MinSize (element, sizeRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="sizeRequest" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="sizeRequest">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.MinSize``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="MinSize&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement MinSize&lt;TElement&gt; (this TElement element, double widthRequest, double heightRequest) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement MinSize&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 widthRequest, float64 heightRequest) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.MinSize``1(``0,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member MinSize : 'Element * double * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.MinSize (element, widthRequest, heightRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="widthRequest" Type="System.Double" />
          <Parameter Name="heightRequest" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="widthRequest">To be added.</param>
          <param name="heightRequest">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.MinSize``1(``0,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="MinWidth&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement MinWidth&lt;TElement&gt; (this TElement element, double request) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement MinWidth&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.MinWidth``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member MinWidth : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.MinWidth (element, request)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="request" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.MinWidth``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="Size&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement Size&lt;TElement&gt; (this TElement element, double sizeRequest) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement Size&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 sizeRequest) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.Size``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member Size : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.Size (element, sizeRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="sizeRequest" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="sizeRequest">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.Size``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="Size&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement Size&lt;TElement&gt; (this TElement element, double widthRequest, double heightRequest) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement Size&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 widthRequest, float64 heightRequest) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.Size``1(``0,System.Double,System.Double)" />
        <MemberSignature Language="F#" Value="static member Size : 'Element * double * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.Size (element, widthRequest, heightRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="widthRequest" Type="System.Double" />
          <Parameter Name="heightRequest" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="widthRequest">To be added.</param>
          <param name="heightRequest">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.Size``1(``0,System.Double,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="Style&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Style&lt;T&gt; (this T view, Xamarin.Forms.Markup.Style&lt;T&gt; style) where T : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Style&lt;(class Xamarin.Forms.VisualElement) T&gt;(!!T view, class Xamarin.Forms.Markup.Style`1&lt;!!T&gt; style) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.Style``1(``0,Xamarin.Forms.Markup.Style{``0})" />
        <MemberSignature Language="F#" Value="static member Style : 'T * Xamarin.Forms.Markup.Style&lt;'T (requires 'T :&gt; Xamarin.Forms.VisualElement)&gt; -&gt; 'T (requires 'T :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.Style (view, style)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="T" RefType="this" />
          <Parameter Name="style" Type="Xamarin.Forms.Markup.Style&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="view">To be added.</param>
          <param name="style">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.Style``1(``0,Xamarin.Forms.Markup.Style{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="Width&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static TElement Width&lt;TElement&gt; (this TElement element, double request) where TElement : Xamarin.Forms.VisualElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TElement Width&lt;(class Xamarin.Forms.VisualElement) TElement&gt;(!!TElement element, float64 request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Markup.VisualElementExtensions.Width``1(``0,System.Double)" />
        <MemberSignature Language="F#" Value="static member Width : 'Element * double -&gt; 'Element (requires 'Element :&gt; Xamarin.Forms.VisualElement)" Usage="Xamarin.Forms.Markup.VisualElementExtensions.Width (element, request)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TElement</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement">
            <Constraints>
              <BaseTypeName>Xamarin.Forms.VisualElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="TElement" RefType="this" />
          <Parameter Name="request" Type="System.Double" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Markup.VisualElementExtensions" Member="M:Xamarin.Forms.Markup.VisualElementExtensions.Width``1(``0,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.Element" />
      </Targets>
      <Member MemberName="FindByName&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindByName&lt;T&gt; (this Xamarin.Forms.Element element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindByName&lt;T&gt;(class Xamarin.Forms.Element element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.NameScopeExtensions.FindByName``1(Xamarin.Forms.Element,System.String)" />
        <MemberSignature Language="F#" Value="static member FindByName : Xamarin.Forms.Element * string -&gt; 'T" Usage="Xamarin.Forms.NameScopeExtensions.FindByName (element, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Xamarin.Forms.Element" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of instance to find.</typeparam>
          <param name="element">An element in the scope to search.</param>
          <param name="name">The name of the element to find.</param>
          <summary>Returns the instance of type <paramref name="T" /> that has name <paramref name="name" /> in the scope that includes <paramref name="element" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.NameScopeExtensions" Member="M:Xamarin.Forms.NameScopeExtensions.FindByName``1(Xamarin.Forms.Element,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSendAppearingEventOnResume">
        <MemberSignature Language="C#" Value="public static bool GetSendAppearingEventOnResume (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetSendAppearingEventOnResume(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendAppearingEventOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetSendAppearingEventOnResume : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendAppearingEventOnResume config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the appearing event is sent when the application resumes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendAppearingEventOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSendDisappearingEventOnPause">
        <MemberSignature Language="C#" Value="public static bool GetSendDisappearingEventOnPause (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetSendDisappearingEventOnPause(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendDisappearingEventOnPause(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetSendDisappearingEventOnPause : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendDisappearingEventOnPause config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the disappearing event is sent when the application is paused.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetSendDisappearingEventOnPause(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShouldPreserveKeyboardOnResume">
        <MemberSignature Language="C#" Value="public static bool GetShouldPreserveKeyboardOnResume (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetShouldPreserveKeyboardOnResume(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetShouldPreserveKeyboardOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetShouldPreserveKeyboardOnResume : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetShouldPreserveKeyboardOnResume config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the keyboard state should be preserved when the application resumes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.GetShouldPreserveKeyboardOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SendAppearingEventOnResume">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; SendAppearingEventOnResume (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; SendAppearingEventOnResume(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendAppearingEventOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SendAppearingEventOnResume : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendAppearingEventOnResume (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether the appearing event is sent when the application resumes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendAppearingEventOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SendDisappearingEventOnPause">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; SendDisappearingEventOnPause (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; SendDisappearingEventOnPause(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendDisappearingEventOnPause(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SendDisappearingEventOnPause : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendDisappearingEventOnPause (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a Boolean value that controls whether the disappearing event is sent when the application is paused.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.SendDisappearingEventOnPause(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ShouldPreserveKeyboardOnResume">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; ShouldPreserveKeyboardOnResume (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; ShouldPreserveKeyboardOnResume(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.ShouldPreserveKeyboardOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member ShouldPreserveKeyboardOnResume : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.ShouldPreserveKeyboardOnResume (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a Boolean value that controls whether the keyboard state should be preserved when the application resumes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.Application.ShouldPreserveKeyboardOnResume(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBarHeight">
        <MemberSignature Language="C#" Value="public static int GetBarHeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetBarHeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.GetBarHeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member GetBarHeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.NavigationPage&gt; -&gt; int" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.GetBarHeight config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose bar height to get.</param>
          <summary>Gets the navigation bar height for the specified <paramref name="element" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.GetBarHeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBarHeight">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt; SetBarHeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt; config, int value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.NavigationPage&gt; SetBarHeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.NavigationPage&gt; config, int32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.SetBarHeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage},System.Int32)" />
        <MemberSignature Language="F#" Value="static member SetBarHeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.NavigationPage&gt; * int -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.SetBarHeight (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose bar height to set.</param>
          <param name="value">The new bar height value.</param>
          <summary>Sets the new bar height value for the element and returns a fluid API object.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.AppCompat.NavigationPage.SetBarHeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.NavigationPage},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetWindowSoftInputModeAdjust">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust GetWindowSoftInputModeAdjust (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust GetWindowSoftInputModeAdjust(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.GetWindowSoftInputModeAdjust(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetWindowSoftInputModeAdjust : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; -&gt; Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.GetWindowSoftInputModeAdjust config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that tells whether the soft input mode of the provided platform configuration pans or resizes its content to allow the display of the on-screen input UI.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.GetWindowSoftInputModeAdjust(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UseWindowSoftInputModeAdjust">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; UseWindowSoftInputModeAdjust (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt; config, Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; UseWindowSoftInputModeAdjust(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Application&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.UseWindowSoftInputModeAdjust(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust)" />
        <MemberSignature Language="F#" Value="static member UseWindowSoftInputModeAdjust : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt; * Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.UseWindowSoftInputModeAdjust (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether the soft input mode of the provided platform configuration pans or resizes its content to allow the display of the on-screen input UI.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Application.UseWindowSoftInputModeAdjust(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Application},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WindowSoftInputModeAdjust)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUseDefaultPadding">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; SetUseDefaultPadding (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; SetUseDefaultPadding(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultPadding(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetUseDefaultPadding : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultPadding (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The configuration for the Android button whose padding behavior to set.</param>
          <param name="value">
            <see langword="true" /> to use the default padding. Otherwise, <see langword="false" /></param>
          <summary>Sets a Boolean value that controls whether the button will use the default padding.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultPadding(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUseDefaultShadow">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; SetUseDefaultShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; SetUseDefaultShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetUseDefaultShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultShadow (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The configuration for the Android button whose shadow behavior to set.</param>
          <param name="value">
            <see langword="true" /> to use the default shadow. Otherwise, <see langword="false" /></param>
          <summary>Sets a Boolean value that controls whether the button will use the default shadow.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.SetUseDefaultShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UseDefaultPadding">
        <MemberSignature Language="C#" Value="public static bool UseDefaultPadding (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UseDefaultPadding(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultPadding(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button})" />
        <MemberSignature Language="F#" Value="static member UseDefaultPadding : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultPadding config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The configuration for the Android button whose padding behavior to check.</param>
          <summary>Returns <see langword="true" /> if the button will use the default padding. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultPadding(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UseDefaultShadow">
        <MemberSignature Language="C#" Value="public static bool UseDefaultShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UseDefaultShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Button&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button})" />
        <MemberSignature Language="F#" Value="static member UseDefaultShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Button&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultShadow config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The configuration for the Android button whose shadow behavior to check.</param>
          <summary>Returns <see langword="true" /> if the button will use the default shadow. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Button.UseDefaultShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Button})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ImeOptions">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags ImeOptions (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags ImeOptions(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.ImeOptions(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member ImeOptions : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Entry&gt; -&gt; Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.ImeOptions config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the Android entry for which to get the input method editor options.</param>
          <summary>Returns flags that specify input method editor options, such as the kind of action that is sent by the editor.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.ImeOptions(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetImeOptions">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt; SetImeOptions (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt; config, Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Entry&gt; SetImeOptions(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Entry&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.SetImeOptions(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags)" />
        <MemberSignature Language="F#" Value="static member SetImeOptions : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Entry&gt; * Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.SetImeOptions (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the Android entry for which to set the input method editor options.</param>
          <param name="value">The new options to set.</param>
          <summary>Sets the attached property that specifies input method editor options</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.Entry.SetImeOptions(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Entry},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImeFlags)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsShadowEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsShadowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsShadowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
        <MemberSignature Language="F#" Value="static member GetIsShadowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetIsShadowEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetShadowColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetShadowColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
        <MemberSignature Language="F#" Value="static member GetShadowColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Size GetShadowOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Size GetShadowOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
        <MemberSignature Language="F#" Value="static member GetShadowOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; -&gt; Xamarin.Forms.Size" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowOffset config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Size</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowRadius">
        <MemberSignature Language="C#" Value="public static double GetShadowRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetShadowRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
        <MemberSignature Language="F#" Value="static member GetShadowRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowRadius config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.GetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsShadowEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; SetIsShadowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; SetIsShadowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsShadowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetIsShadowEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; SetShadowColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; SetShadowColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetShadowColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; SetShadowOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config, Xamarin.Forms.Size value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; SetShadowOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config, valuetype Xamarin.Forms.Size value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},Xamarin.Forms.Size)" />
        <MemberSignature Language="F#" Value="static member SetShadowOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; * Xamarin.Forms.Size -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowOffset (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Size" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},Xamarin.Forms.Size)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowRadius">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; SetShadowRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; SetShadowRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ImageButton&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},System.Double)" />
        <MemberSignature Language="F#" Value="static member SetShadowRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ImageButton&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowRadius (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ImageButton.SetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ImageButton},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsFastScrollEnabled">
        <MemberSignature Language="C#" Value="public static bool IsFastScrollEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFastScrollEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ListView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.IsFastScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView})" />
        <MemberSignature Language="F#" Value="static member IsFastScrollEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ListView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.IsFastScrollEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether fast scrolling is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.IsFastScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsFastScrollEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt; SetIsFastScrollEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ListView&gt; SetIsFastScrollEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.ListView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.SetIsFastScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsFastScrollEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ListView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.ListView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.SetIsFastScrollEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets the attached property that controls whether fast scrolling is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ListView.SetIsFastScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.ListView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSwipeTransitionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode GetSwipeTransitionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode GetSwipeTransitionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.SwipeView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.GetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView})" />
        <MemberSignature Language="F#" Value="static member GetSwipeTransitionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.SwipeView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.GetSwipeTransitionMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.GetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSwipeTransitionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt; SetSwipeTransitionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt; config, Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.SwipeView&gt; SetSwipeTransitionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.SwipeView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.SetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode)" />
        <MemberSignature Language="F#" Value="static member SetSwipeTransitionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.SwipeView&gt; * Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.SwipeView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.SetSwipeTransitionMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeView.SetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.SwipeView},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.SwipeTransitionMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableSmoothScroll">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; DisableSmoothScroll (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; DisableSmoothScroll(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSmoothScroll(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member DisableSmoothScroll : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSmoothScroll config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>Turns off smooth scrolling for <c>this</c><see cref="T:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSmoothScroll(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableSwipePaging">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; DisableSwipePaging (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; DisableSwipePaging(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSwipePaging(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member DisableSwipePaging : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSwipePaging config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Disables swiped paging.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.DisableSwipePaging(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableSmoothScroll">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; EnableSmoothScroll (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; EnableSmoothScroll(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSmoothScroll(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member EnableSmoothScroll : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSmoothScroll config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>Turns on smooth scrolling for <c>this</c><see cref="T:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSmoothScroll(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableSwipePaging">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; EnableSwipePaging (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; EnableSwipePaging(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSwipePaging(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member EnableSwipePaging : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSwipePaging config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Enables swiped paging.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.EnableSwipePaging(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBarItemColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetBarItemColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetBarItemColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetBarItemColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarItemColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration for the element on which to perform the operation.</param>
          <summary>Returns the color for bar items.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBarSelectedItemColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetBarSelectedItemColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetBarSelectedItemColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarSelectedItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetBarSelectedItemColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarSelectedItemColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration for the element on which to perform the operation.</param>
          <summary>Returns the color for selected bar items.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetBarSelectedItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetMaxItemCount">
        <MemberSignature Language="C#" Value="public static int GetMaxItemCount (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxItemCount(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetMaxItemCount(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetMaxItemCount : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; int" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetMaxItemCount config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration for the element on which to perform the operation.</param>
          <summary>Returns the maximum allowed number of items.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetMaxItemCount(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetToolbarPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement GetToolbarPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement GetToolbarPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetToolbarPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetToolbarPlacement config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration for the element on which to perform the operation.</param>
          <summary>Returns the toolbar placement.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.GetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsSmoothScrollEnabled">
        <MemberSignature Language="C#" Value="public static bool IsSmoothScrollEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSmoothScrollEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSmoothScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member IsSmoothScrollEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSmoothScrollEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>Gets whether smooth scrolling is enabled for <c>this</c><see cref="T:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSmoothScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsSwipePagingEnabled">
        <MemberSignature Language="C#" Value="public static bool IsSwipePagingEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSwipePagingEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSwipePagingEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member IsSwipePagingEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSwipePagingEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets a Boolean value that controls whether swipe paging is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.IsSwipePagingEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="OffscreenPageLimit">
        <MemberSignature Language="C#" Value="public static int OffscreenPageLimit (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 OffscreenPageLimit(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.OffscreenPageLimit(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member OffscreenPageLimit : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; -&gt; int" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.OffscreenPageLimit config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the number of offscreen pages are cached in memory.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.OffscreenPageLimit(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBarItemColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetBarItemColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetBarItemColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetBarItemColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarItemColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose value to set.</param>
          <param name="value">The new bar item color value.</param>
          <summary>Sets the color for bar items.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBarSelectedItemColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetBarSelectedItemColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetBarSelectedItemColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarSelectedItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetBarSelectedItemColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarSelectedItemColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the platform specific element whose value to set.</param>
          <param name="value">The new selected item color value.</param>
          <summary>Sets the color for selected bar items.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetBarSelectedItemColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsSmoothScrollEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetIsSmoothScrollEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetIsSmoothScrollEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSmoothScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsSmoothScrollEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSmoothScrollEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">
            <c>this</c>
          </param>
          <param name="value">
            <see langword="true" /> if smooth scrolling should be enabled.</param>
          <summary>Enables or disables smooth scrolling on <c>this</c><see cref="T:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSmoothScrollEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsSwipePagingEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetIsSwipePagingEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetIsSwipePagingEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSwipePagingEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsSwipePagingEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSwipePagingEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether page swiping is enabled to the provided <paramref name="value" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetIsSwipePagingEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetOffscreenPageLimit">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetOffscreenPageLimit (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, int value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetOffscreenPageLimit(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, int32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetOffscreenPageLimit(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Int32)" />
        <MemberSignature Language="F#" Value="static member SetOffscreenPageLimit : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * int -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetOffscreenPageLimit (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets the number of off-screen pages that are stored in memory to the provided <paramref name="value" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetOffscreenPageLimit(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetToolbarPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; SetToolbarPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; SetToolbarPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement)" />
        <MemberSignature Language="F#" Value="static member SetToolbarPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetToolbarPlacement (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the platform specific element whose value to set.</param>
          <param name="value">The new toolbar placement value.</param>
          <summary>Sets the toolbar placement.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.TabbedPage.SetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ToolbarPlacement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsContextActionsLegacyModeEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsContextActionsLegacyModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsContextActionsLegacyModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Cell&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.GetIsContextActionsLegacyModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell})" />
        <MemberSignature Language="F#" Value="static member GetIsContextActionsLegacyModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Cell&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.GetIsContextActionsLegacyModeEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.GetIsContextActionsLegacyModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsContextActionsLegacyModeEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt; SetIsContextActionsLegacyModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Cell&gt; SetIsContextActionsLegacyModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.Cell&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.SetIsContextActionsLegacyModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsContextActionsLegacyModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Cell&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.Cell&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.SetIsContextActionsLegacyModeEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.ViewCell.SetIsContextActionsLegacyModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.Cell},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetElevation">
        <MemberSignature Language="C#" Value="public static float? GetElevation (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; GetElevation(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetElevation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetElevation : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt; -&gt; Nullable&lt;single&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetElevation config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element on the Android platform whose elevation to get.</param>
          <summary>Gets the elevation for the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetElevation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetIsLegacyColorModeEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element on the Android platform whose legacy color mode status to get.</param>
          <summary>Gets a Boolean value that tells whether the legacy color mode is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetElevation">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; SetElevation (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; config, float? value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; SetElevation(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; config, valuetype System.Nullable`1&lt;float32&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetElevation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement},System.Nullable{System.Single})" />
        <MemberSignature Language="F#" Value="static member SetElevation : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt; * Nullable&lt;single&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetElevation (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Nullable&lt;System.Single&gt;" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element on the Android platform whose legacy color mode status to set.</param>
          <param name="value">
            <see langword="true" /> to enable legacy color mode. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether the legacy color mode is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetElevation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement},System.Nullable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetIsLegacyColorModeEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element on the Android platform whose elevation to set.</param>
          <param name="value">The new elevation value.</param>
          <summary>Sets the elevation for the visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisplayZoomControls">
        <MemberSignature Language="C#" Value="public static void DisplayZoomControls (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisplayZoomControls(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.DisplayZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member DisplayZoomControls : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; * bool -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.DisplayZoomControls (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.DisplayZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableZoomControls">
        <MemberSignature Language="C#" Value="public static void EnableZoomControls (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableZoomControls(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.EnableZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member EnableZoomControls : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; * bool -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.EnableZoomControls (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.EnableZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MixedContentMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling MixedContentMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling MixedContentMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.MixedContentMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
        <MemberSignature Language="F#" Value="static member MixedContentMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.MixedContentMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the Android web view for which to get the loading behavior for content that is a mix of secure and insecure content.</param>
          <summary>Gets the mixed content loading behavior.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.MixedContentMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetDisplayZoomControls">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; SetDisplayZoomControls (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; SetDisplayZoomControls(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetDisplayZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetDisplayZoomControls : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetDisplayZoomControls (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetDisplayZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetEnableZoomControls">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; SetEnableZoomControls (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; SetEnableZoomControls(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetEnableZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetEnableZoomControls : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetEnableZoomControls (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetEnableZoomControls(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetMixedContentMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; SetMixedContentMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config, Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; SetMixedContentMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetMixedContentMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling)" />
        <MemberSignature Language="F#" Value="static member SetMixedContentMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; * Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetMixedContentMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the Android web view for which to set the loading behavior for content that is a mix of secure and insecure content.</param>
          <param name="value">The new mixed content mode.</param>
          <summary>Sets the mixed content mode for the web view.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.SetMixedContentMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView},Xamarin.Forms.PlatformConfiguration.AndroidSpecific.MixedContentHandling)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ZoomControlsDisplayed">
        <MemberSignature Language="C#" Value="public static bool ZoomControlsDisplayed (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ZoomControlsDisplayed(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsDisplayed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
        <MemberSignature Language="F#" Value="static member ZoomControlsDisplayed : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsDisplayed config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsDisplayed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ZoomControlsEnabled">
        <MemberSignature Language="C#" Value="public static bool ZoomControlsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ZoomControlsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Android, class Xamarin.Forms.WebView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
        <MemberSignature Language="F#" Value="static member ZoomControlsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android, Xamarin.Forms.WebView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.AndroidSpecific.WebView.ZoomControlsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Android,Xamarin.Forms.WebView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetHasCornerRadius">
        <MemberSignature Language="C#" Value="public static bool GetHasCornerRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetHasCornerRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.BoxView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.GetHasCornerRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView})" />
        <MemberSignature Language="F#" Value="static member GetHasCornerRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.BoxView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.GetHasCornerRadius config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the box view element on the GTK platform whose corner radius to get.</param>
          <summary>Returns a Boolean value that tells whether the box view has a corner radius set.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.GetHasCornerRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHasCornerRadius">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt; SetHasCornerRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.BoxView&gt; SetHasCornerRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.BoxView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.SetHasCornerRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetHasCornerRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.BoxView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.BoxView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.SetHasCornerRadius (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the  element on the GTK platform whose  to set.</param>
          <param name="value">The new corner radius presence value</param>
          <summary>Sets the corner radius presence.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.BoxView.SetHasCornerRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.BoxView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBackButtonIcon">
        <MemberSignature Language="C#" Value="public static string GetBackButtonIcon (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetBackButtonIcon(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.GetBackButtonIcon(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member GetBackButtonIcon : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.NavigationPage&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.GetBackButtonIcon config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the navigation page on the GTK platform whose back button icon to get.</param>
          <summary>Gets the path to the back button icon.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.GetBackButtonIcon(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBackButtonIcon">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt; SetBackButtonIcon (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.NavigationPage&gt; SetBackButtonIcon(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.NavigationPage&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.SetBackButtonIcon(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage},System.String)" />
        <MemberSignature Language="F#" Value="static member SetBackButtonIcon : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.NavigationPage&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.SetBackButtonIcon (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the navigation page on the GTK platform whose back button icon to set.</param>
          <param name="value">The new back button icon path.</param>
          <summary>Sets the path to the back button icon.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.NavigationPage.SetBackButtonIcon(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.NavigationPage},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetTabPosition">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition GetTabPosition (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition GetTabPosition(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.GetTabPosition(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetTabPosition : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.GetTabPosition config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the tabbed page on the GTK platform whose tab position to get.</param>
          <summary>Gets the tab position.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.GetTabPosition(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetTabPosition">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt; SetTabPosition (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.TabbedPage&gt; SetTabPosition(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.GTK, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.SetTabPosition(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition)" />
        <MemberSignature Language="F#" Value="static member SetTabPosition : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.SetTabPosition (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the tabbed page on the GTK platform whose tab position to set.</param>
          <param name="value">The new tab position.</param>
          <summary>Sets the tab position.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabbedPage.SetTabPosition(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.GTK,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.GTKSpecific.TabPosition)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetEnableAccessibilityScalingForNamedFontSizes">
        <MemberSignature Language="C#" Value="public static bool GetEnableAccessibilityScalingForNamedFontSizes (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetEnableAccessibilityScalingForNamedFontSizes(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetEnableAccessibilityScalingForNamedFontSizes(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetEnableAccessibilityScalingForNamedFontSizes : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetEnableAccessibilityScalingForNamedFontSizes config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether named font sizes should participate in the device's accessibility scaling.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetEnableAccessibilityScalingForNamedFontSizes(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetHandleControlUpdatesOnMainThread">
        <MemberSignature Language="C#" Value="public static bool GetHandleControlUpdatesOnMainThread (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetHandleControlUpdatesOnMainThread(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetHandleControlUpdatesOnMainThread(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetHandleControlUpdatesOnMainThread : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetHandleControlUpdatesOnMainThread config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetHandleControlUpdatesOnMainThread(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetPanGestureRecognizerShouldRecognizeSimultaneously">
        <MemberSignature Language="C#" Value="public static bool GetPanGestureRecognizerShouldRecognizeSimultaneously (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetPanGestureRecognizerShouldRecognizeSimultaneously(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetPanGestureRecognizerShouldRecognizeSimultaneously(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetPanGestureRecognizerShouldRecognizeSimultaneously : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetPanGestureRecognizerShouldRecognizeSimultaneously config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the pan gesture recognizer should participate in simultaneous recognition of gestures.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.GetPanGestureRecognizerShouldRecognizeSimultaneously(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetEnableAccessibilityScalingForNamedFontSizes">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; SetEnableAccessibilityScalingForNamedFontSizes (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; SetEnableAccessibilityScalingForNamedFontSizes(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetEnableAccessibilityScalingForNamedFontSizes(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetEnableAccessibilityScalingForNamedFontSizes : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetEnableAccessibilityScalingForNamedFontSizes (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">
            <see langword="true" /> for device's accessibility scaling. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether named font sizes should participate in the device's accessibility scaling.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetEnableAccessibilityScalingForNamedFontSizes(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHandleControlUpdatesOnMainThread">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; SetHandleControlUpdatesOnMainThread (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; SetHandleControlUpdatesOnMainThread(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetHandleControlUpdatesOnMainThread(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetHandleControlUpdatesOnMainThread : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetHandleControlUpdatesOnMainThread (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetHandleControlUpdatesOnMainThread(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPanGestureRecognizerShouldRecognizeSimultaneously">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; SetPanGestureRecognizerShouldRecognizeSimultaneously (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; SetPanGestureRecognizerShouldRecognizeSimultaneously(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetPanGestureRecognizerShouldRecognizeSimultaneously(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetPanGestureRecognizerShouldRecognizeSimultaneously : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetPanGestureRecognizerShouldRecognizeSimultaneously (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">
            <see langword="true" /> for simultaneous recognition. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether the pan gesture recognizer should participate in simultaneous recognition of gestures.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Application.SetPanGestureRecognizerShouldRecognizeSimultaneously(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DefaultBackgroundColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color DefaultBackgroundColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color DefaultBackgroundColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Cell&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.DefaultBackgroundColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell})" />
        <MemberSignature Language="F#" Value="static member DefaultBackgroundColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Cell&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.DefaultBackgroundColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.DefaultBackgroundColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetDefaultBackgroundColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt; SetDefaultBackgroundColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Cell&gt; SetDefaultBackgroundColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Cell&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.SetDefaultBackgroundColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetDefaultBackgroundColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Cell&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Cell&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.SetDefaultBackgroundColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Cell.SetDefaultBackgroundColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Cell},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt; SetUpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.DatePicker&gt; SetUpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.DatePicker&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
        <MemberSignature Language="F#" Value="static member SetUpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.DatePicker&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.DatePicker&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.SetUpdateMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.DatePicker&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker})" />
        <MemberSignature Language="F#" Value="static member UpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.DatePicker&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.UpdateMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.DatePicker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.DatePicker})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="AdjustsFontSizeToFitWidth">
        <MemberSignature Language="C#" Value="public static bool AdjustsFontSizeToFitWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AdjustsFontSizeToFitWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.AdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member AdjustsFontSizeToFitWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.AdjustsFontSizeToFitWidth config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the entry control automatically adjusts the font size.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.AdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableAdjustsFontSizeToFitWidth">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; DisableAdjustsFontSizeToFitWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; DisableAdjustsFontSizeToFitWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.DisableAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member DisableAdjustsFontSizeToFitWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.DisableAdjustsFontSizeToFitWidth config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Disables automatic font size adjustment on the platform-specific element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.DisableAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableAdjustsFontSizeToFitWidth">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; EnableAdjustsFontSizeToFitWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; EnableAdjustsFontSizeToFitWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.EnableAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member EnableAdjustsFontSizeToFitWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.EnableAdjustsFontSizeToFitWidth config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Enables automatic font size adjustment on the platform-specific element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.EnableAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetCursorColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetCursorColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetCursorColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.GetCursorColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member GetCursorColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.GetCursorColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose cursor color to get.</param>
          <summary>Gets the color of the cursor.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.GetCursorColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetAdjustsFontSizeToFitWidth">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; SetAdjustsFontSizeToFitWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; SetAdjustsFontSizeToFitWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetAdjustsFontSizeToFitWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetAdjustsFontSizeToFitWidth (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a Boolean value that tells whether automatic font size adjusmtent is enabled on the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetAdjustsFontSizeToFitWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetCursorColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; SetCursorColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; SetCursorColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Entry&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetCursorColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetCursorColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetCursorColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose cursor color to Set.</param>
          <param name="value">The new cursor color.</param>
          <summary>Sets the color of the cursor and returns a fluent object.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Entry.SetCursorColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Entry},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetApplyShadow">
        <MemberSignature Language="C#" Value="public static bool GetApplyShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetApplyShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.FlyoutPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.GetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage})" />
        <MemberSignature Language="F#" Value="static member GetApplyShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.FlyoutPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.GetApplyShadow config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.GetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetApplyShadow">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt; SetApplyShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.FlyoutPage&gt; SetApplyShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.FlyoutPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.SetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetApplyShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.FlyoutPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.FlyoutPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.SetApplyShadow (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.FlyoutPage.SetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.FlyoutPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetGroupHeaderStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle GetGroupHeaderStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle GetGroupHeaderStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetGroupHeaderStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
        <MemberSignature Language="F#" Value="static member GetGroupHeaderStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetGroupHeaderStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetGroupHeaderStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSeparatorStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle GetSeparatorStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle GetSeparatorStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetSeparatorStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
        <MemberSignature Language="F#" Value="static member GetSeparatorStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetSeparatorStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the list view element whose separator style to get.</param>
          <summary>Returns the separator style for a list view.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.GetSeparatorStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="RowAnimationsEnabled">
        <MemberSignature Language="C#" Value="public static bool RowAnimationsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RowAnimationsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.RowAnimationsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
        <MemberSignature Language="F#" Value="static member RowAnimationsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.RowAnimationsEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.RowAnimationsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetGroupHeaderStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; SetGroupHeaderStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; SetGroupHeaderStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetGroupHeaderStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle)" />
        <MemberSignature Language="F#" Value="static member SetGroupHeaderStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetGroupHeaderStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetGroupHeaderStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.GroupHeaderStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetRowAnimationsEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; SetRowAnimationsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; SetRowAnimationsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetRowAnimationsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetRowAnimationsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetRowAnimationsEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetRowAnimationsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSeparatorStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; SetSeparatorStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; SetSeparatorStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ListView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetSeparatorStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle)" />
        <MemberSignature Language="F#" Value="static member SetSeparatorStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ListView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetSeparatorStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the list view element whose separator style to set.</param>
          <param name="value">The new separator style value.</param>
          <summary>Sets the separator style for a list view.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ListView.SetSeparatorStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.SeparatorStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetApplyShadow">
        <MemberSignature Language="C#" Value="public static bool GetApplyShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetApplyShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.MasterDetailPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.GetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage})" />
        <MemberSignature Language="F#" Value="static member GetApplyShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.MasterDetailPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.GetApplyShadow config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.GetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetApplyShadow">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt; SetApplyShadow (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.MasterDetailPage&gt; SetApplyShadow(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.MasterDetailPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.SetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetApplyShadow : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.MasterDetailPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.MasterDetailPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.SetApplyShadow (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.MasterDetailPage.SetApplyShadow(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.MasterDetailPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableTranslucentNavigationBar">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; DisableTranslucentNavigationBar (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; DisableTranslucentNavigationBar(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.DisableTranslucentNavigationBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member DisableTranslucentNavigationBar : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.DisableTranslucentNavigationBar config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Makes the navigation bar opaque on the platform-specific element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.DisableTranslucentNavigationBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableTranslucentNavigationBar">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; EnableTranslucentNavigationBar (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; EnableTranslucentNavigationBar(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.EnableTranslucentNavigationBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member EnableTranslucentNavigationBar : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.EnableTranslucentNavigationBar config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Makes the navigation bar translucent on the platform-specific element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.EnableTranslucentNavigationBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetStatusBarTextColorMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode GetStatusBarTextColorMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode GetStatusBarTextColorMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.GetStatusBarTextColorMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member GetStatusBarTextColorMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.GetStatusBarTextColorMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that controls whether the status bar text color is adjusted to match the luminosity of the navigation bar for the platform-specific navigation page.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.GetStatusBarTextColorMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="HideNavigationBarSeparator">
        <MemberSignature Language="C#" Value="public static bool HideNavigationBarSeparator (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HideNavigationBarSeparator(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.HideNavigationBarSeparator(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member HideNavigationBarSeparator : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.HideNavigationBarSeparator config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to return whether the navigation bar separator is hidden.</param>
          <summary>Returns <see langword="true" /> if the separator is hidden. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.HideNavigationBarSeparator(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsNavigationBarTranslucent">
        <MemberSignature Language="C#" Value="public static bool IsNavigationBarTranslucent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNavigationBarTranslucent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.IsNavigationBarTranslucent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member IsNavigationBarTranslucent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.IsNavigationBarTranslucent config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether the navigation bar on the platform-specific navigation page is translucent.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.IsNavigationBarTranslucent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="PrefersLargeTitles">
        <MemberSignature Language="C#" Value="public static bool PrefersLargeTitles (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrefersLargeTitles(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.PrefersLargeTitles(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member PrefersLargeTitles : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.PrefersLargeTitles config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The element whose large title preference to get.</param>
          <summary>Returns a value that indicates the element's preference for large titles.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.PrefersLargeTitles(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHideNavigationBarSeparator">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; SetHideNavigationBarSeparator (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; SetHideNavigationBarSeparator(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetHideNavigationBarSeparator(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetHideNavigationBarSeparator : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetHideNavigationBarSeparator (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set whether the navigation bar separator is hidden.</param>
          <param name="value">
            <see langword="true" /> to hide the separator. Otherwise, <see langword="false" />.</param>
          <summary>Developers set this to <see langword="true" /> to hide the separator. Otherwise, <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetHideNavigationBarSeparator(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsNavigationBarTranslucent">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; SetIsNavigationBarTranslucent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; SetIsNavigationBarTranslucent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetIsNavigationBarTranslucent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsNavigationBarTranslucent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetIsNavigationBarTranslucent (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a Boolean value that controls whether the navigation bar on the platform-specific navigation page is translucent.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetIsNavigationBarTranslucent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPrefersLargeTitles">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; SetPrefersLargeTitles (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; SetPrefersLargeTitles(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetPrefersLargeTitles(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetPrefersLargeTitles : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetPrefersLargeTitles (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The element whose preference to set.</param>
          <param name="value">The new large title preference behavior.</param>
          <summary>Sets the large title preference behavior of <paramref name="config" /> to <paramref name="value" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetPrefersLargeTitles(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetStatusBarTextColorMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; SetStatusBarTextColorMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; SetStatusBarTextColorMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.NavigationPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetStatusBarTextColorMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode)" />
        <MemberSignature Language="F#" Value="static member SetStatusBarTextColorMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetStatusBarTextColorMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether the status bar text color is adjusted to match the luminosity of the navigation bar for the platform-specific navigation page.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.NavigationPage.SetStatusBarTextColorMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.NavigationPage},Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarTextColorMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="LargeTitleDisplay">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode LargeTitleDisplay (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode LargeTitleDisplay(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.LargeTitleDisplay(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member LargeTitleDisplay : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.LargeTitleDisplay config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The element whose large title preferences to return.</param>
          <summary>Returns a value that describes the large title behavior preference of <paramref name="config" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.LargeTitleDisplay(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ModalPresentationStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle ModalPresentationStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle ModalPresentationStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.ModalPresentationStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member ModalPresentationStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.ModalPresentationStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">
            <c>this</c>
            <see cref="T:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" />.</param>
          <summary>Gets the modal presentation style of <c>this</c><see cref="T:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.ModalPresentationStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="PreferredStatusBarUpdateAnimation">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation PreferredStatusBarUpdateAnimation (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation PreferredStatusBarUpdateAnimation(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PreferredStatusBarUpdateAnimation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member PreferredStatusBarUpdateAnimation : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PreferredStatusBarUpdateAnimation config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that tells whether the preferred animation style to use when updating the status bar is <c>None</c>, <c>Slide</c>, or <c>Fade</c>.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PreferredStatusBarUpdateAnimation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="PrefersHomeIndicatorAutoHidden">
        <MemberSignature Language="C#" Value="public static bool PrefersHomeIndicatorAutoHidden (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrefersHomeIndicatorAutoHidden(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersHomeIndicatorAutoHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member PrefersHomeIndicatorAutoHidden : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersHomeIndicatorAutoHidden config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersHomeIndicatorAutoHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="PrefersStatusBarHidden">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode PrefersStatusBarHidden (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode PrefersStatusBarHidden(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersStatusBarHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member PrefersStatusBarHidden : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersStatusBarHidden config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Sets a value that controls whether it is preferred that the status bar is shown, hidden, or relies on the system default.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.PrefersStatusBarHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SafeAreaInsets">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Thickness SafeAreaInsets (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Thickness SafeAreaInsets(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SafeAreaInsets(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member SafeAreaInsets : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.Thickness" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SafeAreaInsets config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Thickness</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The element whose safe area insets to return.</param>
          <summary>Returns a <see cref="T:Xamarin.Forms.Thickness" /> object that represents the safe area insets.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SafeAreaInsets(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetLargeTitleDisplay">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetLargeTitleDisplay (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetLargeTitleDisplay(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetLargeTitleDisplay(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode)" />
        <MemberSignature Language="F#" Value="static member SetLargeTitleDisplay : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetLargeTitleDisplay (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode" />
        </Parameters>
        <Docs>
          <param name="config">The element whose large title display preference to set.</param>
          <param name="value">The new large title display preferences.</param>
          <summary>Sets the large title display preferences of <paramref name="config" /> to <paramref name="value" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetLargeTitleDisplay(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.LargeTitleDisplayMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetModalPresentationStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetModalPresentationStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetModalPresentationStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetModalPresentationStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle)" />
        <MemberSignature Language="F#" Value="static member SetModalPresentationStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetModalPresentationStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle" />
        </Parameters>
        <Docs>
          <param name="config">
            <c>this</c>
          </param>
          <param name="value">The desired <see cref="T:Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle" />.</param>
          <summary>Sets the modal presentation style to <param name="value" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetModalPresentationStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIModalPresentationStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPreferredStatusBarUpdateAnimation">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetPreferredStatusBarUpdateAnimation (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetPreferredStatusBarUpdateAnimation(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPreferredStatusBarUpdateAnimation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation)" />
        <MemberSignature Language="F#" Value="static member SetPreferredStatusBarUpdateAnimation : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPreferredStatusBarUpdateAnimation (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether the preferred animation style to use when updating the status bar is <c>None</c>, <c>Slide</c>, or <c>Fade</c>.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPreferredStatusBarUpdateAnimation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UIStatusBarAnimation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPrefersHomeIndicatorAutoHidden">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetPrefersHomeIndicatorAutoHidden (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetPrefersHomeIndicatorAutoHidden(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersHomeIndicatorAutoHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetPrefersHomeIndicatorAutoHidden : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersHomeIndicatorAutoHidden (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersHomeIndicatorAutoHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPrefersStatusBarHidden">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetPrefersStatusBarHidden (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetPrefersStatusBarHidden(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersStatusBarHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode)" />
        <MemberSignature Language="F#" Value="static member SetPrefersStatusBarHidden : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersStatusBarHidden (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether it is preferred that the status bar is shown, hidden, or relies on the system default.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetPrefersStatusBarHidden(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.iOSSpecific.StatusBarHiddenMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSafeAreaInsets">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetSafeAreaInsets (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, Xamarin.Forms.Thickness value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetSafeAreaInsets(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.Thickness value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetSafeAreaInsets(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.Thickness)" />
        <MemberSignature Language="F#" Value="static member SetSafeAreaInsets : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.Thickness -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetSafeAreaInsets (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Thickness" />
        </Parameters>
        <Docs>
          <param name="config">The element whose safe area insets to set.</param>
          <param name="value">The new safe area insets.</param>
          <summary>Sets the safe area insets of <paramref name="config" /> to <paramref name="value" /></summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetSafeAreaInsets(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},Xamarin.Forms.Thickness)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUseSafeArea">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; SetUseSafeArea (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; SetUseSafeArea(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetUseSafeArea(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetUseSafeArea : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetUseSafeArea (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The element whose safe area use behavior to set.</param>
          <param name="value">The new safe area inset behavior.</param>
          <summary>Sets a value that controls whether padding values are overridden with the safe area insets.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.SetUseSafeArea(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UsingSafeArea">
        <MemberSignature Language="C#" Value="public static bool UsingSafeArea (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UsingSafeArea(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.UsingSafeArea(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member UsingSafeArea : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Page&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.UsingSafeArea config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The element whose safe area behavior to get.</param>
          <summary>Returns a Boolean value that tells whether the padding is overridden with the safe area.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.UsingSafeArea(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt; SetUpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Picker&gt; SetUpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Picker&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
        <MemberSignature Language="F#" Value="static member SetUpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Picker&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Picker&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.SetUpdateMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether elements in the picker are continuously updated while scrolling or updated once after scrolling has completed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Picker&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker})" />
        <MemberSignature Language="F#" Value="static member UpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Picker&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.UpdateMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that tells whether elements in the picker are continuously updated while scrolling or updated once after scrolling has completed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Picker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Picker})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShouldDelayContentTouches">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt; SetShouldDelayContentTouches (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ScrollView&gt; SetShouldDelayContentTouches(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ScrollView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.SetShouldDelayContentTouches(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetShouldDelayContentTouches : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ScrollView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ScrollView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.SetShouldDelayContentTouches (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a Boolean value that tells whether iOS will wait to determine if a touch is intended as a scroll, or scroll immediately.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.SetShouldDelayContentTouches(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ShouldDelayContentTouches">
        <MemberSignature Language="C#" Value="public static bool ShouldDelayContentTouches (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldDelayContentTouches(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.ScrollView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.ShouldDelayContentTouches(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView})" />
        <MemberSignature Language="F#" Value="static member ShouldDelayContentTouches : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.ScrollView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.ShouldDelayContentTouches config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether iOS will wait to determine if a touch is intended as a scroll, or scroll immediately.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.ScrollView.ShouldDelayContentTouches(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.ScrollView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSearchBarStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle GetSearchBarStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle GetSearchBarStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SearchBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.GetSearchBarStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar})" />
        <MemberSignature Language="F#" Value="static member GetSearchBarStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SearchBar&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.GetSearchBarStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.GetSearchBarStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSearchBarStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt; SetSearchBarStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle style);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SearchBar&gt; SetSearchBarStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SearchBar&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle style) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.SetSearchBarStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle)" />
        <MemberSignature Language="F#" Value="static member SetSearchBarStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SearchBar&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SearchBar&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.SetSearchBarStyle (config, style)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar&gt;" RefType="this" />
          <Parameter Name="style" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="style">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SearchBar.SetSearchBarStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SearchBar},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UISearchBarStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetUpdateOnTap">
        <MemberSignature Language="C#" Value="public static bool GetUpdateOnTap (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetUpdateOnTap(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Slider&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.GetUpdateOnTap(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider})" />
        <MemberSignature Language="F#" Value="static member GetUpdateOnTap : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Slider&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.GetUpdateOnTap config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to get whether tapping on the slider updates its value.</param>
          <summary>Returns a Boolean value that tells whether tapping on the slider will update its value.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.GetUpdateOnTap(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUpdateOnTap">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt; SetUpdateOnTap (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Slider&gt; SetUpdateOnTap(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.Slider&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.SetUpdateOnTap(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetUpdateOnTap : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Slider&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.Slider&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.SetUpdateOnTap (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set whether tapping on the slider updates its value.</param>
          <param name="value">
            <see langword="true" /> if tapping will update the value. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that tells whether tapping on the slider will update its value.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.Slider.SetUpdateOnTap(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.Slider},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSwipeTransitionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode GetSwipeTransitionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode GetSwipeTransitionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SwipeView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.GetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView})" />
        <MemberSignature Language="F#" Value="static member GetSwipeTransitionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SwipeView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.GetSwipeTransitionMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.GetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSwipeTransitionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt; SetSwipeTransitionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SwipeView&gt; SetSwipeTransitionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.SwipeView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.SetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode)" />
        <MemberSignature Language="F#" Value="static member SetSwipeTransitionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SwipeView&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.SwipeView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.SetSwipeTransitionMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeView.SetSwipeTransitionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.SwipeView},Xamarin.Forms.PlatformConfiguration.iOSSpecific.SwipeTransitionMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetTranslucencyMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode GetTranslucencyMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode GetTranslucencyMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.GetTranslucencyMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetTranslucencyMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.GetTranslucencyMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.GetTranslucencyMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetTranslucencyMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt; SetTranslucencyMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TabbedPage&gt; SetTranslucencyMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.SetTranslucencyMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode)" />
        <MemberSignature Language="F#" Value="static member SetTranslucencyMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.SetTranslucencyMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TabbedPage.SetTranslucencyMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TabbedPage},Xamarin.Forms.PlatformConfiguration.iOSSpecific.TranslucencyMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt; SetUpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TimePicker&gt; SetUpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TimePicker&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
        <MemberSignature Language="F#" Value="static member SetUpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TimePicker&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TimePicker&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.SetUpdateMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.SetUpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker},Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UpdateMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode UpdateMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.TimePicker&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker})" />
        <MemberSignature Language="F#" Value="static member UpdateMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.TimePicker&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.UpdateMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.UpdateMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.TimePicker.UpdateMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.TimePicker})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="CanBecomeFirstResponder">
        <MemberSignature Language="C#" Value="public static bool CanBecomeFirstResponder (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanBecomeFirstResponder(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.CanBecomeFirstResponder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member CanBecomeFirstResponder : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.CanBecomeFirstResponder config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.CanBecomeFirstResponder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBlurEffect">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle GetBlurEffect (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle GetBlurEffect(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetBlurEffect(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetBlurEffect : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetBlurEffect config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that tells which, if any, blur effect is applied.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetBlurEffect(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsLegacyColorModeEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the legacy color mode.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsShadowEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsShadowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsShadowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetIsShadowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsShadowEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets a Boolean value that tells whether the shadow effect is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetShadowColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetShadowColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetShadowColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets the shadow color.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Size GetShadowOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Size GetShadowOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetShadowOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.Size" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOffset config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Size</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets the shadow offset.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowOpacity">
        <MemberSignature Language="C#" Value="public static double GetShadowOpacity (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetShadowOpacity(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOpacity(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetShadowOpacity : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOpacity config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets the shadow opacity.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowOpacity(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetShadowRadius">
        <MemberSignature Language="C#" Value="public static double GetShadowRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetShadowRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetShadowRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowRadius config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Gets the shadow radius.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.GetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetCanBecomeFirstResponder">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetCanBecomeFirstResponder (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetCanBecomeFirstResponder(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetCanBecomeFirstResponder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetCanBecomeFirstResponder : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetCanBecomeFirstResponder (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetCanBecomeFirstResponder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsLegacyColorModeEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">
            <see langword="true" /> to enable legacy color mode. Otherwise, <see langword="false" />.</param>
          <summary>Sets the legacy color mode.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsShadowEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetIsShadowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetIsShadowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsShadowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsShadowEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">
            <see langword="true" /> to enable the shadow. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether the shadow effect is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetIsShadowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetShadowColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.Color value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetShadowColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, valuetype Xamarin.Forms.Color value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetShadowColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowColor (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new shadow color value.</param>
          <summary>Sets the shadow color.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetShadowOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.Size value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetShadowOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, valuetype Xamarin.Forms.Size value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.Size)" />
        <MemberSignature Language="F#" Value="static member SetShadowOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.Size -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOffset (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Size" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new shadow offset value.</param>
          <summary>Sets the shadow offset.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.Size)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowOpacity">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetShadowOpacity (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetShadowOpacity(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOpacity(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Double)" />
        <MemberSignature Language="F#" Value="static member SetShadowOpacity : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOpacity (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new shadow opacity value.</param>
          <summary>Sets the shadow opacity.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowOpacity(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShadowRadius">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; SetShadowRadius (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; SetShadowRadius(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Double)" />
        <MemberSignature Language="F#" Value="static member SetShadowRadius : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowRadius (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new shadow radius value.</param>
          <summary>Sets the shadow radius.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.SetShadowRadius(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UseBlurEffect">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; UseBlurEffect (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; UseBlurEffect(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.iOS, class Xamarin.Forms.VisualElement&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.UseBlurEffect(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle)" />
        <MemberSignature Language="F#" Value="static member UseBlurEffect : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.UseBlurEffect (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets the blur effect to use.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.iOSSpecific.VisualElement.UseBlurEffect(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.iOS,Xamarin.Forms.VisualElement},Xamarin.Forms.PlatformConfiguration.iOSSpecific.BlurEffectStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNavigationTransitionPopStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle GetNavigationTransitionPopStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle GetNavigationTransitionPopStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPopStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member GetNavigationTransitionPopStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.NavigationPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPopStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the NavigationTransitionStyle value that tells what transition is used when a page is popped from the navigation stack.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPopStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNavigationTransitionPushStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle GetNavigationTransitionPushStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle GetNavigationTransitionPushStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPushStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member GetNavigationTransitionPushStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.NavigationPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPushStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the NavigationTransitionStyle value that tells what transition is used when a page is pushed on the navigation stack.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.GetNavigationTransitionPushStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNavigationTransitionStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt; SetNavigationTransitionStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt; config, Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle pushStyle, Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle popStyle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.NavigationPage&gt; SetNavigationTransitionStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.NavigationPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle pushStyle, valuetype Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle popStyle) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.SetNavigationTransitionStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage},Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle,Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle)" />
        <MemberSignature Language="F#" Value="static member SetNavigationTransitionStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.NavigationPage&gt; * Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle * Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.SetNavigationTransitionStyle (config, pushStyle, popStyle)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="pushStyle" Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle" />
          <Parameter Name="popStyle" Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="pushStyle">The new transition style when a page is pushed on the navigation stack.</param>
          <param name="popStyle">The new transition style when a page is popped from the navigation stack.</param>
          <summary>Sets the transition style which is used, when popping and pushing pages on the navigation stack.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationPage.SetNavigationTransitionStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.NavigationPage},Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle,Xamarin.Forms.PlatformConfiguration.macOSSpecific.NavigationTransitionStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetTabOrder">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.VisualElement[] GetTabOrder (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.VisualElement[] GetTabOrder(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.GetTabOrder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member GetTabOrder : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.VisualElement[]" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.GetTabOrder config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.VisualElement[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the tab order of the visual elements on a page as array.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.GetTabOrder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetTabOrder">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt; SetTabOrder (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt; config, params Xamarin.Forms.VisualElement[] value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.Page&gt; SetTabOrder(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.Page&gt; config, class Xamarin.Forms.VisualElement[] value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.SetTabOrder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page},Xamarin.Forms.VisualElement[])" />
        <MemberSignature Language="F#" Value="static member SetTabOrder : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.Page&gt; * Xamarin.Forms.VisualElement[] -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.SetTabOrder (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.VisualElement[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">An array of VisualElement.</param>
          <summary>Sets the tab order of visual elements on a page. Users can cycle through these elements with the tab key.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.Page.SetTabOrder(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.Page},Xamarin.Forms.VisualElement[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetTabsStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.TabsStyle GetTabsStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.TabsStyle GetTabsStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.GetTabsStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetTabsStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.TabsStyle" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.GetTabsStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.TabsStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that describes the way that tabs are displayed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.GetTabsStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="HideTabs">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; HideTabs (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; HideTabs(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.HideTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member HideTabs : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.HideTabs config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Hides the tabs on the tabbed page.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.HideTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetShowTabs">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; SetShowTabs (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.TabsStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; SetShowTabs(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.TabsStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.SetShowTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage},Xamarin.Forms.TabsStyle)" />
        <MemberSignature Language="F#" Value="static member SetShowTabs : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.TabsStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.SetShowTabs (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.TabsStyle" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls the way that tabs are displayed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.SetShowTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage},Xamarin.Forms.TabsStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ShowTabs">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; ShowTabs (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; ShowTabs(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member ShowTabs : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabs config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Sets tab display to the default style.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabs(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="ShowTabsOnNavigation">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; ShowTabsOnNavigation (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; ShowTabsOnNavigation(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.macOS, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabsOnNavigation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member ShowTabsOnNavigation : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabsOnNavigation config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Sets tab display to the respond to user swipes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.macOSSpecific.TabbedPage.ShowTabsOnNavigation(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.macOS,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetActiveBezelInteractionElement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Element GetActiveBezelInteractionElement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.Element GetActiveBezelInteractionElement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetActiveBezelInteractionElement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetActiveBezelInteractionElement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; -&gt; Xamarin.Forms.Element" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetActiveBezelInteractionElement config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Element</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetActiveBezelInteractionElement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetOverlayContent">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetOverlayContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetOverlayContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetOverlayContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetOverlayContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetOverlayContent config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetOverlayContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetUseBezelInteraction">
        <MemberSignature Language="C#" Value="public static bool GetUseBezelInteraction (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetUseBezelInteraction(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetUseBezelInteraction(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetUseBezelInteraction : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetUseBezelInteraction config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.GetUseBezelInteraction(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetActiveBezelInteractionElement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; SetActiveBezelInteractionElement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config, Xamarin.Forms.Element value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; SetActiveBezelInteractionElement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config, class Xamarin.Forms.Element value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetActiveBezelInteractionElement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},Xamarin.Forms.Element)" />
        <MemberSignature Language="F#" Value="static member SetActiveBezelInteractionElement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; * Xamarin.Forms.Element -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetActiveBezelInteractionElement (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Element" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetActiveBezelInteractionElement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},Xamarin.Forms.Element)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetOverlayContent">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; SetOverlayContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; SetOverlayContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetOverlayContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetOverlayContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetOverlayContent (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetOverlayContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetUseBezelInteraction">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; SetUseBezelInteraction (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; SetUseBezelInteraction(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Application&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetUseBezelInteraction(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetUseBezelInteraction : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetUseBezelInteraction (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Application.SetUseBezelInteraction(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Application},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetFontWeight">
        <MemberSignature Language="C#" Value="public static string GetFontWeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFontWeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Entry&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.GetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry})" />
        <MemberSignature Language="F#" Value="static member GetFontWeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Entry&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.GetFontWeight config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the entry element on the Tizen platform whose font weight icon to get.</param>
          <summary>Returns a string representation of the font weight for the entry text.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.GetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetFontWeight">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt; SetFontWeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt; config, string weight);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Entry&gt; SetFontWeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Entry&gt; config, string weight) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.SetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry},System.String)" />
        <MemberSignature Language="F#" Value="static member SetFontWeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Entry&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Entry&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.SetFontWeight (config, weight)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry&gt;" RefType="this" />
          <Parameter Name="weight" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the entry element on the Tizen platform whose font weight icon to set.</param>
          <param name="weight">The new font weight value.</param>
          <summary>Sets the font weight on the entry text.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Entry.SetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Entry},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBlendColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetBlendColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetBlendColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetBlendColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image})" />
        <MemberSignature Language="F#" Value="static member GetBlendColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetBlendColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the image on the Tizen platform whose blend color to get.</param>
          <summary>Returns the blend color for the image.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetBlendColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetFile">
        <MemberSignature Language="C#" Value="public static string GetFile (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFile(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetFile(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image})" />
        <MemberSignature Language="F#" Value="static member GetFile : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetFile config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.GetFile(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBlendColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; SetBlendColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; config, Xamarin.Forms.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; SetBlendColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; config, valuetype Xamarin.Forms.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetBlendColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetBlendColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetBlendColor (config, color)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;" RefType="this" />
          <Parameter Name="color" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the image on the Tizen platform whose blend color to set.</param>
          <param name="color">The new blend color value.</param>
          <summary>Sets the blend color.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetBlendColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetFile">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; SetFile (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt; config, string file);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; SetFile(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Image&gt; config, string file) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetFile(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image},System.String)" />
        <MemberSignature Language="F#" Value="static member SetFile : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Image&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetFile (config, file)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image&gt;" RefType="this" />
          <Parameter Name="file" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="file">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Image.SetFile(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Image},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetFontWeight">
        <MemberSignature Language="C#" Value="public static string GetFontWeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFontWeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Label&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.GetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label})" />
        <MemberSignature Language="F#" Value="static member GetFontWeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Label&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.GetFontWeight config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the label element on the Tizen platform whose font weight icon to get.</param>
          <summary>Returns a string representation of the font weight for the label text.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.GetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetFontWeight">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt; SetFontWeight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt; config, string weight);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Label&gt; SetFontWeight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Label&gt; config, string weight) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.SetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label},System.String)" />
        <MemberSignature Language="F#" Value="static member SetFontWeight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Label&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Label&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.SetFontWeight (config, weight)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label&gt;" RefType="this" />
          <Parameter Name="weight" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the label element on the Tizen platform whose font weight icon to set.</param>
          <param name="weight">The new font weight value.</param>
          <summary>Sets the font weight on the label text.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Label.SetFontWeight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Label},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="HasBreadCrumbsBar">
        <MemberSignature Language="C#" Value="public static bool HasBreadCrumbsBar (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasBreadCrumbsBar(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.NavigationPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.HasBreadCrumbsBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage})" />
        <MemberSignature Language="F#" Value="static member HasBreadCrumbsBar : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.NavigationPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.HasBreadCrumbsBar config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the navigation page on the Tizen platform whose font weight icon to get.</param>
          <summary>Returns a Boolean value that tells whether the navigation page has a bread crumb bar.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.HasBreadCrumbsBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHasBreadCrumbsBar">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt; SetHasBreadCrumbsBar (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.NavigationPage&gt; SetHasBreadCrumbsBar(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.NavigationPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.SetHasBreadCrumbsBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetHasBreadCrumbsBar : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.NavigationPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.NavigationPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.SetHasBreadCrumbsBar (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the navigation page on the Tizen platform whose font weight icon to set.</param>
          <param name="value">The new bread crumb bar presence value.</param>
          <summary>Sets a Boolean value that tells whether the navigation page has a bread crumb bar.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.NavigationPage.SetHasBreadCrumbsBar(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.NavigationPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetBreadCrumb">
        <MemberSignature Language="C#" Value="public static string GetBreadCrumb (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetBreadCrumb(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.GetBreadCrumb(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member GetBreadCrumb : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Page&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.GetBreadCrumb config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the page whose bread crumb representation to get.</param>
          <summary>Returns the breadcrumb representation for a page.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.GetBreadCrumb(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetBreadCrumb">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt; SetBreadCrumb (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Page&gt; SetBreadCrumb(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Page&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.SetBreadCrumb(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page},System.String)" />
        <MemberSignature Language="F#" Value="static member SetBreadCrumb : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Page&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.SetBreadCrumb (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The paltform configuration for the page whose bread crumb value to set.</param>
          <param name="value">The new bread crumb value.</param>
          <summary>Sets the bread crumb value for the page.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Page.SetBreadCrumb(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Page},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetPulsingStatus">
        <MemberSignature Language="C#" Value="public static bool GetPulsingStatus (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetPulsingStatus(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.ProgressBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.GetPulsingStatus(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar})" />
        <MemberSignature Language="F#" Value="static member GetPulsingStatus : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.ProgressBar&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.GetPulsingStatus config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose pulse status to get.</param>
          <summary>Returns <see langword="true" /> if the progress bar is pulsing. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.GetPulsingStatus(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetPulsingStatus">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt; SetPulsingStatus (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt; config, bool isPulsing);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.ProgressBar&gt; SetPulsingStatus(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.ProgressBar&gt; config, bool isPulsing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.SetPulsingStatus(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetPulsingStatus : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.ProgressBar&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.ProgressBar&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.SetPulsingStatus (config, isPulsing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar&gt;" RefType="this" />
          <Parameter Name="isPulsing" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose pulse status to set.</param>
          <param name="isPulsing">
            <see langword="true" /> to cause the progress bar is pulsing. Otherwise, <see langword="false" />.</param>
          <summary>Turns pulsing on or off.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.ProgressBar.SetPulsingStatus(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.ProgressBar},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Color GetColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Color GetColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Switch&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.GetColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch})" />
        <MemberSignature Language="F#" Value="static member GetColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Switch&gt; -&gt; Xamarin.Forms.Color" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.GetColor config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.GetColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetColor">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt; SetColor (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt; config, Xamarin.Forms.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Switch&gt; SetColor(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.Switch&gt; config, valuetype Xamarin.Forms.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.SetColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch},Xamarin.Forms.Color)" />
        <MemberSignature Language="F#" Value="static member SetColor : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Switch&gt; * Xamarin.Forms.Color -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.Switch&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.SetColor (config, color)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch&gt;" RefType="this" />
          <Parameter Name="color" Type="Xamarin.Forms.Color" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="color">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.Switch.SetColor(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.Switch},Xamarin.Forms.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusBackView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusBackView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusBackView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusBackView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusBackView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusBackView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving back.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusBackView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusDirection">
        <MemberSignature Language="C#" Value="public static string GetNextFocusDirection (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetNextFocusDirection(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusDirection : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDirection config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus direction to get.</param>
          <summary>Returns the next focus direction.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusDownView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusDownView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusDownView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDownView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusDownView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDownView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving down.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusDownView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusForwardView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusForwardView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusForwardView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusForwardView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusForwardView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusForwardView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving forward.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusForwardView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusLeftView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusLeftView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusLeftView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusLeftView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusLeftView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusLeftView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving left.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusLeftView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusRightView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusRightView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusRightView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusRightView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusRightView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusRightView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving right.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusRightView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetNextFocusUpView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.View GetNextFocusUpView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.View GetNextFocusUpView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusUpView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetNextFocusUpView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.View" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusUpView config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.View</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus to get.</param>
          <summary>Returns the view that gets the focus when moving up.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetNextFocusUpView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetStyle">
        <MemberSignature Language="C#" Value="public static string GetStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose style to get.</param>
          <summary>Returns the style for the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetToolTip">
        <MemberSignature Language="C#" Value="public static string GetToolTip (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetToolTip(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetToolTip(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetToolTip : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetToolTip config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose tooltip to get.</param>
          <summary>Returns the tooltip for the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.GetToolTip(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsFocusAllowed">
        <MemberSignature Language="C#" Value="public static bool? IsFocusAllowed (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;bool&gt; IsFocusAllowed(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.IsFocusAllowed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member IsFocusAllowed : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Nullable&lt;bool&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.IsFocusAllowed config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focusability to check.</param>
          <summary>Returns <see langword="true" /> if the element may be focused. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.IsFocusAllowed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusBack">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusBack (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusBack(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusBack(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusBack : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusBack config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to back.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusBack(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusDown">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusDown (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusDown(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusDown(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusDown : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusDown config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to down.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusDown(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusForward">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusForward (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusForward(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusForward(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusForward : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusForward config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to forward.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusForward(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusLeft">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusLeft (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusLeft(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusLeft(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusLeft : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusLeft config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to left.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusLeft(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusRight">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusRight (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusRight(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusRight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusRight : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusRight config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to right.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusRight(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="MoveFocusUp">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; MoveFocusUp (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; MoveFocusUp(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusUp(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member MoveFocusUp : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusUp config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose focus direction to set.</param>
          <summary>Changes the focus direction to up.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.MoveFocusUp(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetFocusAllowed">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetFocusAllowed (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetFocusAllowed(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetFocusAllowed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetFocusAllowed : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetFocusAllowed (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose focus participation value to set.</param>
          <param name="value">The new focus participation value.</param>
          <summary>Sets the focus participation value for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetFocusAllowed(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusBackView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusBackView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusBackView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusBackView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusBackView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusBackView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose back focus view to set.</param>
          <param name="value">The new back focus view.</param>
          <summary>Sets the back focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusBackView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusDirection">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusDirection (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusDirection(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusDirection : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDirection (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose next focus direction to set.</param>
          <param name="value">The new focus direction.</param>
          <summary>Sets the direction of the next focus on a visual element</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusDownView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusDownView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusDownView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDownView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusDownView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDownView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose down focus view to set.</param>
          <param name="value">The new down focus view.</param>
          <summary>Sets the down focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusDownView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusForwardView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusForwardView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusForwardView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusForwardView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusForwardView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusForwardView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose forward focus view to set.</param>
          <param name="value">The new forward focus view.</param>
          <summary>Sets the forward focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusForwardView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusLeftView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusLeftView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusLeftView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusLeftView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusLeftView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusLeftView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose left focus view to set.</param>
          <param name="value">The new left focus view.</param>
          <summary>Sets the left focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusLeftView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusRightView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusRightView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusRightView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusRightView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusRightView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusRightView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose right focus view to set.</param>
          <param name="value">The new right focus view.</param>
          <summary>Sets the right focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusRightView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetNextFocusUpView">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetNextFocusUpView (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.View value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetNextFocusUpView(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, class Xamarin.Forms.View value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusUpView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
        <MemberSignature Language="F#" Value="static member SetNextFocusUpView : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.View -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusUpView (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.View" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element whose up focus view to set.</param>
          <param name="value">The new up focus view.</param>
          <summary>Sets the up focus view for a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetNextFocusUpView(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},Xamarin.Forms.View)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
        <MemberSignature Language="F#" Value="static member SetStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose style to set.</param>
          <param name="value">The new style value.</param>
          <summary>Sets the style on a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetToolTip">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; SetToolTip (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; SetToolTip(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Tizen, class Xamarin.Forms.VisualElement&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetToolTip(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
        <MemberSignature Language="F#" Value="static member SetToolTip : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetToolTip (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose tooltip to set.</param>
          <param name="value">The new tooltip value.</param>
          <summary>Sets the tooltip on a visual element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.TizenSpecific.VisualElement.SetToolTip(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Tizen,Xamarin.Forms.VisualElement},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetImageDirectory">
        <MemberSignature Language="C#" Value="public static string GetImageDirectory (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetImageDirectory(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Application&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.GetImageDirectory(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application})" />
        <MemberSignature Language="F#" Value="static member GetImageDirectory : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Application&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.GetImageDirectory config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.GetImageDirectory(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetImageDirectory">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt; SetImageDirectory (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Application&gt; SetImageDirectory(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Application&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.SetImageDirectory(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application},System.String)" />
        <MemberSignature Language="F#" Value="static member SetImageDirectory : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Application&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Application&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.SetImageDirectory (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Application.SetImageDirectory(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Application},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="CollapsedPaneWidth">
        <MemberSignature Language="C#" Value="public static double CollapsedPaneWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CollapsedPaneWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
        <MemberSignature Language="F#" Value="static member CollapsedPaneWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="CollapsedPaneWidth">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; CollapsedPaneWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; CollapsedPaneWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage},System.Double)" />
        <MemberSignature Language="F#" Value="static member CollapsedPaneWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetCollapseStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle GetCollapseStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle GetCollapseStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.GetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
        <MemberSignature Language="F#" Value="static member GetCollapseStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.GetCollapseStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.GetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetCollapseStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; SetCollapseStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; config, Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; SetCollapseStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.SetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle)" />
        <MemberSignature Language="F#" Value="static member SetCollapseStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt; * Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.SetCollapseStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.SetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UsePartialCollapse">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; UsePartialCollapse (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; UsePartialCollapse(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.FlyoutPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.UsePartialCollapse(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
        <MemberSignature Language="F#" Value="static member UsePartialCollapse : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.FlyoutPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.UsePartialCollapse config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.FlyoutPage.UsePartialCollapse(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.FlyoutPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetDetectReadingOrderFromContent">
        <MemberSignature Language="C#" Value="public static bool GetDetectReadingOrderFromContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetDetectReadingOrderFromContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.InputView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.GetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView})" />
        <MemberSignature Language="F#" Value="static member GetDetectReadingOrderFromContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.InputView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.GetDetectReadingOrderFromContent config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the input view element whose reading order detection behavior to get.</param>
          <summary>Returns a Boolean value that tells whether the reading order is detected from the input view's content.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.GetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetDetectReadingOrderFromContent">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt; SetDetectReadingOrderFromContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.InputView&gt; SetDetectReadingOrderFromContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.InputView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.SetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetDetectReadingOrderFromContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.InputView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.InputView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.SetDetectReadingOrderFromContent (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The input view element whose reading order detection behavior to set.</param>
          <param name="value">
            <see langword="true" /> to detect the reading order from the content. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether the reading order is detected from the input view's content.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.InputView.SetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.InputView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetDetectReadingOrderFromContent">
        <MemberSignature Language="C#" Value="public static bool GetDetectReadingOrderFromContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetDetectReadingOrderFromContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Label&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.GetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label})" />
        <MemberSignature Language="F#" Value="static member GetDetectReadingOrderFromContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Label&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.GetDetectReadingOrderFromContent config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the label element whose reading order detection behavior to get.</param>
          <summary>Returns a Boolean value that tells whether the reading order is detected from the label's content.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.GetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetDetectReadingOrderFromContent">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt; SetDetectReadingOrderFromContent (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Label&gt; SetDetectReadingOrderFromContent(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Label&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.SetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetDetectReadingOrderFromContent : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Label&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Label&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.SetDetectReadingOrderFromContent (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The label element whose reading order detection behavior to set.</param>
          <param name="value">
            <see langword="true" /> to detect the reading order from the content. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that controls whether the reading order is detected from the label's content.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Label.SetDetectReadingOrderFromContent(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Label},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetSelectionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode GetSelectionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode GetSelectionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.ListView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.GetSelectionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView})" />
        <MemberSignature Language="F#" Value="static member GetSelectionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.ListView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.GetSelectionMode config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The element whose selection mode to get.</param>
          <summary>Returns the selection mode for the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.GetSelectionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetSelectionMode">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt; SetSelectionMode (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt; config, Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.ListView&gt; SetSelectionMode(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.ListView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.SetSelectionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode)" />
        <MemberSignature Language="F#" Value="static member SetSelectionMode : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.ListView&gt; * Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.ListView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.SetSelectionMode (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode" />
        </Parameters>
        <Docs>
          <param name="config">The element whose selectio mode to set.</param>
          <param name="value">The new selection mode value.</param>
          <summary>Sets the selection mode for the element.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.SetSelectionMode(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.ListView},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListViewSelectionMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="CollapsedPaneWidth">
        <MemberSignature Language="C#" Value="public static double CollapsedPaneWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CollapsedPaneWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
        <MemberSignature Language="F#" Value="static member CollapsedPaneWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns the width of the master pane when it is collapsed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="CollapsedPaneWidth">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; CollapsedPaneWidth (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; CollapsedPaneWidth(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage},System.Double)" />
        <MemberSignature Language="F#" Value="static member CollapsedPaneWidth : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets the width of a pane when it is collapsed.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.CollapsedPaneWidth(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetCollapseStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle GetCollapseStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle GetCollapseStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.GetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
        <MemberSignature Language="F#" Value="static member GetCollapseStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt; -&gt; Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.GetCollapseStyle config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that controls whether panes collapses fully or partially.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.GetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetCollapseStyle">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; SetCollapseStyle (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; config, Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; SetCollapseStyle(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.SetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle)" />
        <MemberSignature Language="F#" Value="static member SetCollapseStyle : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt; * Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.SetCollapseStyle (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls whether panes collapses fully or partially.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.SetCollapseStyle(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.CollapseStyle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="UsePartialCollapse">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; UsePartialCollapse (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; UsePartialCollapse(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.MasterDetailPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.UsePartialCollapse(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
        <MemberSignature Language="F#" Value="static member UsePartialCollapse : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt; -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.MasterDetailPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.UsePartialCollapse config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Causes the master detail page to partially collapse panes.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.MasterDetailPage.UsePartialCollapse(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.MasterDetailPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetToolbarDynamicOverflowEnabled">
        <MemberSignature Language="C#" Value="public static bool GetToolbarDynamicOverflowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetToolbarDynamicOverflowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarDynamicOverflowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member GetToolbarDynamicOverflowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarDynamicOverflowEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarDynamicOverflowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetToolbarPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement GetToolbarPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement GetToolbarPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page})" />
        <MemberSignature Language="F#" Value="static member GetToolbarPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt; -&gt; Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarPlacement config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <summary>Returns a value that controls the placement of the toolbar.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.GetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetToolbarDynamicOverflowEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; SetToolbarDynamicOverflowEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; SetToolbarDynamicOverflowEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarDynamicOverflowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetToolbarDynamicOverflowEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarDynamicOverflowEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarDynamicOverflowEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetToolbarPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; SetToolbarPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt; config, Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; SetToolbarPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.Page&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement)" />
        <MemberSignature Language="F#" Value="static member SetToolbarPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt; * Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.Page&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarPlacement (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement" />
        </Parameters>
        <Docs>
          <param name="config">The platform specific configuration that contains the element on which to perform the operation.</param>
          <param name="value">The new property value to assign.</param>
          <summary>Sets a value that controls the placement of the toolbar.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.Page.SetToolbarPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.Page},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ToolbarPlacement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetRefreshPullDirection">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection GetRefreshPullDirection (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView/RefreshPullDirection GetRefreshPullDirection(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.RefreshView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.GetRefreshPullDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView})" />
        <MemberSignature Language="F#" Value="static member GetRefreshPullDirection : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.RefreshView&gt; -&gt; Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.GetRefreshPullDirection config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView+RefreshPullDirection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.GetRefreshPullDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetRefreshPullDirection">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt; SetRefreshPullDirection (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt; config, Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.RefreshView&gt; SetRefreshPullDirection(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.RefreshView&gt; config, valuetype Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView/RefreshPullDirection value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.SetRefreshPullDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection)" />
        <MemberSignature Language="F#" Value="static member SetRefreshPullDirection : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.RefreshView&gt; * Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.RefreshView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.SetRefreshPullDirection (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView+RefreshPullDirection" />
        </Parameters>
        <Docs>
          <param name="config">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.SetRefreshPullDirection(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.RefreshView},Xamarin.Forms.PlatformConfiguration.WindowsSpecific.RefreshView.RefreshPullDirection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableSpellCheck">
        <MemberSignature Language="C#" Value="public static void DisableSpellCheck (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableSpellCheck(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.DisableSpellCheck(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
        <MemberSignature Language="F#" Value="static member DisableSpellCheck : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt; -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.DisableSpellCheck config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the search bar element.</param>
          <summary>Disables the spellchecker.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.DisableSpellCheck(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableSpellCheck">
        <MemberSignature Language="C#" Value="public static void EnableSpellCheck (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableSpellCheck(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.EnableSpellCheck(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
        <MemberSignature Language="F#" Value="static member EnableSpellCheck : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt; -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.EnableSpellCheck config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the search bar element.</param>
          <summary>Enables the spellchecker.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.EnableSpellCheck(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsSpellCheckEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsSpellCheckEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsSpellCheckEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.GetIsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
        <MemberSignature Language="F#" Value="static member GetIsSpellCheckEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.GetIsSpellCheckEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the search bar element.</param>
          <summary>Returns a Boolean value that tells whether the spellchecker is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.GetIsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsSpellCheckEnabled">
        <MemberSignature Language="C#" Value="public static bool IsSpellCheckEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSpellCheckEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.IsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
        <MemberSignature Language="F#" Value="static member IsSpellCheckEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.IsSpellCheckEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the search bar element.</param>
          <summary>Returns a Boolean value that tells whether the spellchecker is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.IsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsSpellCheckEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; SetIsSpellCheckEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; SetIsSpellCheckEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.SearchBar&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.SetIsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsSpellCheckEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.SearchBar&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.SetIsSpellCheckEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the search bar element.</param>
          <param name="value">
            <see langword="true" /> to turn the spellchecker on. <see langword="false" /> to turn it off.</param>
          <summary>Turns the spellchecker on and off.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.SearchBar.SetIsSpellCheckEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.SearchBar},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="DisableHeaderIcons">
        <MemberSignature Language="C#" Value="public static void DisableHeaderIcons (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableHeaderIcons(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.DisableHeaderIcons(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member DisableHeaderIcons : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.DisableHeaderIcons config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Disables header icons.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.DisableHeaderIcons(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="EnableHeaderIcons">
        <MemberSignature Language="C#" Value="public static void EnableHeaderIcons (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableHeaderIcons(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.EnableHeaderIcons(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member EnableHeaderIcons : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; -&gt; unit" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.EnableHeaderIcons config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Enables header icons.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.EnableHeaderIcons(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetHeaderIconsEnabled">
        <MemberSignature Language="C#" Value="public static bool GetHeaderIconsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetHeaderIconsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetHeaderIconsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether header icons are enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetHeaderIconsSize">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.Size GetHeaderIconsSize (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.Size GetHeaderIconsSize(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsSize(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member GetHeaderIconsSize : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; -&gt; Xamarin.Forms.Size" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsSize config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.Size</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Returns the size of header icons.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.GetHeaderIconsSize(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsHeaderIconsEnabled">
        <MemberSignature Language="C#" Value="public static bool IsHeaderIconsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHeaderIconsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.IsHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
        <MemberSignature Language="F#" Value="static member IsHeaderIconsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.IsHeaderIconsEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <summary>Returns a Boolean value that tells whether header icons are enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.IsHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHeaderIconsEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; SetHeaderIconsEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; SetHeaderIconsEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetHeaderIconsEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">
            <see langword="true" /> to enable header icons. <see langword="false" /> to disable them.</param>
          <summary>Turns header icons on and off.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetHeaderIconsSize">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; SetHeaderIconsSize (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt; config, Xamarin.Forms.Size value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; SetHeaderIconsSize(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.TabbedPage&gt; config, valuetype Xamarin.Forms.Size value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsSize(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage},Xamarin.Forms.Size)" />
        <MemberSignature Language="F#" Value="static member SetHeaderIconsSize : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt; * Xamarin.Forms.Size -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.TabbedPage&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsSize (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.Size" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element on which to perform the operation.</param>
          <param name="value">The new header icon size.</param>
          <summary>Specifies the size of header icons.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.TabbedPage.SetHeaderIconsSize(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.TabbedPage},Xamarin.Forms.Size)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetAccessKey">
        <MemberSignature Language="C#" Value="public static string GetAccessKey (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAccessKey(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKey(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetAccessKey : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; -&gt; string" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKey config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to get the access key.</param>
          <summary>Returns the access key value.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKey(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetAccessKeyHorizontalOffset">
        <MemberSignature Language="C#" Value="public static double GetAccessKeyHorizontalOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetAccessKeyHorizontalOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyHorizontalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetAccessKeyHorizontalOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyHorizontalOffset config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to get the horizontal offset.</param>
          <summary>Gets the horizontal offset from the nominal position to use for displaying the access key tip.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyHorizontalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetAccessKeyPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.AccessKeyPlacement GetAccessKeyPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Xamarin.Forms.AccessKeyPlacement GetAccessKeyPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetAccessKeyPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; -&gt; Xamarin.Forms.AccessKeyPlacement" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyPlacement config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.AccessKeyPlacement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to get the access key placement.</param>
          <summary>Gets the nominal position to use for displaying the access key tip.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetAccessKeyVerticalOffset">
        <MemberSignature Language="C#" Value="public static double GetAccessKeyVerticalOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetAccessKeyVerticalOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyVerticalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetAccessKeyVerticalOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; -&gt; double" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyVerticalOffset config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to get the vertical offset.</param>
          <summary>Gets the vertical offset from the nominal position to use for displaying the access key tip.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetAccessKeyVerticalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="GetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static bool GetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
        <MemberSignature Language="F#" Value="static member GetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetIsLegacyColorModeEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose legacy color mode to return.</param>
          <summary>Returns a Boolean value that controls whether legacy color mode is enabled.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.GetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetAccessKey">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; SetAccessKey (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; SetAccessKey(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKey(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.String)" />
        <MemberSignature Language="F#" Value="static member SetAccessKey : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; * string -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKey (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set the access key string.</param>
          <param name="value">The new access key value.</param>
          <summary>Sets the value that the access key displays.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKey(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetAccessKeyHorizontalOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; SetAccessKeyHorizontalOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; SetAccessKeyHorizontalOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyHorizontalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Double)" />
        <MemberSignature Language="F#" Value="static member SetAccessKeyHorizontalOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyHorizontalOffset (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set the horizontal access key offset.</param>
          <param name="value">The new offset value.</param>
          <summary>Sets the horizontal offset from the nominal position to use for displaying the access key.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyHorizontalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetAccessKeyPlacement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; SetAccessKeyPlacement (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config, Xamarin.Forms.AccessKeyPlacement value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; SetAccessKeyPlacement(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config, valuetype Xamarin.Forms.AccessKeyPlacement value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},Xamarin.Forms.AccessKeyPlacement)" />
        <MemberSignature Language="F#" Value="static member SetAccessKeyPlacement : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; * Xamarin.Forms.AccessKeyPlacement -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyPlacement (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="Xamarin.Forms.AccessKeyPlacement" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set the new placement.</param>
          <param name="value">The new placement value.</param>
          <summary>Sets nominal position to use for displaying the access key.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyPlacement(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},Xamarin.Forms.AccessKeyPlacement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetAccessKeyVerticalOffset">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; SetAccessKeyVerticalOffset (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config, double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; SetAccessKeyVerticalOffset(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config, float64 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyVerticalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Double)" />
        <MemberSignature Language="F#" Value="static member SetAccessKeyVerticalOffset : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; * double -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyVerticalOffset (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the element for which to set the vertical access key offset.</param>
          <param name="value">The new offset value.</param>
          <summary>Sets the vertical offset from the nominal position to use for displaying the access key.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetAccessKeyVerticalOffset(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsLegacyColorModeEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; SetIsLegacyColorModeEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.VisualElement&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsLegacyColorModeEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.VisualElement&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetIsLegacyColorModeEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the visual element whose legacy color mode to return.</param>
          <param name="value">
            <see langword="true" /> to enable legacy color mode. Otherwise, <see langword="false" />.</param>
          <summary>Turns the legacy color mode on and off.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.VisualElement.SetIsLegacyColorModeEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.VisualElement},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="IsJavaScriptAlertEnabled">
        <MemberSignature Language="C#" Value="public static bool IsJavaScriptAlertEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt; config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsJavaScriptAlertEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.WebView&gt; config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.IsJavaScriptAlertEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView})" />
        <MemberSignature Language="F#" Value="static member IsJavaScriptAlertEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.WebView&gt; -&gt; bool" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.IsJavaScriptAlertEnabled config" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the web view element whose JavaScript alert permissions to return.</param>
          <summary>Returns a Boolean value that tells whether the web view allows JavaScript alerts.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.IsJavaScriptAlertEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.IPlatformElementConfiguration`2" />
      </Targets>
      <Member MemberName="SetIsJavaScriptAlertEnabled">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt; SetIsJavaScriptAlertEnabled (this Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt; config, bool value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.WebView&gt; SetIsJavaScriptAlertEnabled(class Xamarin.Forms.IPlatformElementConfiguration`2&lt;class Xamarin.Forms.PlatformConfiguration.Windows, class Xamarin.Forms.WebView&gt; config, bool value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.SetIsJavaScriptAlertEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView},System.Boolean)" />
        <MemberSignature Language="F#" Value="static member SetIsJavaScriptAlertEnabled : Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.WebView&gt; * bool -&gt; Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows, Xamarin.Forms.WebView&gt;" Usage="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.SetIsJavaScriptAlertEnabled (config, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="config" Type="Xamarin.Forms.IPlatformElementConfiguration&lt;Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="config">The platform configuration for the web view element whose JavaScript alert permissions to set.</param>
          <param name="value">
            <see langwor="true" /> to allow JavaScript alerts. Otherwise, <see langword="false" />.</param>
          <summary>Sets a Boolean value that tells whether the web view allows JavaScript alerts.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView" Member="M:Xamarin.Forms.PlatformConfiguration.WindowsSpecific.WebView.SetIsJavaScriptAlertEnabled(Xamarin.Forms.IPlatformElementConfiguration{Xamarin.Forms.PlatformConfiguration.Windows,Xamarin.Forms.WebView},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; setters, Xamarin.Forms.BindableProperty property, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.IList`1&lt;class Xamarin.Forms.Setter&gt; setters, class Xamarin.Forms.BindableProperty property, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.SettersExtensions.Add(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.Object)" />
        <MemberSignature Language="F#" Value="static member Add : System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; * Xamarin.Forms.BindableProperty * obj -&gt; unit" Usage="Xamarin.Forms.SettersExtensions.Add (setters, property, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="setters" Type="System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt;" RefType="this" />
          <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="setters">The list of setters to which to add a setter that sets <paramref name="property" /> to <paramref name="value" />.</param>
          <param name="property">The property to set.</param>
          <param name="value">The value to which to set the property set.</param>
          <summary>Add a Setter with a value to the IList&lt;Setter&gt;</summary>
        </Docs>
        <Link Type="Xamarin.Forms.SettersExtensions" Member="M:Xamarin.Forms.SettersExtensions.Add(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="AddBinding">
        <MemberSignature Language="C#" Value="public static void AddBinding (this System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; setters, Xamarin.Forms.BindableProperty property, Xamarin.Forms.Binding binding);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddBinding(class System.Collections.Generic.IList`1&lt;class Xamarin.Forms.Setter&gt; setters, class Xamarin.Forms.BindableProperty property, class Xamarin.Forms.Binding binding) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.SettersExtensions.AddBinding(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,Xamarin.Forms.Binding)" />
        <MemberSignature Language="F#" Value="static member AddBinding : System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; * Xamarin.Forms.BindableProperty * Xamarin.Forms.Binding -&gt; unit" Usage="Xamarin.Forms.SettersExtensions.AddBinding (setters, property, binding)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="setters" Type="System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt;" RefType="this" />
          <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="binding" Type="Xamarin.Forms.Binding" />
        </Parameters>
        <Docs>
          <param name="setters">The list of setters to which to add a setter that binds <paramref name="property" /> to <paramref name="value" />.</param>
          <param name="property">The property to set.</param>
          <param name="binding">The binding to add.</param>
          <summary>Add a Setter with a Binding to the IList&lt;Setter&gt;</summary>
        </Docs>
        <Link Type="Xamarin.Forms.SettersExtensions" Member="M:Xamarin.Forms.SettersExtensions.AddBinding(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,Xamarin.Forms.Binding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="AddDynamicResource">
        <MemberSignature Language="C#" Value="public static void AddDynamicResource (this System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; setters, Xamarin.Forms.BindableProperty property, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddDynamicResource(class System.Collections.Generic.IList`1&lt;class Xamarin.Forms.Setter&gt; setters, class Xamarin.Forms.BindableProperty property, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.SettersExtensions.AddDynamicResource(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.String)" />
        <MemberSignature Language="F#" Value="static member AddDynamicResource : System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt; * Xamarin.Forms.BindableProperty * string -&gt; unit" Usage="Xamarin.Forms.SettersExtensions.AddDynamicResource (setters, property, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="setters" Type="System.Collections.Generic.IList&lt;Xamarin.Forms.Setter&gt;" RefType="this" />
          <Parameter Name="property" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="setters">The list of setters to which to add the keyed property.</param>
          <param name="property">The resource to add.</param>
          <param name="key">The resource key.</param>
          <summary>Add a Setter with a DynamicResource to the IList&lt;Setter&gt;</summary>
        </Docs>
        <Link Type="Xamarin.Forms.SettersExtensions" Member="M:Xamarin.Forms.SettersExtensions.AddDynamicResource(System.Collections.Generic.IList{Xamarin.Forms.Setter},Xamarin.Forms.BindableProperty,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.ITabStopElement" />
      </Targets>
      <Member MemberName="FindNextElement">
        <MemberSignature Language="C#" Value="public static Xamarin.Forms.ITabStopElement FindNextElement (this Xamarin.Forms.ITabStopElement element, bool forwardDirection, System.Collections.Generic.IDictionary&lt;int,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt; tabIndexes, ref int tabIndex);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Xamarin.Forms.ITabStopElement FindNextElement(class Xamarin.Forms.ITabStopElement element, bool forwardDirection, class System.Collections.Generic.IDictionary`2&lt;int32, class System.Collections.Generic.List`1&lt;class Xamarin.Forms.ITabStopElement&gt;&gt; tabIndexes, int32&amp; tabIndex) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.TabIndexExtensions.FindNextElement(Xamarin.Forms.ITabStopElement,System.Boolean,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{Xamarin.Forms.ITabStopElement}},System.Int32@)" />
        <MemberSignature Language="F#" Value="static member FindNextElement : Xamarin.Forms.ITabStopElement * bool * System.Collections.Generic.IDictionary&lt;int, System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt; * int -&gt; Xamarin.Forms.ITabStopElement" Usage="Xamarin.Forms.TabIndexExtensions.FindNextElement (element, forwardDirection, tabIndexes, tabIndex)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Xamarin.Forms.ITabStopElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Xamarin.Forms.ITabStopElement" RefType="this" />
          <Parameter Name="forwardDirection" Type="System.Boolean" />
          <Parameter Name="tabIndexes" Type="System.Collections.Generic.IDictionary&lt;System.Int32,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt;" />
          <Parameter Name="tabIndex" Type="System.Int32" RefType="ref" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="forwardDirection">To be added.</param>
          <param name="tabIndexes">To be added.</param>
          <param name="tabIndex">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.TabIndexExtensions" Member="M:Xamarin.Forms.TabIndexExtensions.FindNextElement(Xamarin.Forms.ITabStopElement,System.Boolean,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{Xamarin.Forms.ITabStopElement}},System.Int32@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="GetSortedTabIndexesOnParentPage">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.SortedDictionary&lt;int,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt; GetSortedTabIndexesOnParentPage (this Xamarin.Forms.VisualElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.SortedDictionary`2&lt;int32, class System.Collections.Generic.List`1&lt;class Xamarin.Forms.ITabStopElement&gt;&gt; GetSortedTabIndexesOnParentPage(class Xamarin.Forms.VisualElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.TabIndexExtensions.GetSortedTabIndexesOnParentPage(Xamarin.Forms.VisualElement)" />
        <MemberSignature Language="F#" Value="static member GetSortedTabIndexesOnParentPage : Xamarin.Forms.VisualElement -&gt; System.Collections.Generic.SortedDictionary&lt;int, System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt;" Usage="Xamarin.Forms.TabIndexExtensions.GetSortedTabIndexesOnParentPage element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.SortedDictionary&lt;System.Int32,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Xamarin.Forms.VisualElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.TabIndexExtensions" Member="M:Xamarin.Forms.TabIndexExtensions.GetSortedTabIndexesOnParentPage(Xamarin.Forms.VisualElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.ITabStopElement" />
      </Targets>
      <Member MemberName="GetTabIndexesOnParentPage">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;int,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt; GetTabIndexesOnParentPage (this Xamarin.Forms.ITabStopElement element, out int countChildrenWithTabStopWithoutThis);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;int32, class System.Collections.Generic.List`1&lt;class Xamarin.Forms.ITabStopElement&gt;&gt; GetTabIndexesOnParentPage(class Xamarin.Forms.ITabStopElement element, [out] int32&amp; countChildrenWithTabStopWithoutThis) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.TabIndexExtensions.GetTabIndexesOnParentPage(Xamarin.Forms.ITabStopElement,System.Int32@)" />
        <MemberSignature Language="F#" Value="static member GetTabIndexesOnParentPage : Xamarin.Forms.ITabStopElement * int -&gt; System.Collections.Generic.IDictionary&lt;int, System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt;" Usage="Xamarin.Forms.TabIndexExtensions.GetTabIndexesOnParentPage (element, countChildrenWithTabStopWithoutThis)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IDictionary&lt;System.Int32,System.Collections.Generic.List&lt;Xamarin.Forms.ITabStopElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Xamarin.Forms.ITabStopElement" RefType="this" />
          <Parameter Name="countChildrenWithTabStopWithoutThis" Type="System.Int32" RefType="out" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="countChildrenWithTabStopWithoutThis">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.TabIndexExtensions" Member="M:Xamarin.Forms.TabIndexExtensions.GetTabIndexesOnParentPage(Xamarin.Forms.ITabStopElement,System.Int32@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.DataTemplate" />
      </Targets>
      <Member MemberName="SetBinding">
        <MemberSignature Language="C#" Value="public static void SetBinding (this Xamarin.Forms.DataTemplate self, Xamarin.Forms.BindableProperty targetProperty, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBinding(class Xamarin.Forms.DataTemplate self, class Xamarin.Forms.BindableProperty targetProperty, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.TemplateExtensions.SetBinding(Xamarin.Forms.DataTemplate,Xamarin.Forms.BindableProperty,System.String)" />
        <MemberSignature Language="F#" Value="static member SetBinding : Xamarin.Forms.DataTemplate * Xamarin.Forms.BindableProperty * string -&gt; unit" Usage="Xamarin.Forms.TemplateExtensions.SetBinding (self, targetProperty, path)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Xamarin.Forms.DataTemplate" RefType="this" />
          <Parameter Name="targetProperty" Type="Xamarin.Forms.BindableProperty" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">The template on which this method operates.</param>
          <param name="targetProperty">The target property of the binding.</param>
          <param name="path">The path to the binding.</param>
          <summary>Binds the <paramref name="self" /> object's <paramref name="targetProperty" /> to a new <see cref="T:Xamarin.Forms.Binding" /> instance that was created with <paramref name="path" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.TemplateExtensions" Member="M:Xamarin.Forms.TemplateExtensions.SetBinding(Xamarin.Forms.DataTemplate,Xamarin.Forms.BindableProperty,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="CancelAnimations">
        <MemberSignature Language="C#" Value="public static void CancelAnimations (this Xamarin.Forms.VisualElement view);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelAnimations(class Xamarin.Forms.VisualElement view) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.CancelAnimations(Xamarin.Forms.VisualElement)" />
        <MemberSignature Language="F#" Value="static member CancelAnimations : Xamarin.Forms.VisualElement -&gt; unit" Usage="Xamarin.Forms.ViewExtensions.CancelAnimations view" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="view">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.CancelAnimations(Xamarin.Forms.VisualElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="FadeTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; FadeTo (this Xamarin.Forms.VisualElement view, double opacity, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; FadeTo(class Xamarin.Forms.VisualElement view, float64 opacity, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.FadeTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member FadeTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.FadeTo (view, opacity, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="opacity" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="opacity">The opacity to fade to.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that performs the fade that is described by the <paramref name="opacity" />, <paramref name="length" />, and <paramref name="easing" /> parameters.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.FadeTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="LayoutTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; LayoutTo (this Xamarin.Forms.VisualElement view, Xamarin.Forms.Rectangle bounds, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; LayoutTo(class Xamarin.Forms.VisualElement view, valuetype Xamarin.Forms.Rectangle bounds, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.LayoutTo(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member LayoutTo : Xamarin.Forms.VisualElement * Xamarin.Forms.Rectangle * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.LayoutTo (view, bounds, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="bounds" Type="Xamarin.Forms.Rectangle" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="bounds">The layout bounds.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that eases the bounds of the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by the <paramref name="view" /> to the rectangle that is specified by the <paramref name="bounds" /> parameter.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.LayoutTo(Xamarin.Forms.VisualElement,Xamarin.Forms.Rectangle,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="RelRotateTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; RelRotateTo (this Xamarin.Forms.VisualElement view, double drotation, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; RelRotateTo(class Xamarin.Forms.VisualElement view, float64 drotation, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.RelRotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member RelRotateTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.RelRotateTo (view, drotation, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="drotation" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="drotation">The relative rotation.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Rotates the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> from its current rotation by <paramref name="drotation" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.RelRotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="RelScaleTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; RelScaleTo (this Xamarin.Forms.VisualElement view, double dscale, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; RelScaleTo(class Xamarin.Forms.VisualElement view, float64 dscale, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.RelScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member RelScaleTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.RelScaleTo (view, dscale, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="dscale" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="dscale">The relative scale.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that scales the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> from its current scale to <paramref name="dscale" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.RelScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="RotateTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; RotateTo (this Xamarin.Forms.VisualElement view, double rotation, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; RotateTo(class Xamarin.Forms.VisualElement view, float64 rotation, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.RotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member RotateTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.RotateTo (view, rotation, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="rotation" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="rotation">The final rotation value.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that performs the rotation that is described by the <paramref name="rotation" />, <paramref name="length" />, and <paramref name="easing" /> parameters.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.RotateTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="RotateXTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; RotateXTo (this Xamarin.Forms.VisualElement view, double rotation, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; RotateXTo(class Xamarin.Forms.VisualElement view, float64 rotation, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.RotateXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member RotateXTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.RotateXTo (view, rotation, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="rotation" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="rotation">The final rotation value.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that skews the Y axis by <paramref name="opacity" />, taking time <paramref name="length" /> and using <paramref name="easing" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.RotateXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="RotateYTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; RotateYTo (this Xamarin.Forms.VisualElement view, double rotation, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; RotateYTo(class Xamarin.Forms.VisualElement view, float64 rotation, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.RotateYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member RotateYTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.RotateYTo (view, rotation, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="rotation" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="rotation">The final rotation value.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that skews the X axis by <paramref name="opacity" />, taking time <paramref name="length" /> and using <paramref name="easing" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.RotateYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="ScaleTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ScaleTo (this Xamarin.Forms.VisualElement view, double scale, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ScaleTo(class Xamarin.Forms.VisualElement view, float64 scale, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.ScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member ScaleTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.ScaleTo (view, scale, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view on which this method operates.</param>
          <param name="scale">The final absolute scale.</param>
          <param name="length">The time, in milliseconds, over which to animate the transition. The default is 250.</param>
          <param name="easing">The easing function to use for the animation.</param>
          <summary>Returns a task that scales the <see cref="T:Xamarin.Forms.VisualElement" /> that is specified by <paramref name="view" /> to the absolute scale factor <paramref name="scale" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.ScaleTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="ScaleXTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ScaleXTo (this Xamarin.Forms.VisualElement view, double scale, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ScaleXTo(class Xamarin.Forms.VisualElement view, float64 scale, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.ScaleXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member ScaleXTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.ScaleXTo (view, scale, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">To be added.</param>
          <param name="scale">To be added.</param>
          <param name="length">To be added.</param>
          <param name="easing">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.ScaleXTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="ScaleYTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; ScaleYTo (this Xamarin.Forms.VisualElement view, double scale, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; ScaleYTo(class Xamarin.Forms.VisualElement view, float64 scale, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.ScaleYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member ScaleYTo : Xamarin.Forms.VisualElement * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.ScaleYTo (view, scale, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="scale" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">To be added.</param>
          <param name="scale">To be added.</param>
          <param name="length">To be added.</param>
          <param name="easing">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.ScaleYTo(Xamarin.Forms.VisualElement,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="TranslateTo">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; TranslateTo (this Xamarin.Forms.VisualElement view, double x, double y, uint length = 250, Xamarin.Forms.Easing easing = default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; TranslateTo(class Xamarin.Forms.VisualElement view, float64 x, float64 y, unsigned int32 length, class Xamarin.Forms.Easing easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.ViewExtensions.TranslateTo(Xamarin.Forms.VisualElement,System.Double,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
        <MemberSignature Language="F#" Value="static member TranslateTo : Xamarin.Forms.VisualElement * double * double * uint32 * Xamarin.Forms.Easing -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Xamarin.Forms.ViewExtensions.TranslateTo (view, x, y, length, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="view" Type="Xamarin.Forms.VisualElement" RefType="this" />
          <Parameter Name="x" Type="System.Double" />
          <Parameter Name="y" Type="System.Double" />
          <Parameter Name="length" Type="System.UInt32" />
          <Parameter Name="easing" Type="Xamarin.Forms.Easing" />
        </Parameters>
        <Docs>
          <param name="view">The view to tanslate.</param>
          <param name="x">The x component of the final translation vector.</param>
          <param name="y">The y component of the final translation vector.</param>
          <param name="length">The duration of the animation in milliseconds.</param>
          <param name="easing">The easing of the animation.</param>
          <summary>Animates an elements TranslationX and TranslationY properties from their current values to the new values. This ensures that the input layout is in the same position as the visual layout.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.ViewExtensions" Member="M:Xamarin.Forms.ViewExtensions.TranslateTo(Xamarin.Forms.VisualElement,System.Double,System.Double,System.UInt32,Xamarin.Forms.Easing)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Xamarin.Forms.VisualElement" />
      </Targets>
      <Member MemberName="HasVisualStateGroups">
        <MemberSignature Language="C#" Value="public static bool HasVisualStateGroups (this Xamarin.Forms.VisualElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasVisualStateGroups(class Xamarin.Forms.VisualElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.VisualStateManager.HasVisualStateGroups(Xamarin.Forms.VisualElement)" />
        <MemberSignature Language="F#" Value="static member HasVisualStateGroups : Xamarin.Forms.VisualElement -&gt; bool" Usage="Xamarin.Forms.VisualStateManager.HasVisualStateGroups element" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Xamarin.Forms.VisualElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">The element to check.</param>
          <summary>Returns <see langword="true" /> if <paramref name="element" /> has one or more visual state groups associated with it. Otherwise, returns <see langword="false" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.VisualStateManager" Member="M:Xamarin.Forms.VisualStateManager.HasVisualStateGroups(Xamarin.Forms.VisualElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="LoadFromXaml&lt;TXaml&gt;">
        <MemberSignature Language="C#" Value="public static TXaml LoadFromXaml&lt;TXaml&gt; (this TXaml view, string xaml);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TXaml LoadFromXaml&lt;TXaml&gt;(!!TXaml view, string xaml) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Xaml.Extensions.LoadFromXaml``1(``0,System.String)" />
        <MemberSignature Language="F#" Value="static member LoadFromXaml : 'Xaml * string -&gt; 'Xaml" Usage="Xamarin.Forms.Xaml.Extensions.LoadFromXaml (view, xaml)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TXaml</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TXaml" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TXaml" RefType="this" />
          <Parameter Name="xaml" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TXaml">The type of view to initialize with state from XAML.</typeparam>
          <param name="view">The view on which this method operates.</param>
          <param name="xaml">The XAML that encodes the view state.</param>
          <summary>Returns an initialized view by loading the specified <paramref name="xaml" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Xaml.Extensions" Member="M:Xamarin.Forms.Xaml.Extensions.LoadFromXaml``1(``0,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="LoadFromXaml&lt;TXaml&gt;">
        <MemberSignature Language="C#" Value="public static TXaml LoadFromXaml&lt;TXaml&gt; (this TXaml view, Type callingType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TXaml LoadFromXaml&lt;TXaml&gt;(!!TXaml view, class System.Type callingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Xaml.Extensions.LoadFromXaml``1(``0,System.Type)" />
        <MemberSignature Language="F#" Value="static member LoadFromXaml : 'Xaml * Type -&gt; 'Xaml" Usage="Xamarin.Forms.Xaml.Extensions.LoadFromXaml (view, callingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TXaml</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TXaml" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="view" Type="TXaml" RefType="this" />
          <Parameter Name="callingType" Type="System.Type" />
        </Parameters>
        <Docs>
          <typeparam name="TXaml">The type of view to initialize with state from XAML.</typeparam>
          <param name="view">The view on which this method operates.</param>
          <param name="callingType">The type of the caller.</param>
          <summary>Returns a <paramref name="TXaml" /> with the properties that are defined in the application manifest for <paramref name="callingType" />.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Xaml.Extensions" Member="M:Xamarin.Forms.Xaml.Extensions.LoadFromXaml``1(``0,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetService&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this IServiceProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.IServiceProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Xamarin.Forms.Xaml.IServiceProviderExtensions.GetService``1(System.IServiceProvider)" />
        <MemberSignature Language="F#" Value="static member GetService : IServiceProvider -&gt; 'T" Usage="Xamarin.Forms.Xaml.IServiceProviderExtensions.GetService provider" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">For internal use by the XAML infrastructure.</typeparam>
          <param name="provider">For internal use by the XAML infrastructure.</param>
          <summary>For internal use by the XAML infrastructure.</summary>
        </Docs>
        <Link Type="Xamarin.Forms.Xaml.IServiceProviderExtensions" Member="M:Xamarin.Forms.Xaml.IServiceProviderExtensions.GetService``1(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
